@using ISNAPOO.Common.HelperClasses

@inject INKPDService nkpdService
@inject IJSRuntime JsRuntime
@inject Blazored.LocalStorage.ILocalStorageService localStorage;

<SfDialog @bind-Visible="isVisible" Width="70%" AllowDragging="true" Height="auto" IsModal="true" EnableResize=true ShowCloseIcon="true">
    <DialogTemplates>
        <Header>Избор на НКПД</Header>
        <Content>
            <div class="content-wrapper">
                <div class="content-header">
                    <div class="container-fluid">
                        <h6 class="page-title-left">Национална Класификация на Професиите и Длъжностите</h6>
                        <div class="card">
                            <div class="card-header">
                                <nav class="navbar navbar-expand">
                                    <!-- Left navbar links -->
                                    <ul class="navbar-nav">
                                        <li class="nav-item d-none d-sm-inline-block">
                                            <button type="button" class="btn btn-primary btn-outline-primary waves-effect md-trigger" @onclick="OnSelectClickHandler">Избери</button>
                                        </li>
                                        <li class="nav-item d-none d-sm-inline-block">
                                            &nbsp;
                                        </li>
                                    </ul>
                                </nav>
                            </div>
                            <div class="card-body">
                                <SfTreeGrid ID="sfTreeGrid" @ref="sfTreeGrid" TValue="NKPDTreeGridData" HasChildMapping="IsParent" AllowSelection="true"
                                            ContextMenuItems="contextMenuItemModels"
                                            IdMapping="Id" ParentIdMapping="ParentId" TreeColumnIndex="2" AllowFiltering="true">
                                    <SfDataManager CrossDomain="true" AdaptorInstance="typeof(CustomWebApiAdaptor)" Adaptor="Adaptors.CustomAdaptor"></SfDataManager>
                                    <TreeGridEvents TValue="NKPDTreeGridData"
                                                    RowSelected="RowSelectedHandler"
                                                    RowDeselected="RowDeselectedHandler"
                                                    RowDataBound="CheckBoxColumnVisibilityHandler"
                                                    ContextMenuItemClicked="ContextMenuClickHandler">
                                    </TreeGridEvents>
                                    <TreeGridSelectionSettings PersistSelection="true" CheckboxOnly="true" ></TreeGridSelectionSettings>
                                    <TreeGridColumns>
                                        <TreeGridColumn Field="Id" HeaderText="Id" Width="1%" TextAlign="TextAlign.Left" IsPrimaryKey="true" Visible="false"></TreeGridColumn>
                                        <TreeGridColumn Type="Syncfusion.Blazor.Grids.ColumnType.CheckBox" Width="3%"></TreeGridColumn>
                                        <TreeGridColumn Field="Code" HeaderText="Код" Width="26%" TextAlign="TextAlign.Left" FilterSettings="filterSettings"></TreeGridColumn>
                                        <TreeGridColumn Field="Name" HeaderText="Наименование" Width="70%" TextAlign="TextAlign.Left" FilterSettings="filterSettings"></TreeGridColumn>
                                    </TreeGridColumns>
                                </SfTreeGrid>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </Content>
    </DialogTemplates>
</SfDialog>

<ToastMsg @ref="toast"></ToastMsg>

<style>
    <!-- скрива CheckBox при определен ред -->
    .e-removecheck .e-gridchkbox .e-checkbox-wrapper {
        display: none;
    }

    <!-- скрива CheckBox в хедъра -->
    .e-grid.e-responsive .e-headercelldiv.e-headerchkcelldiv {
        display: none;
    }
</style>

@code {
    SfTreeGrid<NKPDTreeGridData> sfTreeGrid;
    ToastMsg toast;
    public static List<NKPDTreeGridData> NKPDDataList = new List<NKPDTreeGridData>();
    List<int> list = new List<int>();
    List<int> rowIdList = new List<int>();
    FilterSettings filterSettings = new FilterSettings()
    {
        Operator = Operator.Contains
    };

    int[] currentdata = new int[] { };

    private bool isVisible;

    public static List<NKPDTreeGridData> filteredData = new List<NKPDTreeGridData>();
    public static int? filterCount;
    List<ContextMenuItemModel> contextMenuItemModels;

    [Parameter]
    public EventCallback<List<int>> OnSelect { get; set; }

    protected override async Task OnInitializedAsync()
    {
        this.isVisible = false;
        this.sfTreeGrid = new SfTreeGrid<NKPDTreeGridData>();
    }

    private async Task OnSelectClickHandler()
    {
        if (this.rowIdList.Count != 0)
        {
            this.isVisible = false;
            await this.OnSelect.InvokeAsync(this.rowIdList);
            this.rowIdList = new List<int>();
        }
        else
        {
            toast.sfErrorToast.Content = "Не е избрано поле!";
            await toast.sfErrorToast.ShowAsync();
        }
    }

    private async void RowSelectedHandler(RowSelectEventArgs<NKPDTreeGridData> args)
    {
        if (args.Data.EntityType == "NKPDIndividualGroupCode")
        {
            this.contextMenuItemModels = this.GenerateContextMenuButtons();
        }

        if (args.Data.EntityType == "NKPDCode")
        {
            if (!this.rowIdList.Contains(args.Data.EntityId))
            {
                this.rowIdList.Add(args.Data.EntityId);

            }
        }
    }

    private void RowDeselectedHandler(RowDeselectEventArgs<NKPDTreeGridData> args)
    {
        if (args.Data.EntityType == "NKPDCode")
        {
            this.rowIdList.Remove(args.Data.EntityId);
        }
    }

    private async Task CheckedRecordsHandler()
    {
        this.rowIdList.Clear();
        var selectedRows = await this.sfTreeGrid.GetSelectedRecordsAsync();

        if (selectedRows.Count > 0)
        {
            foreach (var item in selectedRows)
            {
                if (item.EntityType == "NKPDCode")
                {
                    if (!this.rowIdList.Contains(item.EntityId))
                    {
                        this.rowIdList.Add(item.EntityId);
                    }
                }
            }
        }
    }

    //скрива CheckBox към даден row по условие
    private void CheckBoxColumnVisibilityHandler(RowDataBoundEventArgs<NKPDTreeGridData> args)
    {
        if (args.Data.EntityType != "NKPDCode")
        {
            args.Row.AddClass(new string[] { "e-removecheck" });
        }
    }

    private async Task ContextMenuClickHandler(ContextMenuClickEventArgs<NKPDTreeGridData> args)
    {
        var indexes = new List<double>();
        var children = NKPDDataList.Where(x => x.ParentId == args.RowInfo.RowData.Id);
        foreach (var child in children)
        {
            if (child.EntityType == "NKPDCode")
            {
                var idx = await this.sfTreeGrid.GetRowIndexByPrimaryKeyAsync(child.Id);
                if (!indexes.Contains(idx))
                {
                    indexes.Add(idx);
                }
            }
        }

        await this.sfTreeGrid.SelectRowsAsync(indexes.ToArray());
    }

    private List<ContextMenuItemModel> GenerateContextMenuButtons()
    {
        List<ContextMenuItemModel> itemModels = new List<ContextMenuItemModel>();

        itemModels.Add(new ContextMenuItemModel()
        {
            Text = "Маркирай всички надолу",
            IconCss = ContextMenu.AddButtonCss,
        });

        return itemModels;
    }



    public async void DataboundHandler(object args)
    {
        //this.currentdata = (await localStorage.GetItemAsync<int[]>(GlobalConstants.LocalStorage_NKPDExpandedNodes));

        //if (this.currentdata != null && this.currentdata.Length > 0)
        //{
        //    this.list.AddRange(this.currentdata);
        //}

        //if (this.sfTreeGrid != null && this.localStorage != null)
        //{
        //    this.currentdata = await this.localStorage.GetItemAsync<int[]>(GlobalConstants.LocalStorage_NKPDExpandedNodes);

        //    if (this.currentdata != null)
        //    {
        //        for (var i = 0; i < this.currentdata.Length; i++)
        //        {
        //            await this.sfTreeGrid.ExpandByKeyAsync(currentdata[i]);
        //        }
        //    }
        //}
    }

    public async Task ExpandenHandler(RowExpandedEventArgs<NKPDTreeGridData> args)
    {
        //if (args.Data != null)
        //{
        //    if (!this.list.Contains(args.Data.Id))
        //    {
        //        this.list.Add(args.Data.Id);
        //        this.currentdata = this.list.ToArray();
        //        await this.localStorage.SetItemAsync(GlobalConstants.LocalStorage_NKPDExpandedNodes, this.currentdata);
        //    }
        //}
    }

    public async Task CollapsedHandler(RowCollapsedEventArgs<NKPDTreeGridData> args)
    {
        //if (args.Data != null)
        //{
        //    this.list.Remove(args.Data.Id);
        //    this.currentdata = this.list.ToArray();
        //    await this.localStorage.SetItemAsync(GlobalConstants.LocalStorage_NKPDExpandedNodes, this.currentdata);
        //}
    }

    public async Task Open()
    {
        this.rowIdList = new List<int>();
        NKPDDataList = await this.nkpdService.LoadNKPDDataAsync();
        this.isVisible = true;
        this.StateHasChanged();
    }

    public class CustomWebApiAdaptor : DataAdaptor
    {
        public override object Read(DataManagerRequest dataManagerRequest, string key = null)
        {
            filterCount = null;
            IEnumerable<NKPDTreeGridData> data = NKPDDataList;

            if (dataManagerRequest.Where != null && dataManagerRequest.Where.Count > 0)
            {
                if (dataManagerRequest.Where[0].Field == null)
                {
                    data = DataOperations.PerformFiltering(data, dataManagerRequest.Where, dataManagerRequest.Where[0].Operator);
                }
                else
                {
                    data = DataOperations.PerformFiltering(data, dataManagerRequest.Where, dataManagerRequest.Where[0].Operator);
                }
            }

            int count = data.Cast<NKPDTreeGridData>().Count();

            if (dataManagerRequest.Where != null && dataManagerRequest.Where.Count > 0)
            {
                if (dataManagerRequest.Where[0].Field == null)
                {
                    filteredData.Clear();
                    filterCount = 0;

                    filteredData = this.FilterHierarchyData(data);
                    data = filteredData;
                }
            }

            count = filterCount != null ? filteredData.Count : count;
            return dataManagerRequest.RequiresCounts ? new DataResult() { Result = data, Count = count } : (object)data;
        }

        // функционалност за филтрация на данни заедно с родителите
        public List<NKPDTreeGridData> FilterHierarchyData(IEnumerable<NKPDTreeGridData> filterData)
        {
            foreach (var data in filterData)
            {
                if (data.ParentId != null)
                {
                    filteredData = this.FilterData(data);
                }

                if (!filteredData.Contains(data))
                {
                    filteredData.Add(data);
                }
            }

            return filteredData;
        }

        // функционалност за филтрация на данни заедно с родителите
        public List<NKPDTreeGridData> FilterData(NKPDTreeGridData data)
        {
            var parent = NKPDDataList.Where(p => p.Id == data.ParentId).FirstOrDefault();

            if (parent.ParentId != null)
            {
                filteredData = FilterData(parent);

                if (!filteredData.Contains(parent))
                {
                    filteredData.Add(parent);
                }
            }
            else
            {
                var alreadyPresent = filteredData.FindIndex(d => d.Id == parent.Id);

                if (alreadyPresent == -1)
                {
                    if (!filteredData.Contains(parent))
                    {
                        filteredData.Add(parent);
                    }

                    filterCount++;
                }
            }

            return filteredData;
        }
    }


}
