@page "/CourseGraduatesList"

@inherits BlazorBaseComponent

<div class="content-wrapper">
    <div class="content-header">
        <div class="container-fluid">
            <h6 class="page-title-left">Завършили курсисти</h6>
            <div class="card">
                <div class="card-header">
                    <nav class="navbar navbar-expand  ">
                        <!-- Left navbar links -->
                        <ul class="navbar-nav">
                            @*<li class="nav-item d-none d-sm-inline-block">
                            <button type="button" class="btn btn-primary btn-outline-primary waves-effect md-trigger" @onclick="AddCourseProtocolBtn">Добави протокол</button>
                            </li>
                            <li class="nav-item d-none d-sm-inline-block">
                            &nbsp;
                            </li>*@
                        </ul>
                    </nav>
                </div>
                <div class="card-body">
                    <SfGrid DataSource="graduatesSource" AllowSorting="true" AllowFiltering="true" EnableAltRow="true" EnableHover="false"
                            AllowTextWrap="true" @ref="graduatesGrid" AllowSelection="false" AllowPaging="true"
                            Toolbar="@(new List<string>() { "ExcelExport", "PdfExport" })" AllowExcelExport="true" AllowPdfExport="true">
                        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel">
                            <GridFilterColumns>
                                <GridFilterColumn Field="FinishedTypeName" MatchCase="false" Operator="Operator.NotEqual" Value="thirdInitialFilterValue" Predicate="and"></GridFilterColumn>
                                <GridFilterColumn Field="FinishedTypeName" MatchCase="false" Operator="Operator.NotEqual" Value="fourthInitialFilterValue" Predicate="and"></GridFilterColumn>
                                <GridFilterColumn Field="FinishedTypeName" MatchCase="false" Operator="Operator.NotEqual" Value="fifthInitialFilterValue" Predicate="and"></GridFilterColumn>
                                <GridFilterColumn Field="FinishedTypeName" MatchCase="false" Operator="Operator.NotEqual" Value="sixthInitialFilterValue" Predicate="and"></GridFilterColumn>
                                <GridFilterColumn Field="FinishedTypeName" MatchCase="false" Operator="Operator.NotEqual" Value="seventhInitialFilterValue" Predicate="and"></GridFilterColumn>
                                <GridFilterColumn Field="FinishedTypeName" MatchCase="false" Operator="Operator.NotEqual" Value="eigthInitialFilterValue" Predicate="and"></GridFilterColumn>
                            </GridFilterColumns>
                        </GridFilterSettings>
                        <GridPageSettings PageCount="5" PageSize=20 PageSizes="true"></GridPageSettings>
                        <GridEvents TValue="ClientCourseVM" OnToolbarClick="ToolbarClick" />
                        <GridColumns>
                            <GridColumn TextAlign="TextAlign.Left" CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-removewrap" }})" Width="8">
                                <Template>
                                    @GetRowNumber(graduatesGrid, (context as ClientCourseVM).IdClientCourse).Result
                                </Template>
                            </GridColumn>
                            <GridColumn Width="13" HeaderText=" ">
                                <Template>
                                    <SfTooltip Position="TooltipPosition.BottomCenter" Content="Редакция" OpensOn="Hover">
                                        <button type="button" class="btn-row" @onclick="(async () => await this.EditClientCourseBtn(context as ClientCourseVM))"><i class="fa fa-pencil-square-o"></i></button>
                                    </SfTooltip>
                                </Template>
                            </GridColumn>
                            <GridColumn Field="IdClientCourse" IsPrimaryKey="true" Visible="false"></GridColumn>
                            <GridColumn Field="Course.CourseName" HeaderText="Курс" TextAlign="TextAlign.Left" Width="40"></GridColumn>
                            <GridColumn Field="CoursePeriod" HeaderText="Период на обучение" TextAlign="TextAlign.Left" Width="40"></GridColumn>
                            <GridColumn Field="Course.Program.Speciality.Profession.CodeAndName" HeaderText="Професия" TextAlign="TextAlign.Left" Width="40"></GridColumn>
                            <GridColumn Field="Course.Program.Speciality.CodeAndAreaForAutoCompleteSearch" HeaderText="Специалност" TextAlign="TextAlign.Left" Width="40"></GridColumn>
                            <GridColumn Field="Indent" HeaderText="ЕГН/ЛНЧ/ИДН" TextAlign="TextAlign.Left" Width="40"></GridColumn>
                            <GridColumn Field="FirstName" HeaderText="Име" TextAlign="TextAlign.Left" Width="30"></GridColumn>
                            <GridColumn Field="SecondName" HeaderText="Презиме" TextAlign="TextAlign.Left" Width="30"></GridColumn>
                            <GridColumn Field="FamilyName" HeaderText="Фамилия" TextAlign="TextAlign.Left" Width="30"></GridColumn>
                            <GridColumn Field="FinishedTypeName" HeaderText="Статус на завършване" TextAlign="TextAlign.Center" Width="30">
                                <Template>
                                    <div class="text-center">
                                        @{
                                            var client = context as ClientCourseVM;
                                            switch (client.FinishedTypeName)
                                            {
                                                case thirdInitialFilterValue:
                                                    <label class="form-label-status label label-warning">@client.FinishedTypeName</label>
                                                    break;
                                                case firstInitialFilterValue:
                                                    <label class="form-label-status label label-primary">@client.FinishedTypeName</label>
                                                    break;
                                                case fourthInitialFilterValue:
                                                    <label class="form-label-status label label-danger">@client.FinishedTypeName</label>
                                                    break;
                                                case secondInitialFilterValue:
                                                    <label class="form-label-status label label-success">@client.FinishedTypeName</label>
                                                    break;
                                            }
                                        }
                                    </div>
                                </Template>
                            </GridColumn>
                            <GridColumn Width="8">
                                <Template>
                                    @{
                                        var ctx = context as ClientCourseVM;
                                        var openedRow = this.GetAllCurrentlyOpenedModalsConcurrencyInfoValue(ctx.IdClientCourse, "TrainingClientCourse");
                                        if (openedRow != null && openedRow.IdPerson != this.UserProps.IdPerson)
                                        {
                                            <SfTooltip Position="TooltipPosition.BottomCenter" Content="Записът е в процес на редакция" OpensOn="Hover">
                                                <button class="btn-row" disabled><i class="fa fa-lock"></i></button>
                                            </SfTooltip>
                                        }
                                    }
                                </Template>
                            </GridColumn>
                        </GridColumns>
                    </SfGrid>
                </div>
            </div>
        </div>
    </div>
</div>

<CurrentCourseClientModal @ref="currentCourseClientModal" CallbackAfterSubmit="UpdateAfterCourseClientModalSubmitAsync" EntryFromCourseGraduatesList="true" />
<LegalCapacityCurrentCourseClientModal @ref="legalCapacityCurrentCourseClientModal" CallbackAfterSubmit="UpdateAfterCourseClientModalSubmitAsync" />
