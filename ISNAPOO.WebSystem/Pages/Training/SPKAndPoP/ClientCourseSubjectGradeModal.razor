@inherits BlazorBaseComponent

<SfDialog @bind-Visible="isVisible" Width="70%" Height="70%" EnableResize="true" AllowDragging="true" IsModal="true" ZIndex="5002" CloseOnEscape="false" ShowCloseIcon="true">
    <DialogAnimationSettings Effect="AnimationEffect" Duration="500" />
    <DialogEvents OnClose="OnXClickHandler" />
    <DialogTemplates>
        <Header>Данни за оценки на курсисти по предмет <span style="color: #ffffff;">@this.courseSubjectVM.ProfessionalTrainingName @this.courseSubjectVM.Subject</span></Header>
        <Content>
            <EditForm EditContext="this.editContext">
                <div id="validation-errors">
                    @if (this.validationMessages.Any())
                    {
                        <ul class="validation-errors">
                            @foreach (var msg in this.validationMessages)
                            {
                                <li class="validation-message">@msg</li>
                            }
                        </ul>
                    }
                    <div class="row" style="margin-bottom:12px">
                        <div class="col-sm-12 text-center">
                            <button type="button" class="btn btn-primary btn-outline-primary waves-effect md-trigger" style="margin-right: 15px;" @onclick="PreviousCurriculum" disabled="@(this.disablePreviousBtn)"><i class="fa fa-arrow-circle-left"></i>Предишен</button>
                            <button type="button" class="btn btn-primary btn-outline-primary waves-effect md-trigger" @onclick="NextCurriculum" disabled="@(this.disableNextBtn)"><i class="fa fa-arrow-circle-right"></i>Следващ</button>
                        </div>
                    </div>
                </div>
                <div class="content-wrapper">
                    <div class="content-header">
                        <div class="container-fluid">
                            <div class="card" style="margin-bottom: 0px;">
                                <div class="card-header">
                                    <nav class="navbar navbar-expand  ">
                                        <!-- Left navbar links -->
                                        <ul class="navbar-nav">
                                            @*<li class="nav-item d-none d-sm-inline-block">
                                            <button type="button" class="btn btn-primary btn-outline-primary waves-effect md-trigger" @onclick="FilterGrid">Филтър</button>
                                            </li>
                                            <li class="nav-item d-none d-sm-inline-block">
                                            &nbsp;
                                            </li>*@
                                        </ul>
                                    </nav>
                                </div>
                                <div class="card-body">
                                    <SfGrid DataSource="clientSource" AllowSorting="true" AllowFiltering="true" EnableAltRow="true" EnableHover="false"
                                            AllowTextWrap="true" @ref="clientsGrid" AllowSelection="false" AllowPaging="true"
                                            Toolbar="@(new List<string>() { "ExcelExport", "PdfExport" })" AllowExcelExport="true" AllowPdfExport="true">
                                        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
                                        <GridPageSettings PageCount="5" PageSize=20 PageSizes="true"></GridPageSettings>
                                        <GridEvents TValue="CourseSubjectGradeVM" OnToolbarClick="ToolbarClick" />
                                        <GridEditSettings AllowEditing="true" AllowEditOnDblClick="false" ShowConfirmDialog="false" Mode="Syncfusion.Blazor.Grids.EditMode.Batch"></GridEditSettings>
                                        <GridColumns>
                                            <GridColumn AllowFiltering="false" AllowSorting="false" TextAlign="TextAlign.Left" CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-removewrap" }})" Width="8">
                                                <Template Context="clientCtx">
                                                    @GetRowNumber(clientsGrid, (clientCtx as CourseSubjectGradeVM).IdCourseSubjectGrade).Result
                                                </Template>
                                            </GridColumn>
                                            <GridColumn Field="IdCourseSubjectGrade" IsPrimaryKey="true" Visible="false"></GridColumn>
                                            <GridColumn Field="ClientCourse.FirstName" HeaderText="Име" TextAlign="TextAlign.Left" Width="25"></GridColumn>
                                            <GridColumn Field="ClientCourse.SecondName" HeaderText="Презиме" TextAlign="TextAlign.Left" Width="25"></GridColumn>
                                            <GridColumn Field="ClientCourse.FamilyName" HeaderText="Фамилия" TextAlign="TextAlign.Left" Width="25"></GridColumn>
                                            <GridColumn Field="TheoryGrade" HeaderText="Оценка теория" TextAlign="TextAlign.Left" Width="20" Format="f2" Visible="@(this.courseSubjectVM.TheoryHours != 0)">
                                                <Template Context="clientCourseCtx">
                                                    @{
                                                        var con = clientCourseCtx as CourseSubjectGradeVM;
                                                        <div @onclick:stopPropagation="true" @onkeydown:stopPropagation="true">
                                                            <SfTextBox @bind-Value="con.TheoryGradeAsStr" ValueChange="(async () => await this.SaveTheoryGradeAsync(con))" OnInput="SetIsSwitchBtnState"></SfTextBox>
                                                        </div>
                                                    }
                                                </Template>
                                            </GridColumn>
                                            <GridColumn Field="PracticeGrade" HeaderText="Оценка практика" TextAlign="TextAlign.Left" Width="20" Format="f2" Visible="@(this.courseSubjectVM.PracticeHours != 0)">
                                                <Template Context="clientCourseCtx">
                                                    @{
                                                        var con = clientCourseCtx as CourseSubjectGradeVM;
                                                        <div @onclick:stopPropagation="true" @onkeydown:stopPropagation="true">
                                                            <SfTextBox @bind-Value="con.PracticeGradeAsStr" ValueChange="(async () => await this.SavePracticeGradeAsync(con))" OnInput="SetIsSwitchBtnState"></SfTextBox>
                                                        </div>
                                                    }
                                                </Template>
                                            </GridColumn>
                                        </GridColumns>
                                    </SfGrid>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </EditForm>
        </Content>
        <FooterTemplate>
            <div class="row">
                <div class="col-sm-12">
                    <div class="form-group">
                        <div class="text-right">
                            <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal" @onclick="CancelClickedHandler">Отказ</button>
                        </div>
                    </div>
                </div>
            </div>
        </FooterTemplate>
    </DialogTemplates>
</SfDialog>

