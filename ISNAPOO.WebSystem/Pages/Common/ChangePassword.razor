@page "/ChangePassword"

@using global::Data.Models.Data.ProviderData
@using ISNAPOO.Core.ViewModels.Identity
@using ISNAPOO.Common.Framework

@inject UserManager<ApplicationUser> UserManager;
@inject NavigationManager NavMgr
@inject IHttpContextAccessor HttpContextAccessor
@inject ILocService LS

<SfDialog Target="#target" Width="600px" EnableResize=true AllowDragging="true" IsModal="true" ShowCloseIcon="true" AllowPrerender="true" Visible="true">
    <DialogTemplates>
        <Header>
            Промяна на парола
        </Header>
        <Content>
            <EditForm Model="@changePasswordModel" id="changePassword">
                @{
                    if (errorMessages.Any())
                    {
                        <ul class="validation-errors">
                            @foreach (var errorMessage in errorMessages)
                            {
                                <li class="validation-message">@errorMessage</li>
                            }
                        </ul>
                    }
                }
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="modal-body">
                    <div class="row col-6">
                        <!-- text input -->
                        <div class="form-group required">
                            <label class="control-label">
                                Стара парола:
                            </label>
                            <InputText id="oldPassword" class="form-control" type="password" @bind-Value="@changePasswordModel.OldPassword"></InputText>
                        </div>
                    </div>
                    <div class="row col-6">
                        <!-- text input -->
                        <div class="form-group required">
                            <label class="control-label">
                                Нова парола:
                            </label>
                            <InputText id="password" class="form-control" type="password" @bind-Value="@changePasswordModel.NewPassword"></InputText>
                        </div>
                    </div>
                    <div class="row col-6">
                        <!-- text input -->
                        <div class="form-group required">
                            <label class="control-label">
                                Потвърдете паролата:
                            </label>
                            <InputText id="confirmPassword" class="form-control" type="password" @bind-Value="@changePasswordModel.ConfirmPassword"></InputText>
                        </div>
                    </div>
                    <input type="hidden" class="form-control" @bind-value="@changePasswordModel.UserName" />
                </div>
            </EditForm>
        </Content>
        <FooterTemplate>
            <div class="row">
                <div class="col">
                    <div class="float-">
                        <button type="submit" class="btn btn-info" form="changePassword" @onclick="@OnReset"><i class="icofont icofont-post"></i>Изпращане</button>
                    </div>
                </div>
            </div>
        </FooterTemplate>
    </DialogTemplates>
</SfDialog>

<ToastMsg @ref="toast"></ToastMsg>

@code {
    ToastMsg toast;

    EditContext editContext;
    string path = string.Empty;
    ChangePasswordModel changePasswordModel;
    ResultContext<ApplicationUser> resultContext = new ResultContext<ApplicationUser>();
    List<string> errorMessages = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        this.changePasswordModel = new ChangePasswordModel();
        this.editContext = new EditContext(changePasswordModel);
    }

    private async void OnReset()
    {
        bool isValid = this.editContext.Validate();
        if (isValid)
        {
            var userName = HttpContextAccessor.HttpContext.User.Identity.Name;
            var user = await UserManager.FindByNameAsync(userName);
            if (user == null)
            {
                //TODO: Send confirmation
            }
            else
            {
                var result = await UserManager.ChangePasswordAsync(user, changePasswordModel.OldPassword, changePasswordModel.NewPassword);
                if (result.Succeeded)
                {
                    toast.sfSuccessToast.Content = "Паролата Ви е рестартирана успешно.";
                    toast.sfSuccessToast.ShowAsync();
                    NavMgr.NavigateTo("./Login", true);
                }
                else
                {
                    errorMessages = this.resultContext.ListErrorMessages.ToList();

                    foreach (var error in result.Errors)
                    {
                        var newError = string.Empty;

                        switch (error.Code)
                        {
                            case "PasswordMismatch":
                                errorMessages.Add(LS.GetLocalizedHtmlString("ChangePassword_PasswordMismatch").Value);
                                break;
                        }
                    }
                }

                this.StateHasChanged();
            }
        }
    }

    
}
