@page "/RestartPassword"
@*?uid={uid}&token={token}*@

@using System.ComponentModel.DataAnnotations
@using System.Text.RegularExpressions
@using System.Web

@using Microsoft.AspNetCore.Mvc
@using Microsoft.AspNetCore.Http.Extensions

@using ISNAPOO.Core.ViewModels
@using ISNAPOO.Common.Framework
@using System.IdentityModel.Tokens.Jwt
@using global::Data.Models.Data.ProviderData

@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager NavMgr
@inject ILocService LS


<SfDialog Target="#target" Width="600px" EnableResize=true AllowDragging="true" IsModal="true" AllowPrerender="true" Visible="true">
    <DialogTemplates>
        <Header>
            Промяна на парола на потребител
        </Header>
        <Content>
            <EditForm Model="@resetPasswordModel" id="resetPassword">
                @{
                    if (errorMessages.Any())
                    {
                        <ul class="validation-errors">
                            @foreach (var errorMessage in errorMessages)
                            {
                                <li class="validation-message">@errorMessage</li>
                            }
                        </ul>
                    }
                }
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="modal-body">
                    <div class="row">
                        <!-- text input -->
                        <div class="form-group required">
                            <label class="control-label">
                                Нова парола:
                            </label>
                            <InputText id="password" class="form-control" type="password" @bind-Value="@resetPasswordModel.NewPassword"></InputText>
                        </div>
                    </div>
                    <div class="row">
                        <!-- text input -->
                        <div class="form-group required">
                            <label class="control-label">
                                Потвърдете паролата:
                            </label>
                            <InputText id="confirmPassword" class="form-control" type="password" @bind-Value="@resetPasswordModel.ConfirmPassword"></InputText>
                        </div>
                    </div>
                </div>
            </EditForm>
        </Content>
        <FooterTemplate>
            <div class="row">
                <div class="col">
                    <div class="float-">
                        <button type="submit" class="btn btn-info" form="resetPassword" @onclick="@OnReset">Промени парола</button>
                    </div>
                </div>
            </div>
        </FooterTemplate>
    </DialogTemplates>
</SfDialog>

<ToastMsg @ref="toast"></ToastMsg>

@code {

    [Parameter]
    [SupplyParameterFromQuery]
    public string? token { get; set; }

    ToastMsg toast;

    EditContext editContext;
    string path = string.Empty;
    ResetPasswordModel resetPasswordModel;

    List<string> errorMessages = new List<string>();


    protected override async Task OnInitializedAsync()
    {
        ResultContext<TokenVM> resultContext = new ResultContext<TokenVM>();

        resultContext.ResultContextObject.Token = token;

        try
        {
            resultContext = BaseHelper.GetDecodeToken(resultContext);

            if (resultContext.ResultContextObject.IsValid)
            {
                this.path = this.NavMgr.Uri;
                resetPasswordModel = new ResetPasswordModel();
                this.editContext = new EditContext(resetPasswordModel);
            }
            else 
            { 
                this.NavMgr.NavigateTo($"/ForgotPasswordInvalidLink");
            }


        }
        catch (Exception)
        {

            this.NavMgr.NavigateTo($"/ForgotPasswordInvalidLink");
        }





    }

    private async void OnReset()
    {

        ResultContext<TokenVM> currentContext = new ResultContext<TokenVM>();

        currentContext.ResultContextObject = new TokenVM();

        currentContext.ResultContextObject.Token = token;

        currentContext = BaseHelper.GetDecodeToken(currentContext);

        var decodedUrlToken = HttpUtility.UrlDecode(currentContext.ResultContextObject.ListDecodeParams.First(x => x.Key.Equals("Token")).Value.ToString());

        var decodedUsername = currentContext.ResultContextObject.ListDecodeParams.First(x => x.Key.Equals("Username")).Value.ToString();

        bool isValid = this.editContext.Validate();

        if (isValid)
        {
            var user = await UserManager.FindByNameAsync(decodedUsername);

            if (user == null)
            {
                //TODO: Send confirmation
            }
            else
            {
                var result = await UserManager.ResetPasswordAsync(user, decodedUrlToken, resetPasswordModel.NewPassword);
                if (result.Succeeded)
                {
                    toast.sfSuccessToast.Content = "Паролата Ви е променена успешно.";
                    toast.sfSuccessToast.ShowAsync();
                    await Task.Delay(5000);
                    NavMgr.NavigateTo("./Login", true);
                }
                else if (result.Errors.Any()){
                    if (result.Errors.FirstOrDefault(p => p.Code.Equals("InvalidToken")) != null)
                    {
                         errorMessages.Clear();
                    errorMessages.Add("Паролата вече е променена!");
                    }
                    else
                    {
                        errorMessages.Clear();
                        foreach (var item in result.Errors)
                        {
                            errorMessages.Add(item.Description);
                        }
                    }

                }
                //else
                //{
                //    errorMessages.Clear();
                //    errorMessages.Add("Паролата вече е променена!");
                    //errorMessages.AddRange(result.Errors.Select(e => e.Description));
                    //foreach (var error in result.Errors)
                    //{
                    //    var newError = string.Empty;

                    //    switch (error.Description)
                    //    {
                    //        case "Invalid token.":
                    //            errorMessages.Add(LS.GetLocalizedHtmlString("RestartPassword_InvalidToken").Value);
                    //            break;
                    //    }
                //    }
                //}

                this.StateHasChanged();
            }
        }
    }
}
