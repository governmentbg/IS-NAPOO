@page "/ForgotPassword"

@using System.Text.RegularExpressions
@using global::Data.Models.Data.ProviderData
@using System.ComponentModel.DataAnnotations
@using System.Security.Policy
@using ISNAPOO.Common.Framework
@using Microsoft.AspNetCore.Identity;
@using Microsoft.AspNetCore.Identity.UI.Services;
@using Microsoft.DotNet.Scaffolding.Shared.Messaging
@using ISNAPOO.Core.UserContext
@using ISNAPOO.Core.Contracts.Mailing
@using ISNAPOO.Core.ViewModels

@inject IMailService mailService
@inject NavigationManager NavMgr
@inject UserManager<ApplicationUser> UserManager

<SfDialog Target="#target" Width="600px" EnableResize=true AllowDragging="true" IsModal="true" ShowCloseIcon="true" AllowPrerender="true" Visible="true" VisibleChanged="@this.RedirectToLogin">
    <DialogTemplates>
        <Header>
            Забравена парола
        </Header>
        <Content>
            <div>
                <ul class="validation-errors">
                    @foreach (var msg in this.validationMessages)
                    {
                        <li class="validation-message">@msg</li>
                    }
                </ul>
            </div>
            <EditForm EditContext="editContext" id="forgotPassword">

                <div class="modal-body">
                    <div class="row">
                        <div class="col-12">
                            <!-- text input -->
                            <div class="form-group required">
                                <label class="control-label">
                                    Потребителско име:
                                </label>
                                <InputText id="email" class="form-control" type="text" @bind-Value="forgotPasswordModel.UserName"></InputText>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-12">
                            <!-- text input -->
                            <div class="form-group required">
                                <label class="control-label">
                                    E-mail:
                                </label>
                                <InputText id="email" class="form-control" type="text" @bind-Value="forgotPasswordModel.Email"></InputText>
                            </div>
                        </div>
                    </div>
                </div>
            </EditForm>
        </Content>
        <FooterTemplate>
            <div class="row">
                <div class="col">
                    <div class="float-">
                        <button type="submit" class="btn btn-info" form="forgotPassword" disabled=@isSent @onclick="@OnSend"><i class="icofont icofont-post"></i>Изпращане</button>
                    </div>
                </div>
            </div>
        </FooterTemplate>
    </DialogTemplates>
</SfDialog>

@code
{
    SfDialog dialog = new SfDialog();
    ForgotPasswordModel forgotPasswordModel;
    EditContext editContext;
    bool isVisible = true;
    bool isSent = false;
    List<string> validationMessages = new List<string>();
    private ValidationMessageStore? messageStore;
    public EventCallback<ForgotPasswordModel> ForgotPasswordCallback { get; set; }

    protected override async Task OnInitializedAsync()
    {
        this.forgotPasswordModel = new ForgotPasswordModel();
        this.editContext = new EditContext(this.forgotPasswordModel);

        this.editContext.EnableDataAnnotationsValidation();
    }

    protected async void OnSend()
    {

        this.validationMessages.Clear();
        this.editContext = new EditContext(this.forgotPasswordModel);
        bool isValid = this.editContext.Validate();
        this.editContext.OnValidationRequested += this.CheckRequiredFilds;

        this.messageStore = new ValidationMessageStore(this.editContext);


        isValid = this.editContext.Validate();
        this.validationMessages.AddRange(editContext.GetValidationMessages());
        if (isValid)
        {
            var user = await this.UserManager.FindByNameAsync(this.forgotPasswordModel.UserName);
            if (user == null || !this.forgotPasswordModel.Email.Equals(user.Email))
            {
                //TODO: Some logic
                this.validationMessages.Add("Не е намерен потребител с въведената информация!");
                this.StateHasChanged();
                //this.NavMgr.NavigateTo($"/ForgotPasswordUnsuccess");
            }
            else
            {
                ResultContext<ApplicationUser> resultContext = new ResultContext<ApplicationUser>();

                resultContext.ResultContextObject = user;

                await this.mailService.SendForgotPasswordEmail(resultContext);
                var isSent = true;

                this.StateHasChanged();

                this.NavMgr.NavigateTo("/ForgotPasswordSuccess");
            }
        }
    }

    private void CheckRequiredFilds(object? sender, ValidationRequestedEventArgs args)
    {
        this.messageStore?.Clear();

        if (string.IsNullOrEmpty(this.forgotPasswordModel.Email))
        {
            FieldIdentifier fi = new FieldIdentifier(this.forgotPasswordModel, "Email");
            this.messageStore?.Add(fi, "Полето за \"E-mail\" е задължително!");
        }
        else
        {
            Regex regex = new Regex("(?:[a-z0-9!#$%&'*+\\=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+\\=?^_`{|}~-]+)*|\"\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\"\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])");
            Match match = regex.Match(this.forgotPasswordModel.Email);
            if (!match.Success)
            {
                FieldIdentifier fi = new FieldIdentifier(this.forgotPasswordModel, "Email");
                this.messageStore?.Add(fi, "Въведеният E-mail е невалиден!");
            }
        }

        if (string.IsNullOrEmpty(this.forgotPasswordModel.UserName))
        {
            FieldIdentifier fi = new FieldIdentifier(this.forgotPasswordModel, "UserName");
            this.messageStore?.Add(fi, "Полето за \"Потребителско име\" е задължително!");
        }

    }

    protected async void RedirectToLogin()
    {
        NavMgr.NavigateTo("/");
    }
}