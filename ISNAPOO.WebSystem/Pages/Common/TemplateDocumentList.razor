@page "/TemplateDocumentList"
@attribute [Authorize(Policy = "ShowTemplateDocumentList")]

@using ISNAPOO.Core.Contracts.Common
@using ISNAPOO.Core.ViewModels.Common

@inject ITemplateDocumentService TemplateDocumentService
@inject Microsoft.JSInterop.IJSRuntime JsRuntime
@inherits BlazorBaseComponent

<div class="content-wrapper">
    <div class="content-header">
        <div class="container-fluid">
            <h6 class="page-title-left">Поддръжка на документи</h6>
            <div class="card">
                <div class="card-header">
                    <nav class="navbar navbar-expand">
                        <!-- Left navbar links -->
                        <ul class="navbar-nav">
                            <li class="nav-item d-none d-sm-inline-block">
                              								<button type="button" class="btn btn-primary btn-outline-primary waves-effect md-trigger" @onclick="OpenAddNewModal">Нов</button>
                            </li>
						 </ul>
                    </nav>
                </div>

                <div class="card-body">
                    <SfGrid ID="defaultGrid" DataSource="@templateDocuments" AllowSorting="true" AllowTextWrap="true" AllowFiltering="true" @ref="templateDocumentGrid" AllowPaging=true>
                        <GridSelectionSettings CheckboxOnly="true" Type="Syncfusion.Blazor.Grids.SelectionType.Multiple"></GridSelectionSettings>
                        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
                        <GridTextWrapSettings WrapMode="Syncfusion.Blazor.Grids.WrapMode.Both"></GridTextWrapSettings>
                        <GridPageSettings PageCount="5" PageSize=20 PageSizes="true"></GridPageSettings>
                        <GridEvents TValue="TemplateDocumentVM" RowSelected="RowSelected" RowDeselected="RowDeselected"></GridEvents>
                        <GridColumns>
                            <GridColumn Width="10">
                                <Template>
                                    <SfTooltip Position="TooltipPosition.BottomCenter" Content="Редакция" OpensOn="Hover">
									<button  @onclick="(() => SelectedRow(context as TemplateDocumentVM))" class="btn-row"><i class="fa fa-pencil-square-o"></i></button>
                                    </SfTooltip>

                                </Template>
                            </GridColumn>
                            <GridColumn Field="TemplateName" IsPrimaryKey="true" HeaderText="Наименование на шаблона" TextAlign="TextAlign.Left" Width="40"></GridColumn>
                            <GridColumn Field="ModuleName" HeaderText="Модул" TextAlign="TextAlign.Left" Width="60"></GridColumn>
                            <GridColumn Field="ApplicationTypeName" HeaderText="Тип на приложението" TextAlign="TextAlign.Left" Width="60"></GridColumn>
                            <GridColumn Field="TemplateDescription" HeaderText="Описание" TextAlign="TextAlign.Left" Width="60"></GridColumn>
                            <GridColumn Field="StatusName" HeaderText="Статус на валидност" TextAlign="TextAlign.Left" Width="60">
                                <Template>
                                    <div class="text-center">
                                        @{
                                            var templateDocument  = (context as TemplateDocumentVM);
                                            if (templateDocument.IdStatus != 0)
                                            {
                                                switch (templateDocument.StatusName)
                                                {
                                                    case "Активен":
                                                        <label class="form-label-status label label-success" style="width: 60%;">@templateDocument.StatusName</label>
                                                        break;
                                                    
                                                    case "Неактивен":
                                                        <label class="form-label-status label label-danger" style="width: 60%;">@templateDocument.StatusName</label>
                                                        break;
                                                }
                                            }

                                        }
                                    </div>
                                </Template>
                            </GridColumn>
                            </GridColumns>
                    </SfGrid>
                </div>
            </div>
        </div>
    </div>
</div>
<TemplateDocumentModal @ref="templateDocumentModal" CallbackAfterSave="UpdateAfterSave"></TemplateDocumentModal>

<ToastMsg @ref="toast"></ToastMsg>

@code {
    private bool IsVisibleAddModal { get; set; } = false;
    SfDialog sfFilter;
    ToastMsg toast;
    private string dialogClass = "";
    TemplateDocumentVM model = new TemplateDocumentVM();
    List<TemplateDocumentVM> selectedTemplatesList;
    TemplateDocumentModal templateDocumentModal = new TemplateDocumentModal();
    IEnumerable<TemplateDocumentVM> templateDocuments;
    SfGrid<TemplateDocumentVM> templateDocumentGrid = new SfGrid<TemplateDocumentVM>();
    private EditContext EC { get; set; }

    protected override async Task OnInitializedAsync()
    {
        this.sfFilter = new SfDialog();

        this.templateDocuments = (await this.TemplateDocumentService.GetAllTemplateDocumentsWithoutDeletedAsync(model)).ToList();

        EC = new EditContext(model);

        this.selectedTemplatesList = new List<TemplateDocumentVM>();
    }

    private async Task SelectedRow(TemplateDocumentVM model)
    {
        bool hasPermission = await CheckUserActionPermission("ViewTemplateDocumentData", false);
        if (!hasPermission) { return; }

        this.templateDocumentModal.OpenModal(model);
    }

    private async Task<Task> UpdateAfterSave(TemplateDocumentVM setting)
    {
        this.templateDocuments = (await this.TemplateDocumentService.GetAllTemplateDocumentsWithoutDeletedAsync(model)).ToList();

        return Task.CompletedTask;
    }

    private async Task Search()
    {
        this.IsVisibleAddModal = false;
        this.templateDocuments = (await this.TemplateDocumentService.GetAllTemplateDocumentsWithoutDeletedAsync(model)).ToList();
    }

    private async Task OpenAddNewModal()
    {
        bool hasPermission = await CheckUserActionPermission("ManageTemplateDocumentData", false);
        if (!hasPermission) { return; }

        this.templateDocumentModal.OpenModal(new TemplateDocumentVM());
    }

    private async void SaveModal()
    {
        model = await this.templateDocumentModal.SaveFromParent();
        EC = new EditContext(model);

        EC.Validate();
        int i = 0;
    }

    private async Task RowSelected(RowSelectEventArgs<TemplateDocumentVM> selectArgs)
    {
        this.selectedTemplatesList.Add(selectArgs.Data);
    }

    private async Task RowDeselected(RowDeselectEventArgs<TemplateDocumentVM> selectArgs)
    {
        TemplateDocumentVM template = selectArgs.Data;

        selectedTemplatesList.Remove(template);
    }

    private void ShowFilter()
    {
        this.IsVisibleAddModal = true;
    }
}
