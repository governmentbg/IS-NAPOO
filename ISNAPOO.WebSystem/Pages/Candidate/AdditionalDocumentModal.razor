@inherits BlazorBaseComponent

<SfDialog @bind-Visible="this.isVisible" Width="98%" EnableResize="true" AllowDragging="true" Height="98%" IsModal="true" ZIndex="2000" CloseOnEscape="false" ShowCloseIcon="true">
    <DialogAnimationSettings Effect="AnimationEffect" Duration="500" />
    <DialogEvents OnClose="OnXClickHandler" />
    <DialogTemplates>
        <Header>Допълнителни документи към заявление за лицензиране на @(this.isCPO ? this.candidateProviderVM.CPONameAndOwner : this.candidateProviderVM.CIPONameAndOwner)</Header>
        <Content>
            <div class="content-wrapper">
                <div class="card">
                    <div class="card-header">
                        <nav class="navbar navbar-expand">
                            <!-- Left navbar links -->
                            <ul class="navbar-nav float">
                                @if (!this.isUserExternalExpertOrExpertCommitteeOrNAPOO)
                                {
                                    <li class="nav-item d-none d-sm-inline-block float-none">
                                        <button type="button" class="btn btn-primary btn-outline-primary waves-effect md-trigger" @onclick="AddNewDocumentClickHandler">Нов</button>
                                    </li>
                                    <li class="nav-item d-none d-sm-inline-block">
                                        &nbsp;
                                    </li>
                                }
                            </ul>
                        </nav>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-sm-12">
                                <SfGrid DataSource="this.documentsSource" AllowSorting="true" AllowFiltering=true EnableAltRow="true" EnableHover="false"
                                        AllowTextWrap="true" @ref="this.documentsGrid" AllowSelection="false" Toolbar="@(new List<string>() { "ExcelExport", "PdfExport" })"
                                        AllowExcelExport="true" AllowPdfExport="true">
                                    <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
                                    <GridSortSettings>
                                        <GridSortColumns>
                                            <GridSortColumn Field="CreationDate" Direction="SortDirection.Descending" />
                                        </GridSortColumns>
                                    </GridSortSettings>
                                    <GridEvents OnToolbarClick="ToolbarClick" TValue="CandidateProviderDocumentsGridData"></GridEvents>
                                    <GridColumns>
                                        <GridColumn Width="5%" Visible="!this.isUserExternalExpertOrExpertCommitteeOrNAPOO">
                                            <Template>
                                                <SfTooltip Position="TooltipPosition.BottomCenter" Content="Изтриване" OpensOn="Hover">
                                                    <button type="button" class="btn-row" @onclick="(async () => await this.DeleteDocumentBtn(context as CandidateProviderDocumentsGridData))">
                                                        <i class="fa fa-trash-o"></i>
                                                    </button>
                                                </SfTooltip>
                                            </Template>
                                        </GridColumn>
                                        <GridColumn Field="DocumentTypeName" HeaderText="Вид на документа" TextAlign="TextAlign.Left" Width="30%"></GridColumn>
                                        <GridColumn Field="DocumentTitle" HeaderText="Описание на документа" TextAlign="TextAlign.Left" Width="30%"></GridColumn>
                                        <GridColumn Field="UploadedFileName" HeaderText="Прикачен файл" TextAlign="TextAlign.Left" Width="30%">
                                            <Template Context="docContext">
                                                @{
                                                    var entry = (docContext as CandidateProviderDocumentsGridData);

                                                    if (!string.IsNullOrEmpty(entry.UploadedFileName))
                                                    {
                                                        if (entry.FileName is not null)
                                                        {
                                                            var files = entry.FileName.Split(Environment.NewLine, StringSplitOptions.RemoveEmptyEntries).ToArray();
                                                            foreach (var item in files)
                                                            {
                                                                <a href="#" @onclick="(async () => await this.OnDownloadClickBtn(item, entry))">@item</a>
                                                                <br />
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        @entry.FileName
                                                    }
                                                }
                                            </Template>
                                        </GridColumn>
                                        <GridColumn Field="CreationDate" HeaderText="Дата на прикачване" TextAlign="TextAlign.Left" Width="15%" Format="dd.MM.yyyy">
                                            <Template>
                                                @{
                                                    var ctx = context as CandidateProviderDocumentsGridData;
                                                    var date = ctx.CreationDate != null ? $"{ctx.CreationDate} г." : string.Empty;
                                                    @date
                                                }
                                            </Template>
                                        </GridColumn>
                                        <GridColumn Field="UploadedByName" HeaderText="Прикачено от" TextAlign="TextAlign.Left" Width="20%"></GridColumn>
                                    </GridColumns>
                                </SfGrid>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </Content>
        <FooterTemplate>
            <div class="row">
                <div class="col-sm-8">
                </div>
                <div class="col-sm-4">
                    <div class="form-group">
                        <div class="text-right">
                            <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal" @onclick="CancelClickedHandler">Отказ</button>
                        </div>
                    </div>
                </div>
            </div>
        </FooterTemplate>
    </DialogTemplates>
</SfDialog>

<ConfirmDialog CallbackCancel="ConfirmDialogCallback" @ref="ConfirmDialog"></ConfirmDialog>
<CandidateProviderDocumentModal @ref="candidateProviderDocumentModal" CallbackAfterModalSubmit="OnDocumentModalSubmit" />
