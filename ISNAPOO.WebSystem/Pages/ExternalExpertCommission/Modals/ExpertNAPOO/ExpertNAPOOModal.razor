@using ISNAPOO.Core.Contracts.ExternalExpertCommission
@using ISNAPOO.Core.ViewModels.ExternalExpertCommission
@using ISNAPOO.Core.ViewModels.Common
@using System.IO

@inject Microsoft.JSInterop.IJSRuntime JsRuntime
@inject IDataSourceService DataSourceService
@inject IApplicationUserService ApplicationUserService
@inject IExpertService ExpertService
@inherits BlazorBaseComponent

<SfDialog Target="#target" Width="65%" Height="60%" EnableResize="true" AllowDragging="true" IsModal="true" ShowCloseIcon="true"
          CloseOnEscape="false" AllowPrerender="true" CssClass="@dialogClass" @bind-Visible="isVisible" ZIndex="3000">
    <DialogAnimationSettings Effect="@AnimationEffect" Duration="500" />
    <DialogEvents OnClose="OnXClickHandler"></DialogEvents>
    <DialogTemplates>
        <Header>
            Данни за служител на НАПОО за експерт <span style="font-size: 18px;color: white !important;">@expert.Person.FullName</span>
        </Header>
        <Content>
            <EditForm EditContext="editContext" OnSubmit="Save" id="submitFormExpertNAPOO">
                <ValidationSummary />
                <DataAnnotationsValidator />
                <div class="modal-body">
                    <div class="row">
                        <div class="col-sm-6">
                            <div class="form-group required">
                                <label class="control-label">
                                    Длъжност:
                                </label>
                                <InputText class="form-control" @bind-Value="model.Occupation" />
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-sm-3">
                            <div class="form-group required">
                                <label class="control-label">
                                    Дата на назначаване:
                                </label>
                                <div>
                                    <SfDatePicker CssClass="form-control customPad" TValue="DateTime?" @bind-Value="model.AppointmentDate" Format="@GlobalConstants.DATE_FORMAT" />
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-3">
                            <div class="form-group required">
                                <label class="control-label">
                                    Статус:
                                </label>
                                <SfComboBox TValue="int" TItem="KeyValueVM" AllowCustom="false" PopupHeight="100px" CssClass="form-control customPad"
                                            @bind-Value="model.IdStatus" DataSource="@kvStatusSource">
                                    <ComboBoxFieldSettings Text="Name" Value="IdKeyValue" />

                                </SfComboBox>
                            </div>
                        </div>

                    </div>
                    <div class="row">
                        <div class="col-sm-12">
                            <div class="form-group">
                                <label class="control-label">
                                    Коментар при промяна на статуса:
                                </label>
                                <div>
                                    <InputTextArea rows="3" class="form-control" @bind-Value="model.Comment" />
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </EditForm>
        </Content>
        <FooterTemplate>
            <div class="row">
                <div class="col-sm-8">
                    <div class="row">
                        <div class="col text-left"><i class="fa fa-newspaper-o" style="font-size: 18px;color: #01A9AC !important;"></i>&nbsp;&nbsp;&nbsp;&nbsp;Дата на създаване: @this.CreationDateStr</div>

                        <div class="col text-left"><i class="fa fa-save" style="font-size: 18px;color: #01A9AC !important;"></i>&nbsp;&nbsp;&nbsp;&nbsp;Дата на последна актуализация: @this.ModifyDateStr</div>
                    </div>
                    <div class="row">
                        <div class="col text-left"><i class="fa fa-user" style="font-size: 18px;color: #01A9AC !important;"></i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Създадено от: @model.CreatePersonName</div>

                        <div class="col text-left"><i class="fa fa-user-plus" style="font-size: 18px;color: #01A9AC !important;"></i>&nbsp;&nbsp;&nbsp;&nbsp;Актуализирано от: @model.ModifyPersonName</div>
                    </div>
                </div>
                <div class="col-sm-4">
                    <div class="form-group">
                        <div class="text-right">
                            <button type="submit" class="btn btn-info" form="submitFormExpertNAPOO">Запиши</button>
                            <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal" @onclick="@CancelClickedHandler">Отказ</button>
                        </div>
                    </div>
                </div>
            </div>
        </FooterTemplate>
    </DialogTemplates>
</SfDialog>

<ConfirmDialog CallbackCancel="ConfirmDialogCallback" @ref="ConfirmDialog"></ConfirmDialog>
<ToastMsg @ref="toast"></ToastMsg>

@code {
    [Parameter]
    public EventCallback<ExpertNapooVM> CallbackAfterSave { get; set; }

    private ToastMsg toast;
    private IEnumerable<KeyValueVM> kvStatusSource;
    private ExpertNapooVM model = new ExpertNapooVM();
    private ExpertVM expert = new ExpertVM();
    private string CreationDateStr = string.Empty;
    private string ModifyDateStr = string.Empty;

    public override bool IsContextModified => this.editContext.IsModified();


    protected override async void OnInitialized()
    {
        this.kvStatusSource = await this.DataSourceService.GetKeyValuesByKeyTypeIntCodeAsync("ExpertStatus");
        this.editContext = new EditContext(this.model);
    }


    public async Task OpenModal(ExpertNapooVM _model, ExpertVM _expert)
    {
        this.expert = _expert;
        _model.IdExpert = this.expert.IdExpert;
        if (_model.IdExpertNapoo != 0)
        {
            this.model = _model;
            this.CreationDateStr = model.CreationDate.ToString("dd.MM.yyyy");
            this.ModifyDateStr = model.ModifyDate.ToString("dd.MM.yyyy");
            this.model.CreatePersonName = await this.ApplicationUserService.GetApplicationUsersPersonNameAsync(this.model.IdCreateUser);
            this.model.ModifyPersonName = await this.ApplicationUserService.GetApplicationUsersPersonNameAsync(this.model.IdModifyUser);
        }
        else
        {
            this.model = _model;
            this.CreationDateStr = "";
            this.ModifyDateStr = "";
            this.model.CreatePersonName = "";
            this.model.ModifyPersonName = "";
        }
        if (this.model.IdStatus == null || this.model.IdStatus == 0)
        {
            this.model.IdStatus = this.kvStatusSource.FirstOrDefault(s => s.KeyValueIntCode == "ActiveExpert").IdKeyValue;
        }
        this.editContext = new EditContext(this.model);
        this.isVisible = true;
        this.StateHasChanged();
    }

    public async Task Save()
    {
        if (this.loading)
        {
            return;
        }

        try
        {
            this.loading = true;

            bool hasPermission = await CheckUserActionPermission("ManageExpertsData", false);
            if (!hasPermission) { return; }

            this.SpinnerShow();

            this.editContext = new EditContext(this.model);
            this.editContext.EnableDataAnnotationsValidation();
            bool isValid = editContext.Validate();


            if (isValid)
            {
                var result = await this.ExpertService.UpdateExpertNAPOOAsync(this.model);
                if (result.HasMessages)
                {
                    toast.sfSuccessToast.Content = string.Join(Environment.NewLine, result.ListMessages);
                    await toast.sfSuccessToast.ShowAsync();
                    result.ListMessages.Clear();

                    this.model = await ExpertService.GetExpertNAPOOByIdAsync(result.ResultContextObject.IdExpertNapoo);
                    this.CreationDateStr = this.model.CreationDate.ToString(GlobalConstants.DATE_FORMAT);
                    this.ModifyDateStr = this.model.ModifyDate.ToString(GlobalConstants.DATE_FORMAT);
                    this.model.CreatePersonName = await this.ApplicationUserService.GetApplicationUsersPersonNameAsync(this.model.IdCreateUser);
                    this.model.ModifyPersonName = await this.ApplicationUserService.GetApplicationUsersPersonNameAsync(this.model.IdModifyUser);
                }
                else
                {
                    toast.sfErrorToast.Content = string.Join(Environment.NewLine, result.ListErrorMessages);
                    await toast.sfErrorToast.ShowAsync();
                    result.ListErrorMessages.Clear();
                }

            }
            this.StateHasChanged();
            await CallbackAfterSave.InvokeAsync(this.model);

        }
        finally
        {
            this.SpinnerHide();
            this.loading = false;
        }

    }
}
