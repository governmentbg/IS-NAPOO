// <auto-generated />
using System;
using Data.Models.DB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data.Models.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230413125511_AlterTableTemplateDocument_add_DateFrom_DateTo")]
    partial class AlterTableTemplateDocument_add_DateFrom_DateTo
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Data.Models.Data.Archive.AnnualInfo", b =>
                {
                    b.Property<int>("IdAnnualInfo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdAnnualInfo"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("E-mail");

                    b.Property<int>("IdCandidateProvider")
                        .HasColumnType("int")
                        .HasComment("Връзка с CPO,CIPO - Обучаваща институция");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int>("IdStatus")
                        .HasColumnType("int")
                        .HasComment("Статус на отчета за годишна информация");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Име на лица подало годишната информация");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Телефон");

                    b.Property<string>("Title")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Длъжност");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("IdAnnualInfo");

                    b.HasIndex("IdCandidateProvider");

                    b.ToTable("Arch_AnnualInfo");
                });

            modelBuilder.Entity("Data.Models.Data.Archive.AnnualInfoStatus", b =>
                {
                    b.Property<int>("IdAnnualInfoStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdAnnualInfoStatus"), 1L, 1);

                    b.Property<string>("Comment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Коментар при операция с отчета за годишна информация");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdAnnualInfo")
                        .HasColumnType("int")
                        .HasComment("Връзка с отчета за годишна информация");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int>("IdStatus")
                        .HasColumnType("int")
                        .HasComment("Статус на отчета за годишна информация");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.HasKey("IdAnnualInfoStatus");

                    b.HasIndex("IdAnnualInfo");

                    b.ToTable("Arch_AnnualInfoStatus");
                });

            modelBuilder.Entity("Data.Models.Data.Archive.AnnualReportNSI", b =>
                {
                    b.Property<int>("IdAnnualReportNSI")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdAnnualReportNSI"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int>("IdStatus")
                        .HasColumnType("int")
                        .HasComment("Статус");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Име на служител подал годишната информация");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("datetime2")
                        .HasComment("Дата на подаване");

                    b.Property<int>("Year")
                        .HasColumnType("int")
                        .HasComment("Година");

                    b.HasKey("IdAnnualReportNSI");

                    b.ToTable("Arch_AnnualReportNSI");
                });

            modelBuilder.Entity("Data.Models.Data.Archive.ArchCandidateCurriculum", b =>
                {
                    b.Property<int>("IdArchCandidateCurriculum")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdArchCandidateCurriculum"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdArchCandidateProviderSpeciality")
                        .HasColumnType("int");

                    b.Property<int>("IdCandidateCurriculum")
                        .HasColumnType("int");

                    b.Property<int?>("IdCandidateCurriculumModification")
                        .HasColumnType("int");

                    b.Property<int>("IdCandidateProviderSpeciality")
                        .HasColumnType("int");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int>("IdProfessionalTraining")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("Practice")
                        .HasColumnType("float");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double?>("Theory")
                        .HasColumnType("float");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.HasKey("IdArchCandidateCurriculum");

                    b.HasIndex("IdArchCandidateProviderSpeciality");

                    b.HasIndex("IdCandidateCurriculumModification");

                    b.HasIndex("IdCandidateProviderSpeciality");

                    b.ToTable("Arch_Candidate_Curriculum");
                });

            modelBuilder.Entity("Data.Models.Data.Archive.ArchCandidateProvider", b =>
                {
                    b.Property<int>("IdArchCandidateProvider")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdArchCandidateProvider"), 1L, 1);

                    b.Property<bool>("AccessibilityInfo")
                        .HasColumnType("bit");

                    b.Property<string>("AdditionalInfo")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<DateTime?>("ApplicationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ApplicationNumber")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("AttorneyName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateConfirmEMail")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateConfirmRequestNAPOO")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateRequest")
                        .HasColumnType("datetime2");

                    b.Property<string>("DirectorFamilyName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Фамилия директор на ЦПО,ЦИПО");

                    b.Property<string>("DirectorFirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Име на директор на ЦПО,ЦИПО");

                    b.Property<string>("DirectorSecondName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Презиме на директор на ЦПО,ЦИПО");

                    b.Property<DateTime?>("DueDateRequest")
                        .HasColumnType("datetime2");

                    b.Property<string>("ESignApplicationFileName")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasComment("Път до електронно подписанато заявление");

                    b.Property<int?>("IdApplicationFiling")
                        .HasColumnType("int")
                        .HasComment("Начин на подаване на заявление и документ за платена държавна такса");

                    b.Property<int?>("IdApplicationStatus")
                        .HasColumnType("int")
                        .HasComment("Статус на  заявлението");

                    b.Property<int?>("IdCandidateProviderActive")
                        .HasColumnType("int")
                        .HasComment("Връзка с активния канидат провайдър");

                    b.Property<int>("IdCandidate_Provider")
                        .HasColumnType("int");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int?>("IdLicenceStatus")
                        .HasColumnType("int")
                        .HasComment("Статус на  лицензията");

                    b.Property<int?>("IdLocation")
                        .HasColumnType("int");

                    b.Property<int?>("IdLocationCorrespondence")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int>("IdProviderOwnership")
                        .HasColumnType("int");

                    b.Property<int>("IdProviderRegistration")
                        .HasColumnType("int");

                    b.Property<int>("IdProviderStatus")
                        .HasColumnType("int");

                    b.Property<int?>("IdReceiveLicense")
                        .HasColumnType("int")
                        .HasComment("Начин на получаване на административен акт и лицензия");

                    b.Property<int?>("IdRegionAdmin")
                        .HasColumnType("int");

                    b.Property<int?>("IdRegionCorrespondence")
                        .HasColumnType("int");

                    b.Property<int?>("IdRegistrationApplicationStatus")
                        .HasColumnType("int")
                        .HasComment("Статус на регистрация на заявлението");

                    b.Property<int?>("IdStartedProcedure")
                        .HasColumnType("int");

                    b.Property<int?>("IdTypeApplication")
                        .HasColumnType("int");

                    b.Property<int>("IdTypeLicense")
                        .HasColumnType("int");

                    b.Property<string>("Indent")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("Определя активния запис за CandidateProvider");

                    b.Property<DateTime?>("LicenceDate")
                        .HasColumnType("datetime2")
                        .HasComment("Дата на получаване на лицензия");

                    b.Property<string>("LicenceNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Номер на лиценза");

                    b.Property<string>("ManagerName")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("MigrationNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OldId")
                        .HasColumnType("int");

                    b.Property<bool>("OnlineTrainingInfo")
                        .HasColumnType("bit");

                    b.Property<string>("PersonNameCorrespondence")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PersonNameCorrespondenceEN")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Лице за контакт/кореспондениця на латиница");

                    b.Property<string>("PoviderBulstat")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ProviderAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ProviderAddressCorrespondence")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ProviderAddressCorrespondenceEN")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Адрес за кореспонденция   на ЦПО,ЦИПО на латиница");

                    b.Property<string>("ProviderEmail")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ProviderEmailCorrespondence")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ProviderFax")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ProviderFaxCorrespondence")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ProviderName")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("ProviderNameEN")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasComment("Име на ЦПО,ЦИПО на Латиница");

                    b.Property<string>("ProviderOwner")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ProviderOwnerEN")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Наименование на юридическото лице на латиница");

                    b.Property<string>("ProviderPhone")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ProviderPhoneCorrespondence")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ProviderWeb")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("RejectionReason")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasComment("Причина за отказ");

                    b.Property<string>("Title")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Token")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<long?>("UIN")
                        .HasColumnType("bigint")
                        .HasComment("Уникален идентификатор за връзка с деловодната система на НАПОО");

                    b.Property<string>("UploadedFileName")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<int>("Year")
                        .HasColumnType("int")
                        .HasComment("Година");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("ZipCodeCorrespondence")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.HasKey("IdArchCandidateProvider");

                    b.HasIndex("IdCandidateProviderActive");

                    b.HasIndex("IdLocation");

                    b.HasIndex("IdLocationCorrespondence");

                    b.HasIndex("IdRegionCorrespondence");

                    b.HasIndex("IdStartedProcedure");

                    b.ToTable("Arch_Candidate_Provider");
                });

            modelBuilder.Entity("Data.Models.Data.Archive.ArchCandidateProviderPremises", b =>
                {
                    b.Property<int>("IdArchCandidateProviderPremises")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdArchCandidateProviderPremises"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdArchCandidateProvider")
                        .HasColumnType("int");

                    b.Property<int>("IdCandidateProviderPremises")
                        .HasColumnType("int");

                    b.Property<int>("IdCandidate_Provider")
                        .HasColumnType("int")
                        .HasComment("CPO,CIPO - Кандидат Обучаваща институция");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int?>("IdLocation")
                        .HasColumnType("int")
                        .HasComment("Населено място");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int>("IdOwnership")
                        .HasColumnType("int")
                        .HasComment("Форма на собственост");

                    b.Property<int>("IdStatus")
                        .HasColumnType("int")
                        .HasComment("Статус");

                    b.Property<DateTime?>("InactiveDate")
                        .HasColumnType("datetime2")
                        .HasComment("Дата на деактивиране на базата");

                    b.Property<string>("MigrationNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OldId")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Телефон");

                    b.Property<string>("PremisesName")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasComment("Наименование на материално-техническата база");

                    b.Property<string>("PremisesNote")
                        .HasColumnType("ntext")
                        .HasComment("Кратко описание");

                    b.Property<string>("ProviderAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Адрес");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)")
                        .HasComment("Пощенски код");

                    b.HasKey("IdArchCandidateProviderPremises");

                    b.HasIndex("IdArchCandidateProvider");

                    b.HasIndex("IdCandidate_Provider");

                    b.HasIndex("IdLocation");

                    b.ToTable("Arch_Candidate_ProviderPremises");
                });

            modelBuilder.Entity("Data.Models.Data.Archive.ArchCandidateProviderPremisesSpeciality", b =>
                {
                    b.Property<int>("IdArchCandidateProviderPremisesSpeciality")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdArchCandidateProviderPremisesSpeciality"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdArchCandidateProviderPremises")
                        .HasColumnType("int")
                        .HasComment("АРХИВ - Метериална техническа база");

                    b.Property<int>("IdCandidateProviderPremises")
                        .HasColumnType("int")
                        .HasComment("Метериална техническа база");

                    b.Property<int>("IdCandidateProviderPremisesSpeciality")
                        .HasColumnType("int");

                    b.Property<int>("IdComplianceDOC")
                        .HasColumnType("int")
                        .HasComment("Съответствие с ДОС");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int>("IdSpeciality")
                        .HasColumnType("int")
                        .HasComment("Връзка с  Специалност");

                    b.Property<int>("IdUsage")
                        .HasColumnType("int")
                        .HasComment("Вид на провежданото обучение");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.HasKey("IdArchCandidateProviderPremisesSpeciality");

                    b.HasIndex("IdArchCandidateProviderPremises");

                    b.HasIndex("IdCandidateProviderPremises");

                    b.HasIndex("IdSpeciality");

                    b.ToTable("Arch_Candidate_ProviderPremisesSpeciality");
                });

            modelBuilder.Entity("Data.Models.Data.Archive.ArchCandidateProviderSpeciality", b =>
                {
                    b.Property<int>("IdArchCandidateProviderSpeciality")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdArchCandidateProviderSpeciality"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdArchCandidateProvider")
                        .HasColumnType("int");

                    b.Property<int>("IdCandidateProviderSpeciality")
                        .HasColumnType("int");

                    b.Property<int>("IdCandidate_Provider")
                        .HasColumnType("int");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int?>("IdFormEducation")
                        .HasColumnType("int")
                        .HasComment("Форма на обучение");

                    b.Property<int?>("IdFrameworkProgram")
                        .HasColumnType("int")
                        .HasComment("Рамкова програма");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int>("IdSpeciality")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LicenceData")
                        .HasColumnType("datetime2")
                        .HasComment("Дата на получаване на лицензия за специалността");

                    b.Property<string>("LicenceProtNo")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Номер на протокол/заповед за лицензиране на специалността");

                    b.Property<string>("MigrationNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OldId")
                        .HasColumnType("int");

                    b.HasKey("IdArchCandidateProviderSpeciality");

                    b.HasIndex("IdArchCandidateProvider");

                    b.HasIndex("IdCandidate_Provider");

                    b.HasIndex("IdFrameworkProgram");

                    b.HasIndex("IdSpeciality");

                    b.ToTable("Arch_Candidate_ProviderSpeciality");
                });

            modelBuilder.Entity("Data.Models.Data.Archive.ArchCandidateProviderTrainer", b =>
                {
                    b.Property<int>("IdArchCandidateProviderTrainer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdArchCandidateProviderTrainer"), 1L, 1);

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ContractDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DiplomaNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Номер на диплома");

                    b.Property<string>("EducationAcademicNotes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("EducationCertificateNotes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("EducationSpecialityNotes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FamilyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("IdArchCandidateProvider")
                        .HasColumnType("int");

                    b.Property<int>("IdCandidateProviderTrainer")
                        .HasColumnType("int");

                    b.Property<int>("IdCandidate_Provider")
                        .HasColumnType("int");

                    b.Property<int?>("IdContractType")
                        .HasColumnType("int");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdEducation")
                        .HasColumnType("int");

                    b.Property<int?>("IdIndentType")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int?>("IdNationality")
                        .HasColumnType("int");

                    b.Property<int?>("IdSex")
                        .HasColumnType("int");

                    b.Property<int?>("IdStatus")
                        .HasColumnType("int");

                    b.Property<DateTime?>("InactiveDate")
                        .HasColumnType("datetime2")
                        .HasComment("Дата на деактивиране на преподавателя/консултанта");

                    b.Property<string>("Indent")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("IsAndragog")
                        .HasColumnType("bit");

                    b.Property<string>("MigrationNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OldId")
                        .HasColumnType("int");

                    b.Property<string>("ProfessionalQualificationCertificate")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SecondName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IdArchCandidateProviderTrainer");

                    b.HasIndex("IdArchCandidateProvider");

                    b.HasIndex("IdCandidate_Provider");

                    b.ToTable("Arch_Candidate_ProviderTrainer");
                });

            modelBuilder.Entity("Data.Models.Data.Archive.ArchCandidateProviderTrainerQualification", b =>
                {
                    b.Property<int>("IdArchCandidateProviderTrainerQualification")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdArchCandidateProviderTrainerQualification"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdArchCandidateProviderTrainer")
                        .HasColumnType("int")
                        .HasComment("АРХИВ Връзка с Преподавател");

                    b.Property<int>("IdCandidateProviderTrainer")
                        .HasColumnType("int");

                    b.Property<int>("IdCandidateProviderTrainerQualification")
                        .HasColumnType("int");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int?>("IdProfession")
                        .HasColumnType("int");

                    b.Property<int>("IdQualificationType")
                        .HasColumnType("int");

                    b.Property<int>("IdTrainingQualificationType")
                        .HasColumnType("int");

                    b.Property<string>("MigrationNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OldId")
                        .HasColumnType("int");

                    b.Property<int?>("QualificationDuration")
                        .HasColumnType("int");

                    b.Property<string>("QualificationName")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<DateTime?>("TrainingFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("TrainingTo")
                        .HasColumnType("datetime2");

                    b.HasKey("IdArchCandidateProviderTrainerQualification");

                    b.HasIndex("IdArchCandidateProviderTrainer");

                    b.HasIndex("IdCandidateProviderTrainer");

                    b.HasIndex("IdProfession");

                    b.ToTable("Arch_Candidate_ProviderTrainerQualification");
                });

            modelBuilder.Entity("Data.Models.Data.Archive.RegiXLogRequest", b =>
                {
                    b.Property<int>("IdRegiXLogRequest")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdRegiXLogRequest"), 1L, 1);

                    b.Property<string>("AdministrationName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Наименование на администрацията, ползваща системата");

                    b.Property<string>("AdministrationOId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Идентификационен код на администрация (oID от eAuth)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmployeeIdentifier")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Идентификатор на служител на администрацията");

                    b.Property<string>("EmployeeNames")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Имена на служител на администрацията, иментата на служителя");

                    b.Property<string>("EmployeePosition")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Длъжност или позиция на служителя в администрацията");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<string>("LawReason")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Контекст на правното основание");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Remark")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Допълнително поле в свободен текст");

                    b.Property<string>("ResponsiblePersonIdentifier")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Опционален идентификатор на човека отговорен за справката.");

                    b.Property<string>("ServiceResultStatus")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Статус на заявката към RegiX");

                    b.Property<string>("ServiceType")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Вид на услугата, във връзка с която се извиква операцията");

                    b.Property<string>("ServiceURI")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Идентификатор на инстанцията на административната услуга или процедура в администрацията (например: номер на преписка)");

                    b.HasKey("IdRegiXLogRequest");

                    b.ToTable("Arch_RegiXLogRequest");
                });

            modelBuilder.Entity("Data.Models.Data.Archive.SelfAssessmentReport", b =>
                {
                    b.Property<int>("IdSelfAssessmentReport")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdSelfAssessmentReport"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FilingDate")
                        .HasColumnType("datetime2")
                        .HasComment("Дата на подавате на доклада за самооценка");

                    b.Property<int>("IdCandidateProvider")
                        .HasColumnType("int")
                        .HasComment("Връзка с CPO,CIPO - Обучаваща институция");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int?>("IdSurveyResult")
                        .HasColumnType("int")
                        .HasComment("Връзка с анкета");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Year")
                        .HasColumnType("int")
                        .HasComment("Година на доклада за самооценка");

                    b.HasKey("IdSelfAssessmentReport");

                    b.HasIndex("IdCandidateProvider");

                    b.HasIndex("IdSurveyResult");

                    b.ToTable("Arch_SelfAssessmentReport");
                });

            modelBuilder.Entity("Data.Models.Data.Archive.SelfAssessmentReportStatus", b =>
                {
                    b.Property<int>("IdSelfAssessmentReportStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdSelfAssessmentReportStatus"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int>("IdSelfAssessmentReport")
                        .HasColumnType("int")
                        .HasComment("Връзка с доклад за самооценка");

                    b.Property<int>("IdStatus")
                        .HasColumnType("int")
                        .HasComment("Статус на доклад за самооценка");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.HasKey("IdSelfAssessmentReportStatus");

                    b.HasIndex("IdSelfAssessmentReport");

                    b.ToTable("Arch_SelfAssessmentReportStatus");
                });

            modelBuilder.Entity("Data.Models.Data.Assessment.Answer", b =>
                {
                    b.Property<int>("IdAnswer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdAnswer"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int>("IdQuestion")
                        .HasColumnType("int")
                        .HasComment("Връзка с въпрос");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Points")
                        .HasColumnType("decimal(5,2)")
                        .HasComment("Точки");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Отговор");

                    b.HasKey("IdAnswer");

                    b.HasIndex("IdQuestion");

                    b.ToTable("Assess_Answer");

                    b.HasComment("Възможен отговор към върпос");
                });

            modelBuilder.Entity("Data.Models.Data.Assessment.Question", b =>
                {
                    b.Property<int>("IdQuestion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdQuestion"), 1L, 1);

                    b.Property<int>("AnswersCount")
                        .HasColumnType("int")
                        .HasComment("Брой отговори към въпрос");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasComment("Описание към въпроса");

                    b.Property<int?>("IdAreaSelfAssessment")
                        .HasColumnType("int")
                        .HasComment("Област на самооценяване");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int?>("IdNext")
                        .HasColumnType("int")
                        .HasComment("Следващ въпрос");

                    b.Property<int?>("IdPrev")
                        .HasColumnType("int")
                        .HasComment("Предишен въпрос");

                    b.Property<int?>("IdQuestType")
                        .HasColumnType("int")
                        .HasComment("Тип въпрос");

                    b.Property<int?>("IdRatingIndicatorType")
                        .HasColumnType("int")
                        .HasComment("Вид на индикатор");

                    b.Property<int>("IdSurvey")
                        .HasColumnType("int")
                        .HasComment("Връзка с анкета");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit")
                        .HasComment("Задължителен въпрос");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Order")
                        .HasColumnType("int")
                        .HasComment("Поредност");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Върпос");

                    b.HasKey("IdQuestion");

                    b.HasIndex("IdSurvey");

                    b.ToTable("Assess_Question");

                    b.HasComment("Въпрос към анкета");
                });

            modelBuilder.Entity("Data.Models.Data.Assessment.Survey", b =>
                {
                    b.Property<int>("IdSurvey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdSurvey"), 1L, 1);

                    b.Property<string>("AdditionalText")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasComment("Допълнителен текст");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2")
                        .HasComment("Дата на активност до");

                    b.Property<int?>("Excellent")
                        .HasColumnType("int")
                        .HasComment("Отлично");

                    b.Property<int?>("Good")
                        .HasColumnType("int")
                        .HasComment("Добро");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int>("IdSurveyStatus")
                        .HasColumnType("int")
                        .HasComment("Статус на анкетата");

                    b.Property<int?>("IdSurveyTarget")
                        .HasColumnType("int")
                        .HasComment("Тип анкета");

                    b.Property<int?>("IdSurveyТype")
                        .HasColumnType("int")
                        .HasComment("Вид анкета");

                    b.Property<int?>("IdTrainingCourseType")
                        .HasColumnType("int")
                        .HasComment("Вид на курса за обучение");

                    b.Property<string>("InternalCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Вътрешен код на анкетата");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Име на анкета");

                    b.Property<int?>("Satisfactory")
                        .HasColumnType("int")
                        .HasComment("Задоволително");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2")
                        .HasComment("Дата на активност от");

                    b.Property<DateTime?>("TrainingPeriodFrom")
                        .HasColumnType("datetime2")
                        .HasComment("Период на обучение от");

                    b.Property<DateTime?>("TrainingPeriodTo")
                        .HasColumnType("datetime2")
                        .HasComment("Период на обучение до");

                    b.Property<int?>("Year")
                        .HasColumnType("int")
                        .HasComment("Година");

                    b.HasKey("IdSurvey");

                    b.ToTable("Assess_Survey");
                });

            modelBuilder.Entity("Data.Models.Data.Assessment.SurveyResult", b =>
                {
                    b.Property<int>("IdSurveyResult")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdSurveyResult"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2")
                        .HasComment("Дата на приключване");

                    b.Property<string>("FeedBack")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Коментарт към анкетата");

                    b.Property<int>("IdCandidate_Provider")
                        .HasColumnType("int")
                        .HasComment("Връзка с  CPO,CIPO - Кандидат Обучаваща институция");

                    b.Property<int?>("IdClientCourse")
                        .HasColumnType("int")
                        .HasComment("Връзка с обучаем от курс за обучение");

                    b.Property<int?>("IdConsultingClient")
                        .HasColumnType("int")
                        .HasComment("Връзка с консултирано лице");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int?>("IdStatus")
                        .HasColumnType("int")
                        .HasComment("Статус");

                    b.Property<int>("IdSurvey")
                        .HasColumnType("int")
                        .HasComment("Връзка с анкета");

                    b.Property<int?>("IdValidationClient")
                        .HasColumnType("int")
                        .HasComment("Връзка с обучаем от курс за валидиране");

                    b.Property<bool>("IsReviewed")
                        .HasColumnType("bit")
                        .HasComment("Резултатите са прегледани");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2")
                        .HasComment("Дата на започване");

                    b.Property<string>("Token")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Токен за валидация ");

                    b.Property<int>("TotalPointsReceived")
                        .HasColumnType("int")
                        .HasComment("Брой точки");

                    b.HasKey("IdSurveyResult");

                    b.HasIndex("IdCandidate_Provider");

                    b.HasIndex("IdClientCourse");

                    b.HasIndex("IdConsultingClient");

                    b.HasIndex("IdSurvey");

                    b.HasIndex("IdValidationClient");

                    b.ToTable("Assess_SurveyResult");
                });

            modelBuilder.Entity("Data.Models.Data.Assessment.UserAnswer", b =>
                {
                    b.Property<int>("IdUserAnswer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdUserAnswer"), 1L, 1);

                    b.Property<int?>("IdAnswer")
                        .HasColumnType("int")
                        .HasComment("Връзка с  отговор");

                    b.Property<int>("IdQuestion")
                        .HasColumnType("int")
                        .HasComment("Връзка с въпрос");

                    b.Property<int>("IdUserAnswerOpen")
                        .HasColumnType("int")
                        .HasComment("Връзка с отворен отговор");

                    b.Property<decimal?>("Points")
                        .HasColumnType("decimal(5,2)")
                        .HasComment("Точки");

                    b.HasKey("IdUserAnswer");

                    b.HasIndex("IdAnswer");

                    b.HasIndex("IdQuestion");

                    b.HasIndex("IdUserAnswerOpen");

                    b.ToTable("Assess_UserAnswer");

                    b.HasComment("Отговор на въпрос");
                });

            modelBuilder.Entity("Data.Models.Data.Assessment.UserAnswerOpen", b =>
                {
                    b.Property<int>("IdUserAnswerOpen")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdUserAnswerOpen"), 1L, 1);

                    b.Property<int>("IdQuestion")
                        .HasColumnType("int")
                        .HasComment("Връзка с въпрос");

                    b.Property<int>("IdSurveyResult")
                        .HasColumnType("int")
                        .HasComment("Връзка с резултати анкета");

                    b.Property<decimal?>("Points")
                        .HasColumnType("decimal(5,2)")
                        .HasComment("Точки");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Отговор на потребител");

                    b.HasKey("IdUserAnswerOpen");

                    b.HasIndex("IdQuestion");

                    b.HasIndex("IdSurveyResult");

                    b.ToTable("Assess_UserAnswerOpen");

                    b.HasComment("Отговор на въпрос");
                });

            modelBuilder.Entity("Data.Models.Data.Candidate.CandidateCurriculum", b =>
                {
                    b.Property<int>("IdCandidateCurriculum")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCandidateCurriculum"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IdCandidateCurriculumModification")
                        .HasColumnType("int");

                    b.Property<int>("IdCandidateProviderSpeciality")
                        .HasColumnType("int");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int>("IdProfessionalTraining")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("Practice")
                        .HasColumnType("float");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<double?>("Theory")
                        .HasColumnType("float");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.HasKey("IdCandidateCurriculum");

                    b.HasIndex("IdCandidateCurriculumModification");

                    b.HasIndex("IdCandidateProviderSpeciality");

                    b.ToTable("Candidate_Curriculum");
                });

            modelBuilder.Entity("Data.Models.Data.Candidate.CandidateCurriculumERU", b =>
                {
                    b.Property<int>("IdCandidateCurriculumERU")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCandidateCurriculumERU"), 1L, 1);

                    b.Property<int>("IdCandidateCurriculum")
                        .HasColumnType("int");

                    b.Property<int>("IdERU")
                        .HasColumnType("int");

                    b.HasKey("IdCandidateCurriculumERU");

                    b.HasIndex("IdCandidateCurriculum");

                    b.HasIndex("IdERU");

                    b.ToTable("Candidate_CurriculumERU");
                });

            modelBuilder.Entity("Data.Models.Data.Candidate.CandidateCurriculumModification", b =>
                {
                    b.Property<int>("IdCandidateCurriculumModification")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCandidateCurriculumModification"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCandidateProviderSpeciality")
                        .HasColumnType("int")
                        .HasComment("Връзка с лицензирана специалност");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdModificationReason")
                        .HasColumnType("int")
                        .HasComment("Вид на причина за промяна на учебната програма");

                    b.Property<int>("IdModificationStatus")
                        .HasColumnType("int")
                        .HasComment("Статус на промяната на учебната програма");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UploadedFileName")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasComment("Прикачен файл с учебната програма");

                    b.Property<DateTime?>("ValidFromDate")
                        .HasColumnType("datetime2")
                        .HasComment("Дата на влизане в сила на промяната на учебната програма");

                    b.HasKey("IdCandidateCurriculumModification");

                    b.HasIndex("IdCandidateProviderSpeciality");

                    b.ToTable("Candidate_CurriculumModification");
                });

            modelBuilder.Entity("Data.Models.Data.Candidate.CandidateProvider", b =>
                {
                    b.Property<int>("IdCandidate_Provider")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCandidate_Provider"), 1L, 1);

                    b.Property<bool>("AccessibilityInfo")
                        .HasColumnType("bit");

                    b.Property<string>("AdditionalInfo")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<DateTime?>("ApplicationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ApplicationNumber")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Archive")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasComment("Информация къде се съхранява архивът на ЦПО/ЦИПО при отнемане на лицензия");

                    b.Property<string>("AttorneyName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateConfirmEMail")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateConfirmRequestNAPOO")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateRequest")
                        .HasColumnType("datetime2");

                    b.Property<string>("DirectorFamilyName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Фамилия директор на ЦПО,ЦИПО");

                    b.Property<string>("DirectorFirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Име на директор на ЦПО,ЦИПО");

                    b.Property<string>("DirectorSecondName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Презиме на директор на ЦПО,ЦИПО");

                    b.Property<DateTime?>("DueDateRequest")
                        .HasColumnType("datetime2");

                    b.Property<string>("ESignApplicationFileName")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasComment("Път до електронно подписанато заявление");

                    b.Property<int?>("IdApplicationFiling")
                        .HasColumnType("int")
                        .HasComment("Начин на подаване на заявление и документ за платена държавна такса");

                    b.Property<int?>("IdApplicationStatus")
                        .HasColumnType("int")
                        .HasComment("Статус на  заявлението");

                    b.Property<int?>("IdCandidateProviderActive")
                        .HasColumnType("int")
                        .HasComment("Връзка с активния канидат провайдър");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int?>("IdLicenceStatus")
                        .HasColumnType("int")
                        .HasComment("Статус на  лицензията");

                    b.Property<int?>("IdLocation")
                        .HasColumnType("int");

                    b.Property<int?>("IdLocationCorrespondence")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int>("IdProviderOwnership")
                        .HasColumnType("int");

                    b.Property<int>("IdProviderRegistration")
                        .HasColumnType("int");

                    b.Property<int>("IdProviderStatus")
                        .HasColumnType("int");

                    b.Property<int?>("IdReceiveLicense")
                        .HasColumnType("int")
                        .HasComment("Начин на получаване на административен акт и лицензия");

                    b.Property<int?>("IdRegionAdmin")
                        .HasColumnType("int");

                    b.Property<int?>("IdRegionCorrespondence")
                        .HasColumnType("int");

                    b.Property<int?>("IdRegistrationApplicationStatus")
                        .HasColumnType("int")
                        .HasComment("Статус на регистрация на заявлението");

                    b.Property<int?>("IdStartedProcedure")
                        .HasColumnType("int");

                    b.Property<int?>("IdTypeApplication")
                        .HasColumnType("int");

                    b.Property<int>("IdTypeLicense")
                        .HasColumnType("int");

                    b.Property<string>("Indent")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("Определя активния запис за CandidateProvider");

                    b.Property<DateTime?>("LicenceDate")
                        .HasColumnType("datetime2")
                        .HasComment("Дата на получаване на лицензия");

                    b.Property<string>("LicenceNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Номер на лиценза");

                    b.Property<string>("ManagerName")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("MigrationNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OldId")
                        .HasColumnType("int");

                    b.Property<bool>("OnlineTrainingInfo")
                        .HasColumnType("bit");

                    b.Property<string>("PersonNameCorrespondence")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PersonNameCorrespondenceEN")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Лице за контакт/кореспондениця на латиница");

                    b.Property<string>("PoviderBulstat")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ProviderAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ProviderAddressCorrespondence")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ProviderAddressCorrespondenceEN")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Адрес за кореспонденция   на ЦПО,ЦИПО на латиница");

                    b.Property<string>("ProviderEmail")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ProviderEmailCorrespondence")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ProviderFax")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ProviderFaxCorrespondence")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ProviderName")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("ProviderNameEN")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasComment("Име на ЦПО,ЦИПО на Латиница");

                    b.Property<string>("ProviderOwner")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ProviderOwnerEN")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Наименование на юридическото лице на латиница");

                    b.Property<string>("ProviderPhone")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ProviderPhoneCorrespondence")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ProviderWeb")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("RejectionReason")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasComment("Причина за отказ");

                    b.Property<string>("Title")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Token")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<long?>("UIN")
                        .HasColumnType("bigint")
                        .HasComment("Уникален идентификатор за връзка с деловодната система на НАПОО");

                    b.Property<string>("UploadedFileName")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("ZipCodeCorrespondence")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.HasKey("IdCandidate_Provider");

                    b.HasIndex("IdCandidateProviderActive");

                    b.HasIndex("IdLocation");

                    b.HasIndex("IdLocationCorrespondence");

                    b.HasIndex("IdRegionAdmin");

                    b.HasIndex("IdRegionCorrespondence");

                    b.HasIndex("IdStartedProcedure");

                    b.ToTable("Candidate_Provider");
                });

            modelBuilder.Entity("Data.Models.Data.Candidate.CandidateProviderCIPOStructureActivity", b =>
                {
                    b.Property<int>("IdCandidateProviderCIPOStructureActivity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCandidateProviderCIPOStructureActivity"), 1L, 1);

                    b.Property<string>("ConsultantsSelection")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DataMaintenance")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int>("IdCandidate_Provider")
                        .HasColumnType("int");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<string>("InformationProvisionMaintenance")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("InternalQualitySystem")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("MTBDescription")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("Management")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrganisationInformationProcess")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("TrainingDocumentation")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.HasKey("IdCandidateProviderCIPOStructureActivity");

                    b.HasIndex("IdCandidate_Provider");

                    b.ToTable("Candidate_ProviderCIPOStructureActivity");
                });

            modelBuilder.Entity("Data.Models.Data.Candidate.CandidateProviderConsulting", b =>
                {
                    b.Property<int>("IdCandidateProviderConsulting")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCandidateProviderConsulting"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCandidateProvider")
                        .HasColumnType("int");

                    b.Property<int>("IdConsultingType")
                        .HasColumnType("int");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.HasKey("IdCandidateProviderConsulting");

                    b.HasIndex("IdCandidateProvider");

                    b.ToTable("Candidate_ProviderConsulting");
                });

            modelBuilder.Entity("Data.Models.Data.Candidate.CandidateProviderCPOStructureActivity", b =>
                {
                    b.Property<int>("IdCandidateProviderCPOStructureActivity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCandidateProviderCPOStructureActivity"), 1L, 1);

                    b.Property<string>("CompletionCertificationTraining")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DataMaintenance")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int>("IdCandidate_Provider")
                        .HasColumnType("int");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<string>("InformationProvisionMaintenance")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("InternalQualitySystem")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("MTBDescription")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("Management")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrganisationTrainingProcess")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("TeachersSelection")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("TrainingDocumentation")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.HasKey("IdCandidateProviderCPOStructureActivity");

                    b.HasIndex("IdCandidate_Provider");

                    b.ToTable("Candidate_ProviderCPOStructureActivity");
                });

            modelBuilder.Entity("Data.Models.Data.Candidate.CandidateProviderDocument", b =>
                {
                    b.Property<int>("IdCandidateProviderDocument")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCandidateProviderDocument"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DocumentTitle")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasComment("Описание на документа");

                    b.Property<int>("IdCandidateProvider")
                        .HasColumnType("int")
                        .HasComment("Връзка с CPO,CIPO - Обучаваща институция");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdDocumentType")
                        .HasColumnType("int")
                        .HasComment("Вид на документа");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<bool>("IsAdditionalDocument")
                        .HasColumnType("bit")
                        .HasComment("Допълнителни документи");

                    b.Property<string>("MigrationNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OldId")
                        .HasColumnType("int");

                    b.Property<string>("UploadedFileName")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasComment("UploadedFileName");

                    b.HasKey("IdCandidateProviderDocument");

                    b.HasIndex("IdCandidateProvider");

                    b.ToTable("Candidate_ProviderDocument");
                });

            modelBuilder.Entity("Data.Models.Data.Candidate.CandidateProviderLicenceChange", b =>
                {
                    b.Property<int>("IdCandidateProviderLicenceChange")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCandidateProviderLicenceChange"), 1L, 1);

                    b.Property<string>("Archive")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasComment("Информация къде се съхранява архивът на ЦПО/ЦИПО при отнемане на лицензия");

                    b.Property<DateTime>("ChangeDate")
                        .HasColumnType("datetime2")
                        .HasComment("Дата на промяна");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DS_DATE")
                        .HasColumnType("datetime2");

                    b.Property<string>("DS_DocNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("DS_GUID")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("DS_ID")
                        .HasColumnType("int");

                    b.Property<string>("DS_LINK")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<DateTime?>("DS_OFFICIAL_DATE")
                        .HasColumnType("datetime2");

                    b.Property<string>("DS_OFFICIAL_DocNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("DS_OFFICIAL_GUID")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("DS_OFFICIAL_ID")
                        .HasColumnType("int");

                    b.Property<string>("DS_PREP")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("IdCandidate_Provider")
                        .HasColumnType("int");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int?>("IdLicenceStatusDetail")
                        .HasColumnType("int")
                        .HasComment("Детайли при смяна на лицензията/Статус");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int>("IdStatus")
                        .HasColumnType("int")
                        .HasComment("Смяна на лицензията/Статус");

                    b.Property<bool>("IsFromDS")
                        .HasColumnType("bit");

                    b.Property<string>("MigrationNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasComment("Бележки");

                    b.Property<string>("NumberCommand")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Номер на заповедта");

                    b.Property<int?>("OldId")
                        .HasColumnType("int");

                    b.HasKey("IdCandidateProviderLicenceChange");

                    b.HasIndex("IdCandidate_Provider");

                    b.ToTable("Candidate_ProviderLicenceChange");
                });

            modelBuilder.Entity("Data.Models.Data.Candidate.CandidateProviderPerson", b =>
                {
                    b.Property<int>("IdCandidateProviderPerson")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCandidateProviderPerson"), 1L, 1);

                    b.Property<int>("IdCandidate_Provider")
                        .HasColumnType("int");

                    b.Property<int>("IdPerson")
                        .HasColumnType("int");

                    b.Property<bool>("IsAllowedForNotification")
                        .HasColumnType("bit")
                        .HasComment("Използва се при изпращането на официални съобщения към ЦПО");

                    b.HasKey("IdCandidateProviderPerson");

                    b.HasIndex("IdCandidate_Provider");

                    b.HasIndex("IdPerson");

                    b.ToTable("Candidate_ProviderPerson");
                });

            modelBuilder.Entity("Data.Models.Data.Candidate.CandidateProviderPremises", b =>
                {
                    b.Property<int>("IdCandidateProviderPremises")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCandidateProviderPremises"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCandidate_Provider")
                        .HasColumnType("int")
                        .HasComment("CPO,CIPO - Кандидат Обучаваща институция");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int?>("IdLocation")
                        .HasColumnType("int")
                        .HasComment("Населено място");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int>("IdOwnership")
                        .HasColumnType("int")
                        .HasComment("Форма на собственост");

                    b.Property<int>("IdStatus")
                        .HasColumnType("int")
                        .HasComment("Статус");

                    b.Property<DateTime?>("InactiveDate")
                        .HasColumnType("datetime2")
                        .HasComment("Дата на деактивиране на базата");

                    b.Property<string>("MigrationNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OldId")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Телефон");

                    b.Property<string>("PremisesName")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasComment("Наименование на материално-техническата база");

                    b.Property<string>("PremisesNote")
                        .HasColumnType("ntext")
                        .HasComment("Кратко описание");

                    b.Property<string>("ProviderAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Адрес");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)")
                        .HasComment("Пощенски код");

                    b.HasKey("IdCandidateProviderPremises");

                    b.HasIndex("IdCandidate_Provider");

                    b.HasIndex("IdLocation");

                    b.ToTable("Candidate_ProviderPremises");
                });

            modelBuilder.Entity("Data.Models.Data.Candidate.CandidateProviderPremisesChecking", b =>
                {
                    b.Property<int>("IdCandidateProviderPremisesChecking")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCandidateProviderPremisesChecking"), 1L, 1);

                    b.Property<bool>("CheckDone")
                        .HasColumnType("bit")
                        .HasComment("Извършена проверка от експерт на НАПОО");

                    b.Property<DateTime?>("CheckingDate")
                        .HasColumnType("datetime2")
                        .HasComment("Дата на проверка");

                    b.Property<string>("Comment")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasComment("Коментар");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCandidateProviderPremises")
                        .HasColumnType("int")
                        .HasComment("Връзка с MTB");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int?>("IdFollowUpControl")
                        .HasColumnType("int")
                        .HasComment("Последващ контрол, изпълняван от служител/и на НАПОО");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<string>("MigrationNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OldId")
                        .HasColumnType("int");

                    b.HasKey("IdCandidateProviderPremisesChecking");

                    b.HasIndex("IdCandidateProviderPremises");

                    b.HasIndex("IdFollowUpControl");

                    b.ToTable("Candidate_ProviderPremisesChecking");
                });

            modelBuilder.Entity("Data.Models.Data.Candidate.CandidateProviderPremisesDocument", b =>
                {
                    b.Property<int>("IdCandidateProviderPremisesDocument")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCandidateProviderPremisesDocument"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DocumentTitle")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasComment("Описание на документа");

                    b.Property<int>("IdCandidateProviderPremises")
                        .HasColumnType("int")
                        .HasComment("Метериална техническа база");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdDocumentType")
                        .HasColumnType("int")
                        .HasComment("Вид на документа");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<string>("MigrationNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OldId")
                        .HasColumnType("int");

                    b.Property<string>("UploadedFileName")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.HasKey("IdCandidateProviderPremisesDocument");

                    b.HasIndex("IdCandidateProviderPremises");

                    b.ToTable("Candidate_ProviderPremisesDocument");
                });

            modelBuilder.Entity("Data.Models.Data.Candidate.CandidateProviderPremisesRoom", b =>
                {
                    b.Property<int>("IdCandidateProviderPremisesRoom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCandidateProviderPremisesRoom"), 1L, 1);

                    b.Property<int?>("Area")
                        .HasColumnType("int")
                        .HasComment("Приблизителна площ (кв. м.");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Equipment")
                        .HasColumnType("ntext")
                        .HasComment("Кратко описание на оборудването");

                    b.Property<int>("IdCandidateProviderPremises")
                        .HasColumnType("int")
                        .HasComment("Метериална техническа база");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int>("IdPremisesType")
                        .HasColumnType("int")
                        .HasComment("Вид на помещението");

                    b.Property<int>("IdUsage")
                        .HasColumnType("int")
                        .HasComment("Вид на провежданото обучение");

                    b.Property<string>("MigrationNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OldId")
                        .HasColumnType("int");

                    b.Property<string>("PremisesRoomName")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasComment("Наименование на помещението");

                    b.Property<int?>("Workplace")
                        .HasColumnType("int")
                        .HasComment("Брой работни места");

                    b.HasKey("IdCandidateProviderPremisesRoom");

                    b.HasIndex("IdCandidateProviderPremises");

                    b.ToTable("Candidate_ProviderPremisesRoom");
                });

            modelBuilder.Entity("Data.Models.Data.Candidate.CandidateProviderPremisesSpeciality", b =>
                {
                    b.Property<int>("IdCandidateProviderPremisesSpeciality")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCandidateProviderPremisesSpeciality"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCandidateProviderPremises")
                        .HasColumnType("int")
                        .HasComment("Метериална техническа база");

                    b.Property<int>("IdComplianceDOC")
                        .HasColumnType("int")
                        .HasComment("Съответствие с ДОС");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int>("IdSpeciality")
                        .HasColumnType("int")
                        .HasComment("Връзка с  Специалност");

                    b.Property<int>("IdUsage")
                        .HasColumnType("int")
                        .HasComment("Вид на провежданото обучение");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.HasKey("IdCandidateProviderPremisesSpeciality");

                    b.HasIndex("IdCandidateProviderPremises");

                    b.HasIndex("IdSpeciality");

                    b.ToTable("Candidate_ProviderPremisesSpeciality");
                });

            modelBuilder.Entity("Data.Models.Data.Candidate.CandidateProviderSpeciality", b =>
                {
                    b.Property<int>("IdCandidateProviderSpeciality")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCandidateProviderSpeciality"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCandidate_Provider")
                        .HasColumnType("int");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int?>("IdFormEducation")
                        .HasColumnType("int")
                        .HasComment("Форма на обучение");

                    b.Property<int?>("IdFrameworkProgram")
                        .HasColumnType("int")
                        .HasComment("Рамкова програма");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int>("IdSpeciality")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LicenceData")
                        .HasColumnType("datetime2")
                        .HasComment("Дата на получаване на лицензия за специалността");

                    b.Property<string>("LicenceProtNo")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Номер на протокол/заповед за лицензиране на специалността");

                    b.Property<string>("MigrationNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OldId")
                        .HasColumnType("int");

                    b.HasKey("IdCandidateProviderSpeciality");

                    b.HasIndex("IdCandidate_Provider");

                    b.HasIndex("IdFrameworkProgram");

                    b.HasIndex("IdSpeciality");

                    b.ToTable("Candidate_ProviderSpeciality");
                });

            modelBuilder.Entity("Data.Models.Data.Candidate.CandidateProviderStatus", b =>
                {
                    b.Property<int>("IdCandidateProviderStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCandidateProviderStatus"), 1L, 1);

                    b.Property<int>("IdCandidate_Provider")
                        .HasColumnType("int");

                    b.Property<int>("IdStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("StatusDate")
                        .HasColumnType("datetime2");

                    b.HasKey("IdCandidateProviderStatus");

                    b.HasIndex("IdCandidate_Provider");

                    b.ToTable("Candidate_ProviderStatus");
                });

            modelBuilder.Entity("Data.Models.Data.Candidate.CandidateProviderTrainer", b =>
                {
                    b.Property<int>("IdCandidateProviderTrainer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCandidateProviderTrainer"), 1L, 1);

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ContractDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DiplomaNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Номер на диплома");

                    b.Property<string>("EducationAcademicNotes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("EducationCertificateNotes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("EducationSpecialityNotes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FamilyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("IdCandidate_Provider")
                        .HasColumnType("int");

                    b.Property<int?>("IdContractType")
                        .HasColumnType("int");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdEducation")
                        .HasColumnType("int");

                    b.Property<int?>("IdIndentType")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int?>("IdNationality")
                        .HasColumnType("int");

                    b.Property<int?>("IdSex")
                        .HasColumnType("int");

                    b.Property<int?>("IdStatus")
                        .HasColumnType("int");

                    b.Property<DateTime?>("InactiveDate")
                        .HasColumnType("datetime2")
                        .HasComment("Дата на деактивиране на преподавателя/консултанта");

                    b.Property<string>("Indent")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("IsAndragog")
                        .HasColumnType("bit");

                    b.Property<string>("MigrationNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OldId")
                        .HasColumnType("int");

                    b.Property<string>("ProfessionalQualificationCertificate")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SecondName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IdCandidateProviderTrainer");

                    b.HasIndex("IdCandidate_Provider");

                    b.ToTable("Candidate_ProviderTrainer");
                });

            modelBuilder.Entity("Data.Models.Data.Candidate.CandidateProviderTrainerChecking", b =>
                {
                    b.Property<int>("IdCandidateProviderTrainerChecking")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCandidateProviderTrainerChecking"), 1L, 1);

                    b.Property<bool>("CheckDone")
                        .HasColumnType("bit")
                        .HasComment("Извършена проверка от експерт на НАПОО");

                    b.Property<DateTime?>("CheckingDate")
                        .HasColumnType("datetime2")
                        .HasComment("Дата на проверка");

                    b.Property<string>("Comment")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasComment("Коментар");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCandidateProviderTrainer")
                        .HasColumnType("int")
                        .HasComment("Връзка с Преподавател");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int?>("IdFollowUpControl")
                        .HasColumnType("int")
                        .HasComment("Последващ контрол, изпълняван от служител/и на НАПОО");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.HasKey("IdCandidateProviderTrainerChecking");

                    b.HasIndex("IdCandidateProviderTrainer");

                    b.HasIndex("IdFollowUpControl");

                    b.ToTable("Candidate_ProviderTrainerChecking");
                });

            modelBuilder.Entity("Data.Models.Data.Candidate.CandidateProviderTrainerDocument", b =>
                {
                    b.Property<int>("IdCandidateProviderTrainerDocument")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCandidateProviderTrainerDocument"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DocumentTitle")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<int>("IdCandidateProviderTrainer")
                        .HasColumnType("int");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdDocumentType")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<string>("MigrationNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OldId")
                        .HasColumnType("int");

                    b.Property<string>("UploadedFileName")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.HasKey("IdCandidateProviderTrainerDocument");

                    b.HasIndex("IdCandidateProviderTrainer");

                    b.ToTable("Candidate_ProviderTrainerDocument");
                });

            modelBuilder.Entity("Data.Models.Data.Candidate.CandidateProviderTrainerProfile", b =>
                {
                    b.Property<int>("IdCandidateProviderTrainerProfile")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCandidateProviderTrainerProfile"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCandidateProviderTrainer")
                        .HasColumnType("int");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int>("IdProfessionalDirection")
                        .HasColumnType("int");

                    b.Property<bool>("IsPractice")
                        .HasColumnType("bit");

                    b.Property<bool>("IsProfessionalDirectionQualified")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTheory")
                        .HasColumnType("bit");

                    b.Property<string>("MigrationNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OldId")
                        .HasColumnType("int");

                    b.HasKey("IdCandidateProviderTrainerProfile");

                    b.HasIndex("IdCandidateProviderTrainer");

                    b.HasIndex("IdProfessionalDirection");

                    b.ToTable("Candidate_ProviderTrainerProfile");
                });

            modelBuilder.Entity("Data.Models.Data.Candidate.CandidateProviderTrainerQualification", b =>
                {
                    b.Property<int>("IdCandidateProviderTrainerQualification")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCandidateProviderTrainerQualification"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCandidateProviderTrainer")
                        .HasColumnType("int");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int?>("IdProfession")
                        .HasColumnType("int");

                    b.Property<int>("IdQualificationType")
                        .HasColumnType("int");

                    b.Property<int>("IdTrainingQualificationType")
                        .HasColumnType("int");

                    b.Property<string>("MigrationNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OldId")
                        .HasColumnType("int");

                    b.Property<int?>("QualificationDuration")
                        .HasColumnType("int");

                    b.Property<string>("QualificationName")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<DateTime?>("TrainingFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("TrainingTo")
                        .HasColumnType("datetime2");

                    b.HasKey("IdCandidateProviderTrainerQualification");

                    b.HasIndex("IdCandidateProviderTrainer");

                    b.HasIndex("IdProfession");

                    b.ToTable("Candidate_ProviderTrainerQualification");
                });

            modelBuilder.Entity("Data.Models.Data.Candidate.CandidateProviderTrainerSpeciality", b =>
                {
                    b.Property<int>("IdCandidateProviderTrainerSpeciality")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCandidateProviderTrainerSpeciality"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCandidateProviderTrainer")
                        .HasColumnType("int")
                        .HasComment("Връзка с Преподавател");

                    b.Property<int>("IdComplianceDOC")
                        .HasColumnType("int")
                        .HasComment("Съответствие с ДОС");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int>("IdSpeciality")
                        .HasColumnType("int")
                        .HasComment("Връзка с  Специалност");

                    b.Property<int>("IdUsage")
                        .HasColumnType("int")
                        .HasComment("Вид на провежданото обучение");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.HasKey("IdCandidateProviderTrainerSpeciality");

                    b.HasIndex("IdCandidateProviderTrainer");

                    b.HasIndex("IdSpeciality");

                    b.ToTable("Candidate_ProviderTrainerSpeciality");
                });

            modelBuilder.Entity("Data.Models.Data.Common.AllowIP", b =>
                {
                    b.Property<int>("idAllowIP")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idAllowIP"), 1L, 1);

                    b.Property<string>("Commnet")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("IP")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsAllow")
                        .HasColumnType("bit");

                    b.HasKey("idAllowIP");

                    b.ToTable("AllowIP");
                });

            modelBuilder.Entity("Data.Models.Data.Common.AuthenticationTicket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("Expires")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("LastActivity")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte[]>("Value")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AuthenticationTickets");
                });

            modelBuilder.Entity("Data.Models.Data.Common.District", b =>
                {
                    b.Property<int>("idDistrict")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idDistrict"), 1L, 1);

                    b.Property<string>("DistrictCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("DistrictName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DistrictNameEN")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("NSICode")
                        .HasColumnType("int");

                    b.Property<int>("int_obl_id_old")
                        .HasColumnType("int");

                    b.HasKey("idDistrict");

                    b.ToTable("District");
                });

            modelBuilder.Entity("Data.Models.Data.Common.KeyType", b =>
                {
                    b.Property<int>("IdKeyType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdKeyType"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("bit");

                    b.Property<string>("KeyTypeIntCode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("KeyTypeName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.HasKey("IdKeyType");

                    b.ToTable("KeyType");
                });

            modelBuilder.Entity("Data.Models.Data.Common.KeyValue", b =>
                {
                    b.Property<int>("IdKeyValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdKeyValue"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DefaultValue1")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("DefaultValue2")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("DefaultValue3")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("DefaultValue4")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("DescriptionEN")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("FormattedText")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("FormattedTextEN")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdKeyType")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("Определя дали стойността е активна");

                    b.Property<string>("KeyValueIntCode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("NameEN")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("IdKeyValue");

                    b.HasIndex("IdKeyType");

                    b.ToTable("KeyValue");
                });

            modelBuilder.Entity("Data.Models.Data.Common.Location", b =>
                {
                    b.Property<int>("idLocation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idLocation"), 1L, 1);

                    b.Property<string>("Cat")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Height")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Kmetstvo")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LocationCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LocationNameEN")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PhoneCode")
                        .HasColumnType("int");

                    b.Property<int>("PostCode")
                        .HasColumnType("int");

                    b.Property<int>("idMunicipality")
                        .HasColumnType("int");

                    b.Property<int>("int_ekatte_id_old")
                        .HasColumnType("int");

                    b.Property<string>("kati")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("idLocation");

                    b.HasIndex("idMunicipality");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("Data.Models.Data.Common.MenuNode", b =>
                {
                    b.Property<int>("IdMenuNode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdMenuNode"), 1L, 1);

                    b.Property<string>("CssClass")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CssClassIcon")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("IdParentNode")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("NodeOrder")
                        .HasColumnType("int");

                    b.Property<string>("QueryParams")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("Target")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.HasKey("IdMenuNode");

                    b.ToTable("MenuNode");
                });

            modelBuilder.Entity("Data.Models.Data.Common.MenuNodeRole", b =>
                {
                    b.Property<int>("IdMenuNodeRole")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdMenuNodeRole"), 1L, 1);

                    b.Property<string>("IdApplicationRole")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Връзка с Роля");

                    b.Property<int>("IdMenuNode")
                        .HasColumnType("int")
                        .HasComment("Връзка с елемент от менюто");

                    b.HasKey("IdMenuNodeRole");

                    b.HasIndex("IdApplicationRole");

                    b.HasIndex("IdMenuNode");

                    b.ToTable("MenuNodeRole");
                });

            modelBuilder.Entity("Data.Models.Data.Common.Municipality", b =>
                {
                    b.Property<int>("idMunicipality")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idMunicipality"), 1L, 1);

                    b.Property<string>("MunicipalityCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("MunicipalityName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MunicipalityNameEN")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("idDistrict")
                        .HasColumnType("int");

                    b.Property<int>("int_municipality_id_old")
                        .HasColumnType("int");

                    b.HasKey("idMunicipality");

                    b.HasIndex("idDistrict");

                    b.ToTable("Municipality");
                });

            modelBuilder.Entity("Data.Models.Data.Common.Notification", b =>
                {
                    b.Property<int>("IdNotification")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdNotification"), 1L, 1);

                    b.Property<string>("About")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int?>("IdPersonFrom")
                        .HasColumnType("int");

                    b.Property<int?>("IdPersonTo")
                        .HasColumnType("int");

                    b.Property<int>("IdStatusNotification")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NotificationText")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SendDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("IdNotification");

                    b.HasIndex("IdPersonFrom");

                    b.HasIndex("IdPersonTo");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("Data.Models.Data.Common.Person", b =>
                {
                    b.Property<int>("IdPerson")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPerson"), 1L, 1);

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FamilyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int?>("IdIndentType")
                        .HasColumnType("int");

                    b.Property<int?>("IdLocation")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int?>("IdSex")
                        .HasColumnType("int");

                    b.Property<string>("Indent")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("IsContractRegisterDocu")
                        .HasColumnType("bit")
                        .HasComment("Договорът се регистрира в деловодната система");

                    b.Property<bool>("IsSignContract")
                        .HasColumnType("bit")
                        .HasComment("Сключва се договор");

                    b.Property<string>("MigrationNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OldId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PasswordResetDate")
                        .HasColumnType("datetime2")
                        .HasComment("Дата на нулиране на парола");

                    b.Property<string>("PersonalID")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime?>("PersonalIDDateFrom")
                        .HasColumnType("datetime2");

                    b.Property<string>("PersonalIDIssueBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Position")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PostCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("SecondName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TaxOffice")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Данъчна служба");

                    b.Property<string>("Title")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("IdPerson");

                    b.HasIndex("IdLocation");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("Data.Models.Data.Common.Policy", b =>
                {
                    b.Property<int>("idPolicy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idPolicy"), 1L, 1);

                    b.Property<string>("PolicyCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Код на Policy");

                    b.Property<string>("PolicyDescription")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Описание на Policy");

                    b.HasKey("idPolicy");

                    b.HasIndex("PolicyCode")
                        .IsUnique();

                    b.ToTable("Policy");
                });

            modelBuilder.Entity("Data.Models.Data.Common.Region", b =>
                {
                    b.Property<int>("idRegion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idRegion"), 1L, 1);

                    b.Property<string>("RegionName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("idMunicipality")
                        .HasColumnType("int");

                    b.Property<int>("int_municipality_details_id_old")
                        .HasColumnType("int");

                    b.HasKey("idRegion");

                    b.HasIndex("idMunicipality");

                    b.ToTable("Region");
                });

            modelBuilder.Entity("Data.Models.Data.Common.ScheduleProcessHistory", b =>
                {
                    b.Property<int>("IdScheduleProcessHistory")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdScheduleProcessHistory"), 1L, 1);

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2")
                        .HasComment("Дата на приключване");

                    b.Property<string>("Exception")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Изключение - Грешка");

                    b.Property<DateTime>("ExecuteDate")
                        .HasColumnType("datetime2")
                        .HasComment("Дата на изпълнение");

                    b.Property<DateTime>("RunTime")
                        .HasColumnType("datetime2")
                        .HasComment("Дата на стариране");

                    b.Property<bool>("Successful")
                        .HasColumnType("bit")
                        .HasComment("Статус на изпълнение");

                    b.HasKey("IdScheduleProcessHistory");

                    b.ToTable("ScheduleProcessHistory");
                });

            modelBuilder.Entity("Data.Models.Data.Common.Sequence", b =>
                {
                    b.Property<int>("idSequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idSequence"), 1L, 1);

                    b.Property<int?>("IdResource")
                        .HasColumnType("int");

                    b.Property<long>("NextVal")
                        .HasColumnType("bigint");

                    b.Property<string>("Resource")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Year")
                        .HasColumnType("int");

                    b.HasKey("idSequence");

                    b.ToTable("Sequence");
                });

            modelBuilder.Entity("Data.Models.Data.Common.Setting", b =>
                {
                    b.Property<int>("idSetting")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idSetting"), 1L, 1);

                    b.Property<string>("SettingClass")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SettingDescription")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("SettingIntCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SettingName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("SettingValue")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("idSetting");

                    b.ToTable("Setting");
                });

            modelBuilder.Entity("Data.Models.Data.Common.TemplateDocument", b =>
                {
                    b.Property<int>("idTemplateDocument")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idTemplateDocument"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateFrom")
                        .HasColumnType("datetime2")
                        .HasComment("Активна от");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnType("datetime2")
                        .HasComment("Активна до");

                    b.Property<int>("IdApplicationType")
                        .HasColumnType("int");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int>("IdModule")
                        .HasColumnType("int");

                    b.Property<int>("IdStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TemplateDescription")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("TemplateName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("TemplatePath")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("UploadedFileName")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.HasKey("idTemplateDocument");

                    b.ToTable("TemplateDocument");
                });

            modelBuilder.Entity("Data.Models.Data.Control.FollowUpControl", b =>
                {
                    b.Property<int>("IdFollowUpControl")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdFollowUpControl"), 1L, 1);

                    b.Property<DateTime>("ControlEndDate")
                        .HasColumnType("datetime2")
                        .HasComment("Срок на проверката до");

                    b.Property<DateTime>("ControlStartDate")
                        .HasColumnType("datetime2")
                        .HasComment("Срок на проверката от");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCandidateProvider")
                        .HasColumnType("int")
                        .HasComment("Връзка с проверяван ЦПО/ЦИПО");

                    b.Property<int>("IdControlType")
                        .HasColumnType("int")
                        .HasComment("Връзка с номенклатура за вид на проверката");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdFollowUpControlType")
                        .HasColumnType("int")
                        .HasComment("Връзка с номенклатура за вид на последващия контрол");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int?>("IdStatus")
                        .HasColumnType("int")
                        .HasComment("Статус на проверката");

                    b.Property<bool>("IsFollowUpControlOnline")
                        .HasColumnType("bit")
                        .HasComment("По документи в ИС на НАПОО и въз основа на допълнително изискани документи - чек бокс");

                    b.Property<bool>("IsFollowUpControlOnsite")
                        .HasColumnType("bit")
                        .HasComment("Последващият контрол се извършва на място");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("OnsiteControlDate")
                        .HasColumnType("datetime2")
                        .HasComment("Дата на последващ контрол, само ако се провежда на място");

                    b.Property<DateTime?>("PeriodFrom")
                        .HasColumnType("datetime2")
                        .HasComment("Период от");

                    b.Property<DateTime?>("PeriodTo")
                        .HasColumnType("datetime2")
                        .HasComment("Период до");

                    b.Property<DateTime?>("TermImplRecommendation")
                        .HasColumnType("datetime2")
                        .HasComment("Срок за изпълнение на препоръки");

                    b.HasKey("IdFollowUpControl");

                    b.HasIndex("IdCandidateProvider");

                    b.ToTable("Control_FollowUpControl");

                    b.HasComment("Последващ контрол, изпълняван от служител/и на НАПОО");
                });

            modelBuilder.Entity("Data.Models.Data.Control.FollowUpControlDocument", b =>
                {
                    b.Property<int>("IdFollowUpControlDocument")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdFollowUpControlDocument"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DS_DATE")
                        .HasColumnType("datetime2");

                    b.Property<string>("DS_DocNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("DS_GUID")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("DS_ID")
                        .HasColumnType("int");

                    b.Property<string>("DS_LINK")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<DateTime?>("DS_OFFICIAL_DATE")
                        .HasColumnType("datetime2");

                    b.Property<string>("DS_OFFICIAL_DocNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("DS_OFFICIAL_GUID")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("DS_OFFICIAL_ID")
                        .HasColumnType("int");

                    b.Property<string>("DS_PREP")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdDocumentType")
                        .HasColumnType("int")
                        .HasComment("Тип на документа при последващ контрол");

                    b.Property<int>("IdFollowUpControl")
                        .HasColumnType("int")
                        .HasComment("Връзка с последващ контрол");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<bool>("IsFromDS")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UploadedFileName")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasComment("Прикачен файл от център");

                    b.HasKey("IdFollowUpControlDocument");

                    b.HasIndex("IdFollowUpControl");

                    b.ToTable("Control_FollowUpControlDocument");

                    b.HasComment("Протокол/доклад/заповед във връзка с проследяващ контрол");
                });

            modelBuilder.Entity("Data.Models.Data.Control.FollowUpControlDocumentNotification", b =>
                {
                    b.Property<int>("IdFollowUpControlDocumentNotification")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdFollowUpControlDocumentNotification"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdFollowUpControlDocument")
                        .HasColumnType("int")
                        .HasComment("Връзка с документ по процедура");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int>("IdNotification")
                        .HasColumnType("int")
                        .HasComment("Връзка с известие");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.HasKey("IdFollowUpControlDocumentNotification");

                    b.HasIndex("IdFollowUpControlDocument");

                    b.HasIndex("IdNotification");

                    b.ToTable("Control_FollowUpControlDocumentNotification");
                });

            modelBuilder.Entity("Data.Models.Data.Control.FollowUpControlExpert", b =>
                {
                    b.Property<int>("IdFollowUpControlExpert")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdFollowUpControlExpert"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdExpert")
                        .HasColumnType("int")
                        .HasComment("Връзка с експерт на НАПОО");

                    b.Property<int>("IdFollowUpControl")
                        .HasColumnType("int")
                        .HasComment("Връзка с проследяващ контрол");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.HasKey("IdFollowUpControlExpert");

                    b.HasIndex("IdExpert");

                    b.HasIndex("IdFollowUpControl");

                    b.ToTable("Control_FollowUpControlExpert");

                    b.HasComment("Връзка на проследяващ контрол с експерт на НАПОО");
                });

            modelBuilder.Entity("Data.Models.Data.Control.FollowUpControlUploadedFile", b =>
                {
                    b.Property<int>("IdFollowUpControlUploadedFile")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdFollowUpControlUploadedFile"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasComment("Описание на прикачения файл");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdFollowUpControl")
                        .HasColumnType("int")
                        .HasComment("Връзка с последващ контрол");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UploadedFileName")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasComment("Прикачен файл");

                    b.HasKey("IdFollowUpControlUploadedFile");

                    b.HasIndex("IdFollowUpControl");

                    b.ToTable("Control_FollowUpControlUploadedFile");

                    b.HasComment("Прикачен файл към последващ контрол");
                });

            modelBuilder.Entity("Data.Models.Data.DOC.DOC", b =>
                {
                    b.Property<int>("IdDOC")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdDOC"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescriptionProfession")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2")
                        .HasComment("В сила до");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int>("IdProfession")
                        .HasColumnType("int");

                    b.Property<int>("IdStatus")
                        .HasColumnType("int")
                        .HasComment("Статус");

                    b.Property<bool>("IsDOI")
                        .HasColumnType("bit")
                        .HasComment("Държавни образователни изисквания");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("NewspaperNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("PublicationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Regulation")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("RequirementsCandidates")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<string>("RequirementsMaterialBase")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<string>("RequirementsТrainers")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasComment("В сила от");

                    b.Property<string>("UploadedFileName")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.HasKey("IdDOC");

                    b.HasIndex("IdProfession");

                    b.ToTable("DOC_DOC");
                });

            modelBuilder.Entity("Data.Models.Data.DOC.DOC_DOC_NKPD", b =>
                {
                    b.Property<int>("IdDOC_DOC_NKPD")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdDOC_DOC_NKPD"), 1L, 1);

                    b.Property<int>("IdDOC")
                        .HasColumnType("int");

                    b.Property<int>("IdNKPD")
                        .HasColumnType("int");

                    b.HasKey("IdDOC_DOC_NKPD");

                    b.HasIndex("IdDOC");

                    b.HasIndex("IdNKPD");

                    b.ToTable("DOC_DOC_NKPD");
                });

            modelBuilder.Entity("Data.Models.Data.DOC.ERU", b =>
                {
                    b.Property<int>("IdERU")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdERU"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdDOC")
                        .HasColumnType("int");

                    b.Property<int>("IdEKRLevel")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int>("IdNKRLevel")
                        .HasColumnType("int");

                    b.Property<int>("IdProfessionalTraining")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("RUText")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.HasKey("IdERU");

                    b.HasIndex("IdDOC");

                    b.ToTable("DOC_ERU");
                });

            modelBuilder.Entity("Data.Models.Data.DOC.ERUSpeciality", b =>
                {
                    b.Property<int>("IdERUSpeciality")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdERUSpeciality"), 1L, 1);

                    b.Property<int>("IdERU")
                        .HasColumnType("int");

                    b.Property<int>("IdSpeciality")
                        .HasColumnType("int");

                    b.HasKey("IdERUSpeciality");

                    b.HasIndex("IdERU");

                    b.HasIndex("IdSpeciality");

                    b.ToTable("DOC_ERUSpeciality");
                });

            modelBuilder.Entity("Data.Models.Data.DOC.NKPD", b =>
                {
                    b.Property<int>("IdNKPD")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdNKPD"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EducationLevelCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("IdClassCode")
                        .HasColumnType("int");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdGroupCode")
                        .HasColumnType("int");

                    b.Property<int>("IdIndividualGroupCode")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int>("IdSubclassCode")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.HasKey("IdNKPD");

                    b.ToTable("DOC_NKPD");
                });

            modelBuilder.Entity("Data.Models.Data.EGovPayment.Payment", b =>
                {
                    b.Property<int>("IdPayment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPayment"), 1L, 1);

                    b.Property<string>("AdditionalInformation")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasComment("Допълнителна информация");

                    b.Property<string>("ApplicantName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Име на задължено лице");

                    b.Property<string>("ApplicantUin")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Идентификатор на задължено лице");

                    b.Property<int>("ApplicantUinTypeId")
                        .HasColumnType("int")
                        .HasComment("тип на идентификатора на задължено лице (\"1\", \"2\" или \"3\" -> ЕГН = 1, ЛНЧ = 2, БУЛСТАТ = 3)");

                    b.Property<DateTime?>("ChangeTime")
                        .HasColumnType("datetime2")
                        .HasComment("Време на промяна на статуса на заявката за плащане");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime2")
                        .HasComment("Дата на изтичане на заявката за плащане");

                    b.Property<int>("IdCandidate_Provider")
                        .HasColumnType("int")
                        .HasComment("Връзка с  CPO,CIPO - Кандидат Обучаваща институция");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int>("IdPaymentStatus")
                        .HasColumnType("int")
                        .HasComment("Статус на плащане");

                    b.Property<int>("IdProcedurePrice")
                        .HasColumnType("int")
                        .HasComment("Такси за лицензиране");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("PaymentAmount")
                        .HasColumnType("decimal(10,2)")
                        .HasComment("Сума на задължението (десетичен разделител \".\", до 2 символа след десетичния разделител, пр. \"2.33\")");

                    b.Property<string>("PaymentReason")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Основание за плащане");

                    b.Property<string>("PaymentTypeCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Код на плащане");

                    b.Property<string>("ReceiptId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Номер на заявка в pay.egov.bg");

                    b.Property<DateTime?>("ReferenceDate")
                        .HasColumnType("datetime2")
                        .HasComment("Дата на документ (референтен документ за плащане)");

                    b.Property<string>("ReferenceNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Номер на документ (референтен документ за\r\nплащане");

                    b.Property<string>("ReferenceType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Тип на документ (референтен документ за плащане)");

                    b.Property<DateTime?>("RegistrationTime")
                        .HasColumnType("datetime2")
                        .HasComment("Дата на заявка в pay.egov.bg");

                    b.Property<string>("ServiceProviderBIC")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("BIC код на сметката на доставчика на ЕАУ");

                    b.Property<string>("ServiceProviderBank")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Име на банката, в която е сметката на доставчика на ЕАУ");

                    b.Property<string>("ServiceProviderIBAN")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("IBAN код на сметката на доставчика на ЕАУ");

                    b.Property<string>("ServiceProviderName")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasComment("Доставчик на ЕАУ");

                    b.HasKey("IdPayment");

                    b.HasIndex("IdCandidate_Provider");

                    b.HasIndex("IdProcedurePrice");

                    b.ToTable("Procedure_Payment");
                });

            modelBuilder.Entity("Data.Models.Data.ExternalExpertCommission.Expert", b =>
                {
                    b.Property<int>("IdExpert")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdExpert"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int?>("IdPerson")
                        .HasColumnType("int");

                    b.Property<bool>("IsCommissionExpert")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDOCExpert")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExternalExpert")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNapooExpert")
                        .HasColumnType("bit");

                    b.Property<string>("MigrationNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OldId")
                        .HasColumnType("int");

                    b.HasKey("IdExpert");

                    b.HasIndex("IdPerson");

                    b.ToTable("ExpComm_Expert");
                });

            modelBuilder.Entity("Data.Models.Data.ExternalExpertCommission.ExpertDOC", b =>
                {
                    b.Property<int>("IdExpertDOC")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdExpertDOC"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOrder")
                        .HasColumnType("datetime2")
                        .HasComment("Дата на утвърждаване");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdDOC")
                        .HasColumnType("int");

                    b.Property<int>("IdExpert")
                        .HasColumnType("int")
                        .HasComment("Експерт");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int>("IdStatus")
                        .HasColumnType("int")
                        .HasComment("Статус");

                    b.Property<string>("MigrationNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OldId")
                        .HasColumnType("int");

                    b.Property<string>("OrderNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Номер на заповед");

                    b.HasKey("IdExpertDOC");

                    b.HasIndex("IdDOC");

                    b.HasIndex("IdExpert");

                    b.ToTable("ExpComm_ExpertDOC");
                });

            modelBuilder.Entity("Data.Models.Data.ExternalExpertCommission.ExpertDocument", b =>
                {
                    b.Property<int>("IdExpertDocument")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdExpertDocument"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdDocumentType")
                        .HasColumnType("int");

                    b.Property<int>("IdExpert")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UploadedFileName")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.HasKey("IdExpertDocument");

                    b.HasIndex("IdExpert");

                    b.ToTable("ExpComm_ExpertDocument");
                });

            modelBuilder.Entity("Data.Models.Data.ExternalExpertCommission.ExpertExpertCommission", b =>
                {
                    b.Property<int>("IdExpertExpertCommission")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdExpertExpertCommission"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdExpert")
                        .HasColumnType("int");

                    b.Property<int>("IdExpertCommission")
                        .HasColumnType("int")
                        .HasComment("Eкспертна комисия - KeyTypeIntCode = ExpertCommission");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int>("IdRole")
                        .HasColumnType("int")
                        .HasComment("Вид експерт");

                    b.Property<int>("IdStatus")
                        .HasColumnType("int")
                        .HasComment("Статус");

                    b.Property<string>("Institution")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasComment("Институция, която представя");

                    b.Property<string>("MigrationNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Occupation")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Длъжност ");

                    b.Property<int?>("OldId")
                        .HasColumnType("int");

                    b.Property<string>("Protokol")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Протокол");

                    b.Property<DateTime>("ProtokolDate")
                        .HasColumnType("datetime2")
                        .HasComment("Дата на Протокол");

                    b.HasKey("IdExpertExpertCommission");

                    b.HasIndex("IdExpert");

                    b.ToTable("ExpComm_ExpertExpertCommission");
                });

            modelBuilder.Entity("Data.Models.Data.ExternalExpertCommission.ExpertNapoo", b =>
                {
                    b.Property<int>("IdExpertNapoo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdExpertNapoo"), 1L, 1);

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2")
                        .HasComment("Дата на назначаване");

                    b.Property<string>("Comment")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasComment("История на промяната");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdExpert")
                        .HasColumnType("int")
                        .HasComment("Експерт");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int>("IdStatus")
                        .HasColumnType("int")
                        .HasComment("Статус");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Occupation")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Длъжност");

                    b.HasKey("IdExpertNapoo");

                    b.HasIndex("IdExpert");

                    b.ToTable("ExpComm_ExpertNapoo");
                });

            modelBuilder.Entity("Data.Models.Data.ExternalExpertCommission.ExpertProfessionalDirection", b =>
                {
                    b.Property<int>("IdExpertProfessionalDirection")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdExpertProfessionalDirection"), 1L, 1);

                    b.Property<string>("Comment")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateApprovalExternalExpert")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOrderIncludedExpertCommission")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdExpert")
                        .HasColumnType("int");

                    b.Property<int>("IdExpertType")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int>("IdProfessionalDirection")
                        .HasColumnType("int");

                    b.Property<int>("IdStatus")
                        .HasColumnType("int");

                    b.Property<string>("MigrationNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OldId")
                        .HasColumnType("int");

                    b.Property<string>("OrderNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IdExpertProfessionalDirection");

                    b.HasIndex("IdExpert");

                    b.HasIndex("IdProfessionalDirection");

                    b.ToTable("ExpComm_ExpertProfessionalDirection");
                });

            modelBuilder.Entity("Data.Models.Data.ProviderData.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int?>("IdPerson")
                        .HasColumnType("int");

                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.Property<int?>("IdUserStatus")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("IdPerson");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Data.Models.Data.ProviderData.ManagementDeadlineProcedure", b =>
                {
                    b.Property<int>("IdManagementDeadlineProcedure")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdManagementDeadlineProcedure"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdApplicationStatus")
                        .HasColumnType("int")
                        .HasComment("Статус/Етап на процедурата по лицензиране");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdLicensingType")
                        .HasColumnType("int")
                        .HasComment("Вид лицензия");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Term")
                        .HasColumnType("int")
                        .HasComment("Срок");

                    b.HasKey("IdManagementDeadlineProcedure");

                    b.ToTable("Procedure_ManagementDeadlineProcedure");
                });

            modelBuilder.Entity("Data.Models.Data.ProviderData.NegativeIssue", b =>
                {
                    b.Property<int>("IdNegativeIssue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdNegativeIssue"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int>("IdStartedProcedure")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NegativeIssueText")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.HasKey("IdNegativeIssue");

                    b.HasIndex("IdStartedProcedure");

                    b.ToTable("Procedure_NegativeIssue");
                });

            modelBuilder.Entity("Data.Models.Data.ProviderData.ProcedureDocument", b =>
                {
                    b.Property<int>("IdProcedureDocument")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdProcedureDocument"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DS_DATE")
                        .HasColumnType("datetime2");

                    b.Property<string>("DS_DocNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("DS_GUID")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("DS_ID")
                        .HasColumnType("int");

                    b.Property<string>("DS_LINK")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<DateTime?>("DS_OFFICIAL_DATE")
                        .HasColumnType("datetime2");

                    b.Property<string>("DS_OFFICIAL_DocNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("DS_OFFICIAL_GUID")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("DS_OFFICIAL_ID")
                        .HasColumnType("int");

                    b.Property<string>("DS_PREP")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("DateAttachment")
                        .HasColumnType("datetime2");

                    b.Property<string>("Extension")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int?>("IdDocumentType")
                        .HasColumnType("int");

                    b.Property<int?>("IdExpert")
                        .HasColumnType("int")
                        .HasComment("Връзка на документа с  Експерт");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int>("IdStartedProcedure")
                        .HasColumnType("int");

                    b.Property<bool>("IsValid")
                        .HasColumnType("bit");

                    b.Property<string>("MimeType")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UploadedFileName")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.HasKey("IdProcedureDocument");

                    b.HasIndex("IdExpert");

                    b.HasIndex("IdStartedProcedure");

                    b.ToTable("Procedure_Document");
                });

            modelBuilder.Entity("Data.Models.Data.ProviderData.ProcedureDocumentNotification", b =>
                {
                    b.Property<int>("IdProcedureDocumentNotification")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdProcedureDocumentNotification"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int>("IdNotification")
                        .HasColumnType("int")
                        .HasComment("Връзка с известие");

                    b.Property<int>("IdProcedureDocument")
                        .HasColumnType("int")
                        .HasComment("Връзка с документ по процедура");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.HasKey("IdProcedureDocumentNotification");

                    b.HasIndex("IdNotification");

                    b.HasIndex("IdProcedureDocument");

                    b.ToTable("Procedure_DocumentNotification");
                });

            modelBuilder.Entity("Data.Models.Data.ProviderData.ProcedureExpertCommission", b =>
                {
                    b.Property<int>("IdProcedureExpertCommission")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdProcedureExpertCommission"), 1L, 1);

                    b.Property<int>("IdExpertCommission")
                        .HasColumnType("int");

                    b.Property<int>("IdStartedProcedure")
                        .HasColumnType("int");

                    b.HasKey("IdProcedureExpertCommission");

                    b.HasIndex("IdStartedProcedure");

                    b.ToTable("Procedure_ExpertCommission");
                });

            modelBuilder.Entity("Data.Models.Data.ProviderData.ProcedureExternalExpert", b =>
                {
                    b.Property<int>("IdProcedureExternalExpert")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdProcedureExternalExpert"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdExpert")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int?>("IdProcedureDocument")
                        .HasColumnType("int");

                    b.Property<int?>("IdProfessionalDirection")
                        .HasColumnType("int");

                    b.Property<int>("IdStartedProcedure")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("Показва статуса на външния експерт спрямо процедурата");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UploadDate")
                        .HasColumnType("datetime2")
                        .HasComment("Дата на прикачване на доклада");

                    b.Property<string>("UploadedFileName")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasComment("Прикачен файл");

                    b.HasKey("IdProcedureExternalExpert");

                    b.HasIndex("IdExpert");

                    b.HasIndex("IdProcedureDocument");

                    b.HasIndex("IdProfessionalDirection");

                    b.HasIndex("IdStartedProcedure");

                    b.ToTable("Procedure_ExternalExpert");
                });

            modelBuilder.Entity("Data.Models.Data.ProviderData.ProcedurePrice", b =>
                {
                    b.Property<int>("IdProcedurePrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdProcedurePrice"), 1L, 1);

                    b.Property<string>("AdditionalInformation")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Допълнителна информация");

                    b.Property<int?>("CountProfessionsFrom")
                        .HasColumnType("int");

                    b.Property<int?>("CountProfessionsTo")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpirationDateFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpirationDateTo")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IdApplicationStatus")
                        .HasColumnType("int");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int>("IdTypeApplication")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("IdProcedurePrice");

                    b.ToTable("Procedure_ProcedurePrice");
                });

            modelBuilder.Entity("Data.Models.Data.ProviderData.Provider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IdLocation")
                        .HasColumnType("int");

                    b.Property<int?>("IdLocationCorrespondence")
                        .HasColumnType("int")
                        .HasComment("Населено място за кореспондениця на ЦПО,ЦИПО");

                    b.Property<int>("IdProviderOwnership")
                        .HasColumnType("int");

                    b.Property<int>("IdProviderRegistration")
                        .HasColumnType("int");

                    b.Property<int>("IdProviderStatus")
                        .HasColumnType("int");

                    b.Property<int>("LicenceNumber")
                        .HasColumnType("int");

                    b.Property<int>("LicenceStatusId")
                        .HasColumnType("int");

                    b.Property<string>("PersonNameCorrespondence")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Лице за контакт/кореспондениця");

                    b.Property<string>("PoviderBulstat")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ProviderAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ProviderAddressCorrespondence")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Адрес за кореспонденция   на ЦПО,ЦИПО");

                    b.Property<string>("ProviderEmail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ProviderEmailCorrespondence")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("E-mail за кореспонденция с ЦПО,ЦИПО");

                    b.Property<string>("ProviderFax")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ProviderFaxCorrespondence")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Факс за кореспонденция с ЦПО,ЦИПО");

                    b.Property<string>("ProviderName")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasComment("Име на ЦПО,ЦИПО");

                    b.Property<string>("ProviderOwner")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ProviderPhone")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ProviderPhoneCorrespondence")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ProviderWeb")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("ZipCodeCorrespondence")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)")
                        .HasComment("Пощенски код за кореспонденция   на ЦПО,ЦИПО");

                    b.HasKey("Id");

                    b.HasIndex("IdLocation");

                    b.HasIndex("IdLocationCorrespondence");

                    b.ToTable("Provider");
                });

            modelBuilder.Entity("Data.Models.Data.ProviderData.ProviderPerson", b =>
                {
                    b.Property<int>("IdProviderPerson")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdProviderPerson"), 1L, 1);

                    b.Property<int>("IdPerson")
                        .HasColumnType("int");

                    b.Property<int>("IdProvider")
                        .HasColumnType("int");

                    b.HasKey("IdProviderPerson");

                    b.HasIndex("IdPerson");

                    b.HasIndex("IdProvider");

                    b.ToTable("ProviderPerson");
                });

            modelBuilder.Entity("Data.Models.Data.ProviderData.StartedProcedure", b =>
                {
                    b.Property<int>("IdStartedProcedure")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdStartedProcedure"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpertReportDeadline")
                        .HasColumnType("datetime2")
                        .HasComment("Срок за представяне на доклад на външния експерт ");

                    b.Property<int?>("IdCandidate_Provider")
                        .HasColumnType("int")
                        .HasComment("Връзка с  CPO,CIPO - Кандидат Обучаваща институция");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LicenseDate")
                        .HasColumnType("datetime2")
                        .HasComment("Приложение към издадена лицензия - Дата на издаване");

                    b.Property<string>("LicenseNumber")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Приложение към издадена лицензия - Номер на лицензия");

                    b.Property<DateTime?>("MeetingDate")
                        .HasColumnType("datetime2")
                        .HasComment("Дата на заседание в Писмо-покана за заседание на ЕК ");

                    b.Property<string>("MeetingHour")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Час на заседание в Писмо-покана за заседание на ЕК ");

                    b.Property<string>("MigrationNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("NapooReportDeadline")
                        .HasColumnType("datetime2")
                        .HasComment("Kраен срок на доклад на експертната комисия");

                    b.Property<int?>("OldId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TS")
                        .HasColumnType("datetime2")
                        .HasComment("Дата на заявката");

                    b.HasKey("IdStartedProcedure");

                    b.ToTable("Procedure_StartedProcedure");
                });

            modelBuilder.Entity("Data.Models.Data.ProviderData.StartedProcedureProgress", b =>
                {
                    b.Property<int>("IdStartedProcedureProgress")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdStartedProcedureProgress"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int>("IdStartedProcedure")
                        .HasColumnType("int");

                    b.Property<int?>("IdStep")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StepDate")
                        .HasColumnType("datetime2");

                    b.HasKey("IdStartedProcedureProgress");

                    b.HasIndex("IdStartedProcedure");

                    b.ToTable("Procedure_StartedProcedureProgress");
                });

            modelBuilder.Entity("Data.Models.Data.Rating.CandidateProviderIndicator", b =>
                {
                    b.Property<int>("IdCandidateProviderIndicator")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCandidateProviderIndicator"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCandidate_Provider")
                        .HasColumnType("int")
                        .HasComment("Връзка с  CPO,CIPO - Кандидат Обучаваща институция");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int?>("IdIndicator")
                        .HasColumnType("int")
                        .HasComment("Връзка с Показател");

                    b.Property<int>("IdIndicatorType")
                        .HasColumnType("int")
                        .HasComment("Показател вид");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Points")
                        .HasColumnType("decimal(5,2)")
                        .HasComment("Точки");

                    b.Property<int>("Year")
                        .HasColumnType("int")
                        .HasComment("Година");

                    b.HasKey("IdCandidateProviderIndicator");

                    b.HasIndex("IdCandidate_Provider");

                    b.HasIndex("IdIndicator");

                    b.ToTable("Rating_CandidateProviderIndicator");
                });

            modelBuilder.Entity("Data.Models.Data.Rating.Indicator", b =>
                {
                    b.Property<int>("IdIndicator")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdIndicator"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdIndicatorType")
                        .HasColumnType("int")
                        .HasComment("Показател вид");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Points")
                        .HasColumnType("decimal(5,2)")
                        .HasComment("Точки");

                    b.Property<decimal?>("PointsNo")
                        .HasColumnType("decimal(5,2)")
                        .HasComment("Точки НЕ");

                    b.Property<decimal?>("PointsYes")
                        .HasColumnType("decimal(5,2)")
                        .HasComment("Точки Да");

                    b.Property<decimal?>("RangeFrom")
                        .HasColumnType("decimal(10,2)")
                        .HasComment("Диапазаон от");

                    b.Property<decimal?>("RangeTo")
                        .HasColumnType("decimal(10,2)")
                        .HasComment("Диапазаон до");

                    b.Property<int>("Year")
                        .HasColumnType("int")
                        .HasComment("Година");

                    b.HasKey("IdIndicator");

                    b.ToTable("Rating_Indicator");
                });

            modelBuilder.Entity("Data.Models.Data.Request.DocumentSerialNumber", b =>
                {
                    b.Property<int>("IdDocumentSerialNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdDocumentSerialNumber"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DocumentDate")
                        .HasColumnType("datetime2")
                        .HasComment("Дата на Получаване/Предаване");

                    b.Property<int>("IdCandidateProvider")
                        .HasColumnType("int")
                        .HasComment("Връзка с  CPO - Обучаваща институция");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdDocumentOperation")
                        .HasColumnType("int")
                        .HasComment("Вид операция");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int>("IdRequestDocumentManagement")
                        .HasColumnType("int")
                        .HasComment("Връзка със получени/предадени документи");

                    b.Property<int?>("IdRequestReport")
                        .HasColumnType("int")
                        .HasComment("Връзка с Отчет на документи с фабрична номерация по наредба 8");

                    b.Property<int>("IdTypeOfRequestedDocument")
                        .HasColumnType("int")
                        .HasComment("Връзка с  Тип документ към печатница на МОН");

                    b.Property<string>("MigrationNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OldId")
                        .HasColumnType("int");

                    b.Property<int>("ReceiveDocumentYear")
                        .HasColumnType("int")
                        .HasComment("Календарна година");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Сериен номер на документ");

                    b.HasKey("IdDocumentSerialNumber");

                    b.HasIndex("IdCandidateProvider");

                    b.HasIndex("IdRequestDocumentManagement");

                    b.HasIndex("IdRequestReport");

                    b.HasIndex("IdTypeOfRequestedDocument");

                    b.ToTable("Request_DocumentSerialNumber");
                });

            modelBuilder.Entity("Data.Models.Data.Request.DocumentSeries", b =>
                {
                    b.Property<int>("IdDocumentSeries")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdDocumentSeries"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int>("IdTypeOfRequestedDocument")
                        .HasColumnType("int")
                        .HasComment("Връзка с  Тип документ към печатница на МОН");

                    b.Property<string>("MigrationNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OldId")
                        .HasColumnType("int");

                    b.Property<string>("SeriesName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("IdDocumentSeries");

                    b.HasIndex("IdTypeOfRequestedDocument");

                    b.ToTable("Request_DocumentSeries");
                });

            modelBuilder.Entity("Data.Models.Data.Request.NAPOORequestDoc", b =>
                {
                    b.Property<int>("IdNAPOORequestDoc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdNAPOORequestDoc"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<bool>("IsNotificationSent")
                        .HasColumnType("bit")
                        .HasComment("Изпратено известие към ЦПО");

                    b.Property<bool>("IsSent")
                        .HasColumnType("bit")
                        .HasComment("Заявката е изпратена към печатницата");

                    b.Property<string>("MigrationNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("NAPOORequestNumber")
                        .HasColumnType("bigint")
                        .HasComment("Ноемер на заявка");

                    b.Property<int?>("OldId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RequestDate")
                        .HasColumnType("datetime2")
                        .HasComment("Дата на заявка");

                    b.Property<int?>("RequestYear")
                        .HasColumnType("int")
                        .HasComment("Година на заявка");

                    b.Property<string>("UploadedFileName")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasComment("Прикачен файл");

                    b.HasKey("IdNAPOORequestDoc");

                    b.ToTable("Request_NAPOORequestDoc");
                });

            modelBuilder.Entity("Data.Models.Data.Request.ProviderDocumentOffer", b =>
                {
                    b.Property<int>("IdProviderDocumentOffer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdProviderDocumentOffer"), 1L, 1);

                    b.Property<int>("CountOffered")
                        .HasColumnType("int")
                        .HasComment("Брой предлагани/търсени документи");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCandidateProvider")
                        .HasColumnType("int")
                        .HasComment("Връзка с  CPO - Обучаваща институция");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int>("IdOfferType")
                        .HasColumnType("int")
                        .HasComment("Вид на оферта");

                    b.Property<int>("IdTypeOfRequestedDocument")
                        .HasColumnType("int")
                        .HasComment("Връзка с Тип документ");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("OfferEndDate")
                        .HasColumnType("datetime2")
                        .HasComment("Крайна дата на офертата");

                    b.Property<DateTime>("OfferStartDate")
                        .HasColumnType("datetime2")
                        .HasComment("Начална дата на офертата");

                    b.HasKey("IdProviderDocumentOffer");

                    b.HasIndex("IdCandidateProvider");

                    b.HasIndex("IdTypeOfRequestedDocument");

                    b.ToTable("Request_ProviderDocumentOffer");
                });

            modelBuilder.Entity("Data.Models.Data.Request.ProviderRequestDocument", b =>
                {
                    b.Property<int>("IdProviderRequestDocument")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdProviderRequestDocument"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Адрес");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CurrentYear")
                        .HasColumnType("int")
                        .HasComment("Година на заявка");

                    b.Property<int>("IdCandidateProvider")
                        .HasColumnType("int");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int?>("IdLocationCorrespondence")
                        .HasColumnType("int")
                        .HasComment("Населено място за кореспондениця на ЦПО,ЦИПО");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int?>("IdNAPOORequestDoc")
                        .HasColumnType("int");

                    b.Property<bool>("IsSent")
                        .HasColumnType("bit")
                        .HasComment("Заявката е изпратена към печатницата");

                    b.Property<string>("MigrationNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Имена на заявител");

                    b.Property<int?>("OldId")
                        .HasColumnType("int");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Длъжност на заявител");

                    b.Property<DateTime?>("RequestDate")
                        .HasColumnType("datetime2")
                        .HasComment("Дата на заявка");

                    b.Property<long?>("RequestNumber")
                        .HasColumnType("bigint")
                        .HasComment("Ноемер на заявка");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Телефон");

                    b.Property<string>("UploadedFileName")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasComment("Прикачен файл");

                    b.Property<int?>("oid_request_pdf")
                        .HasColumnType("int");

                    b.HasKey("IdProviderRequestDocument");

                    b.HasIndex("IdCandidateProvider");

                    b.HasIndex("IdLocationCorrespondence");

                    b.HasIndex("IdNAPOORequestDoc");

                    b.ToTable("Request_ProviderRequestDocument");
                });

            modelBuilder.Entity("Data.Models.Data.Request.ReportUploadedDoc", b =>
                {
                    b.Property<int>("IdReportUploadedDoc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdReportUploadedDoc"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasComment("Описание");

                    b.Property<int>("IdCandidateProvider")
                        .HasColumnType("int")
                        .HasComment("Връзка с CPO,CIPO - Обучаваща институция");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int>("IdRequestReport")
                        .HasColumnType("int")
                        .HasComment("Връзка с CPO,CIPO - Обучаваща институция");

                    b.Property<int>("IdTypeReportUploadedDocument")
                        .HasColumnType("int")
                        .HasComment("Тип документ");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UploadedFileName")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasComment("Прикачен файл");

                    b.HasKey("IdReportUploadedDoc");

                    b.HasIndex("IdCandidateProvider");

                    b.HasIndex("IdRequestReport");

                    b.ToTable("Request_ReportUploadedDoc");
                });

            modelBuilder.Entity("Data.Models.Data.Request.RequestDocumentManagement", b =>
                {
                    b.Property<int>("IdRequestDocumentManagement")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdRequestDocumentManagement"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DocumentCount")
                        .HasColumnType("int")
                        .HasComment("Брой документи - Получени/Предадени");

                    b.Property<DateTime>("DocumentDate")
                        .HasColumnType("datetime2")
                        .HasComment("Дата на Получаване/Предаване");

                    b.Property<int>("IdCandidateProvider")
                        .HasColumnType("int")
                        .HasComment("Връзка с  CPO - Обучаваща институция");

                    b.Property<int?>("IdCandidateProviderPartner")
                        .HasColumnType("int")
                        .HasComment("Връзка с  CPO - Обучаваща институция");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdDocumentOperation")
                        .HasColumnType("int")
                        .HasComment("Вид операция");

                    b.Property<int?>("IdDocumentRequestReceiveType")
                        .HasColumnType("int")
                        .HasComment("Начин на получаване на заявката за документи");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int?>("IdProviderRequestDocument")
                        .HasColumnType("int")
                        .HasComment("Връзка със заявка за документация, подадена от ЦПО");

                    b.Property<int?>("IdRequestReport")
                        .HasColumnType("int")
                        .HasComment("Отчет на документи с фабрична номерация по наредба 8");

                    b.Property<int>("IdTypeOfRequestedDocument")
                        .HasColumnType("int")
                        .HasComment("Връзка с  Тип документ към печатница на МОН");

                    b.Property<string>("MigrationNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OldId")
                        .HasColumnType("int");

                    b.Property<int>("ReceiveDocumentYear")
                        .HasColumnType("int")
                        .HasComment("Календарна година");

                    b.HasKey("IdRequestDocumentManagement");

                    b.HasIndex("IdCandidateProvider");

                    b.HasIndex("IdCandidateProviderPartner");

                    b.HasIndex("IdProviderRequestDocument");

                    b.HasIndex("IdRequestReport");

                    b.HasIndex("IdTypeOfRequestedDocument");

                    b.ToTable("Request_RequestDocumentManagement");
                });

            modelBuilder.Entity("Data.Models.Data.Request.RequestDocumentManagementUploadedFile", b =>
                {
                    b.Property<int>("IdRequestDocumentManagementUploadedFile")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdRequestDocumentManagementUploadedFile"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasComment("Описание");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int>("IdRequestDocumentManagement")
                        .HasColumnType("int")
                        .HasComment("Връзка със получени/предадени документи");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UploadedFileName")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasComment("Прикачен файл");

                    b.HasKey("IdRequestDocumentManagementUploadedFile");

                    b.HasIndex("IdRequestDocumentManagement");

                    b.ToTable("Request_RequestDocumentManagementUploadedFile");
                });

            modelBuilder.Entity("Data.Models.Data.Request.RequestDocumentStatus", b =>
                {
                    b.Property<int>("IdRequestDocumentStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdRequestDocumentStatus"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCandidateProvider")
                        .HasColumnType("int")
                        .HasComment("Връзка с  CPO,CIPO - Обучаваща институция");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int>("IdProviderRequestDocument")
                        .HasColumnType("int")
                        .HasComment("Връзка със заявка подадена от ЦПО/ЦИПО");

                    b.Property<int>("IdStatus")
                        .HasColumnType("int")
                        .HasComment("Статус");

                    b.Property<string>("MigrationNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OldId")
                        .HasColumnType("int");

                    b.HasKey("IdRequestDocumentStatus");

                    b.HasIndex("IdCandidateProvider");

                    b.HasIndex("IdProviderRequestDocument");

                    b.ToTable("Request_RequestDocumentStatus");
                });

            modelBuilder.Entity("Data.Models.Data.Request.RequestDocumentType", b =>
                {
                    b.Property<int>("IdRequestDocumentType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdRequestDocumentType"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DocumentCount")
                        .HasColumnType("int")
                        .HasComment("Брой документи");

                    b.Property<int>("IdCandidateProvider")
                        .HasColumnType("int")
                        .HasComment("Връзка с  CPO,CIPO - Обучаваща институция");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int>("IdProviderRequestDocument")
                        .HasColumnType("int")
                        .HasComment("Връзка със заявка подадена от ЦПО/ЦИПО");

                    b.Property<int?>("IdRequestDocumentManagement")
                        .HasColumnType("int")
                        .HasComment("Връзка с получен документ");

                    b.Property<int>("IdTypeOfRequestedDocument")
                        .HasColumnType("int")
                        .HasComment("Връзка с Тип документ");

                    b.Property<string>("MigrationNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OldId")
                        .HasColumnType("int");

                    b.HasKey("IdRequestDocumentType");

                    b.HasIndex("IdCandidateProvider");

                    b.HasIndex("IdProviderRequestDocument");

                    b.HasIndex("IdRequestDocumentManagement");

                    b.HasIndex("IdTypeOfRequestedDocument");

                    b.ToTable("Request_RequestDocumentType");
                });

            modelBuilder.Entity("Data.Models.Data.Request.RequestReport", b =>
                {
                    b.Property<int>("IdRequestReport")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdRequestReport"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DestructionDate")
                        .HasColumnType("datetime2")
                        .HasComment("Дата на унищожаване");

                    b.Property<int>("IdCandidateProvider")
                        .HasColumnType("int")
                        .HasComment("Връзка с CPO,CIPO - Обучаваща институция");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int>("IdStatus")
                        .HasColumnType("int")
                        .HasComment("Статус на одобрение на отчета");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("IdRequestReport");

                    b.HasIndex("IdCandidateProvider");

                    b.ToTable("Request_Report");
                });

            modelBuilder.Entity("Data.Models.Data.Request.TypeOfRequestedDocument", b =>
                {
                    b.Property<int>("IdTypeOfRequestedDocument")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTypeOfRequestedDocument"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrentPeriod")
                        .HasColumnType("int")
                        .HasComment("Текущ период");

                    b.Property<string>("DefaultValue1")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Стойност по подразбиране");

                    b.Property<string>("DocTypeName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Наименование на документ");

                    b.Property<string>("DocTypeOfficialNumber")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Официален номер на документ");

                    b.Property<bool>("HasSerialNumber")
                        .HasColumnType("bit")
                        .HasComment("Има серийни номера");

                    b.Property<int?>("IdCourseType")
                        .HasColumnType("int")
                        .HasComment("Вид на курса за обучение, по който може да се получи типът документ");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<bool>("IsDestroyable")
                        .HasColumnType("bit")
                        .HasComment("IsDestroyable");

                    b.Property<bool>("IsValid")
                        .HasColumnType("bit")
                        .HasComment("Докуента е валиден");

                    b.Property<string>("MigrationNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OldId")
                        .HasColumnType("int");

                    b.Property<int>("Order")
                        .HasColumnType("int")
                        .HasComment("Номер по ред");

                    b.Property<float>("Price")
                        .HasColumnType("real")
                        .HasComment("Единична цена");

                    b.HasKey("IdTypeOfRequestedDocument");

                    b.ToTable("Request_TypeOfRequestedDocument");
                });

            modelBuilder.Entity("Data.Models.Data.Role.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasComment("Наименование на роля");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Data.Models.Data.SPPOO.Area", b =>
                {
                    b.Property<int>("IdArea")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdArea"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int>("IdStatus")
                        .HasColumnType("int");

                    b.Property<string>("MigrationNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("NameEN")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("OldId")
                        .HasColumnType("int");

                    b.HasKey("IdArea");

                    b.ToTable("SPPOO_Area");
                });

            modelBuilder.Entity("Data.Models.Data.SPPOO.FrameworkProgram", b =>
                {
                    b.Property<int>("IdFrameworkProgram")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdFrameworkProgram"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DefaultValue1")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Стойност по подразбиране");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasComment("Описание");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int?>("IdFrameworkProgramConnection")
                        .HasColumnType("int");

                    b.Property<int>("IdMinimumLevelEducation")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int>("IdQualificationLevel")
                        .HasColumnType("int");

                    b.Property<int>("IdTrainingPeriod")
                        .HasColumnType("int");

                    b.Property<int>("IdTypeFrameworkProgram")
                        .HasColumnType("int");

                    b.Property<int>("IdVQS")
                        .HasColumnType("int");

                    b.Property<bool>("IsValid")
                        .HasColumnType("bit")
                        .HasComment("Валидно ли е");

                    b.Property<string>("MigrationNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MinimumLevelQualification")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("OldId")
                        .HasColumnType("int");

                    b.Property<double>("Practice")
                        .HasColumnType("float");

                    b.Property<double>("SectionB")
                        .HasColumnType("float");

                    b.Property<double>("SectionА")
                        .HasColumnType("float");

                    b.Property<double>("SectionА1")
                        .HasColumnType("float");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Кратко описание");

                    b.Property<double>("Theory")
                        .HasColumnType("float");

                    b.HasKey("IdFrameworkProgram");

                    b.ToTable("SPPOO_FrameworkProgram");
                });

            modelBuilder.Entity("Data.Models.Data.SPPOO.FrameworkProgramFormEducation", b =>
                {
                    b.Property<int>("IdFrameworkProgramFormEducation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdFrameworkProgramFormEducation"), 1L, 1);

                    b.Property<int>("IdFormEducation")
                        .HasColumnType("int");

                    b.Property<int>("IdFrameworkProgram")
                        .HasColumnType("int");

                    b.HasKey("IdFrameworkProgramFormEducation");

                    b.HasIndex("IdFrameworkProgram");

                    b.ToTable("SPPOO_FrameworkProgramFormEducation");
                });

            modelBuilder.Entity("Data.Models.Data.SPPOO.LegalCapacityOrdinanceUploadedFile", b =>
                {
                    b.Property<int>("IdLegalCapacityOrdinanceUploadedFile")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdLegalCapacityOrdinanceUploadedFile"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdLegalCapacityOrdinanceType")
                        .HasColumnType("int")
                        .HasComment("Вид на наредбата за правоспособност");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UploadedFileName")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasComment("Прикачен файл");

                    b.HasKey("IdLegalCapacityOrdinanceUploadedFile");

                    b.ToTable("SPPOO_LegalCapacityOrdinanceUploadedFile");
                });

            modelBuilder.Entity("Data.Models.Data.SPPOO.Profession", b =>
                {
                    b.Property<int>("IdProfession")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdProfession"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int?>("IdLegalCapacityOrdinanceType")
                        .HasColumnType("int")
                        .HasComment("Вид на наредбата за правоспособност");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int>("IdProfessionalDirection")
                        .HasColumnType("int");

                    b.Property<int>("IdStatus")
                        .HasColumnType("int");

                    b.Property<bool>("IsPresupposeLegalCapacity")
                        .HasColumnType("bit");

                    b.Property<string>("MigrationNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("NameEN")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("OldId")
                        .HasColumnType("int");

                    b.HasKey("IdProfession");

                    b.HasIndex("IdProfessionalDirection");

                    b.ToTable("SPPOO_Profession");
                });

            modelBuilder.Entity("Data.Models.Data.SPPOO.ProfessionalDirection", b =>
                {
                    b.Property<int>("IdProfessionalDirection")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdProfessionalDirection"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdArea")
                        .HasColumnType("int");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdExpertCommission")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int>("IdStatus")
                        .HasColumnType("int");

                    b.Property<string>("MigrationNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("NameEN")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("OldId")
                        .HasColumnType("int");

                    b.HasKey("IdProfessionalDirection");

                    b.HasIndex("IdArea");

                    b.ToTable("SPPOO_ProfessionalDirection");
                });

            modelBuilder.Entity("Data.Models.Data.SPPOO.ProfessionalDirectionOrder", b =>
                {
                    b.Property<int>("IdProfessionalDirectionOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdProfessionalDirectionOrder"), 1L, 1);

                    b.Property<int>("IdProfessionalDirection")
                        .HasColumnType("int");

                    b.Property<int>("IdSPPOOOrder")
                        .HasColumnType("int");

                    b.Property<int>("IdTypeChange")
                        .HasColumnType("int");

                    b.HasKey("IdProfessionalDirectionOrder");

                    b.HasIndex("IdProfessionalDirection");

                    b.HasIndex("IdSPPOOOrder");

                    b.ToTable("SPPOO_ProfessionalDirectionOrder");
                });

            modelBuilder.Entity("Data.Models.Data.SPPOO.ProfessionOrder", b =>
                {
                    b.Property<int>("IdProfessionOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdProfessionOrder"), 1L, 1);

                    b.Property<int>("IdProfession")
                        .HasColumnType("int");

                    b.Property<int>("IdSPPOOOrder")
                        .HasColumnType("int");

                    b.Property<int>("IdTypeChange")
                        .HasColumnType("int");

                    b.HasKey("IdProfessionOrder");

                    b.HasIndex("IdProfession");

                    b.HasIndex("IdSPPOOOrder");

                    b.ToTable("SPPOO_ProfessionOrder");
                });

            modelBuilder.Entity("Data.Models.Data.SPPOO.Speciality", b =>
                {
                    b.Property<int>("IdSpeciality")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdSpeciality"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int?>("IdDOC")
                        .HasColumnType("int");

                    b.Property<int>("IdEKRLevel")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int>("IdNKRLevel")
                        .HasColumnType("int");

                    b.Property<int>("IdProfession")
                        .HasColumnType("int");

                    b.Property<int>("IdStatus")
                        .HasColumnType("int");

                    b.Property<int>("IdVQS")
                        .HasColumnType("int");

                    b.Property<bool>("IsAdultEducation")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDistanceLearning")
                        .HasColumnType("bit");

                    b.Property<bool>("IsShortageSpecialistsLaborMarket")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStateProtectedSpecialties")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTrainingPartProfession")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTrainingStudents")
                        .HasColumnType("bit");

                    b.Property<string>("LinkMON")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("LinkNIP")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("MigrationNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("NameEN")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("OldId")
                        .HasColumnType("int");

                    b.HasKey("IdSpeciality");

                    b.HasIndex("IdDOC");

                    b.HasIndex("IdProfession");

                    b.ToTable("SPPOO_Speciality");
                });

            modelBuilder.Entity("Data.Models.Data.SPPOO.SpecialityNKPD", b =>
                {
                    b.Property<int>("IdSpecialityNKPD")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdSpecialityNKPD"), 1L, 1);

                    b.Property<int>("IdNKPD")
                        .HasColumnType("int");

                    b.Property<int>("IdSpeciality")
                        .HasColumnType("int");

                    b.HasKey("IdSpecialityNKPD");

                    b.HasIndex("IdNKPD");

                    b.HasIndex("IdSpeciality");

                    b.ToTable("SPPOO_SpecialityNKPD");
                });

            modelBuilder.Entity("Data.Models.Data.SPPOO.SpecialityOrder", b =>
                {
                    b.Property<int>("IdSpecialityOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdSpecialityOrder"), 1L, 1);

                    b.Property<int>("IdSPPOOOrder")
                        .HasColumnType("int");

                    b.Property<int>("IdSpeciality")
                        .HasColumnType("int");

                    b.Property<int>("IdTypeChange")
                        .HasColumnType("int");

                    b.HasKey("IdSpecialityOrder");

                    b.HasIndex("IdSPPOOOrder");

                    b.HasIndex("IdSpeciality");

                    b.ToTable("SPPOO_SpecialityOrder");
                });

            modelBuilder.Entity("Data.Models.Data.SqlView.Archive.AnnualStudents", b =>
                {
                    b.Property<long>("IdAnnualStudent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("IdAnnualStudent"), 1L, 1);

                    b.Property<string>("BirthDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountCertificateMan_III_VQS")
                        .HasColumnType("int");

                    b.Property<int>("CountCertificateMan_II_VQS")
                        .HasColumnType("int");

                    b.Property<int>("CountCertificateMan_IV_VQS")
                        .HasColumnType("int");

                    b.Property<int>("CountCertificateMan_I_VQS")
                        .HasColumnType("int");

                    b.Property<int>("CountCertificateWomen_III_VQS")
                        .HasColumnType("int");

                    b.Property<int>("CountCertificateWomen_II_VQS")
                        .HasColumnType("int");

                    b.Property<int>("CountCertificateWomen_IV_VQS")
                        .HasColumnType("int");

                    b.Property<int>("CountCertificateWomen_I_VQS")
                        .HasColumnType("int");

                    b.Property<int>("CountIncludedMan_III_VQS")
                        .HasColumnType("int");

                    b.Property<int>("CountIncludedMan_II_VQS")
                        .HasColumnType("int");

                    b.Property<int>("CountIncludedMan_IV_VQS")
                        .HasColumnType("int");

                    b.Property<int>("CountIncludedMan_I_VQS")
                        .HasColumnType("int");

                    b.Property<int>("CountIncludedWomen_III_VQS")
                        .HasColumnType("int");

                    b.Property<int>("CountIncludedWomen_II_VQS")
                        .HasColumnType("int");

                    b.Property<int>("CountIncludedWomen_IV_VQS")
                        .HasColumnType("int");

                    b.Property<int>("CountIncludedWomen_I_VQS")
                        .HasColumnType("int");

                    b.HasKey("IdAnnualStudent");

                    b.ToTable("AnnualStudents", t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("Data.Models.Data.SqlView.Archive.AnnualStudentsByNationality", b =>
                {
                    b.Property<long>("IdNationality")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("IdNationality"), 1L, 1);

                    b.Property<int>("CountCertifiedMen")
                        .HasColumnType("int");

                    b.Property<int>("CountIncludedMen")
                        .HasColumnType("int");

                    b.Property<int>("CountIncludedPartOfProfessionMen")
                        .HasColumnType("int");

                    b.Property<int>("CountProfessionallyCertifiedMen")
                        .HasColumnType("int");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdNationality");

                    b.ToTable("AnnualStudentsByNationality", t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("Data.Models.Data.SqlView.Archive.AnnualTrainingCourse", b =>
                {
                    b.Property<long>("IdAnnualTrainingCourse")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("IdAnnualTrainingCourse"), 1L, 1);

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CountCertificateMan")
                        .HasColumnType("int");

                    b.Property<int>("CountCertificateWomen")
                        .HasColumnType("int");

                    b.Property<int>("CountDisabledPerson")
                        .HasColumnType("int");

                    b.Property<int>("CountDisadvantagedPerson")
                        .HasColumnType("int");

                    b.Property<int>("CountIncludedMan")
                        .HasColumnType("int");

                    b.Property<int>("CountIncludedWomen")
                        .HasColumnType("int");

                    b.Property<int>("CountTestimony")
                        .HasColumnType("int");

                    b.Property<string>("DistrictName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Horarium")
                        .HasColumnType("int");

                    b.Property<string>("ProfessionCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SourceFunding")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpecialityCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VQSName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdAnnualTrainingCourse");

                    b.ToTable("AnnualTrainingCourses", t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("Data.Models.Data.SqlView.Reports.GetCPOWithOutCourseByPeriod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("IdCandidate_Provider")
                        .HasColumnType("int");

                    b.Property<int>("IdSpeciality")
                        .HasColumnType("int");

                    b.Property<string>("ProfessionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpecialityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("GetCPOWithOutCourseByPeriod", t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("Data.Models.Data.SqlView.WebIntegrationService.NAPOOSearch", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("contact_person")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("documents_count")
                        .HasColumnType("int");

                    b.Property<int?>("ekatte_id")
                        .HasColumnType("int");

                    b.Property<string>("ekatte_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("has_upcoming_course")
                        .HasColumnType("int");

                    b.Property<string>("licence_number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("licence_status_id")
                        .HasColumnType("int");

                    b.Property<string>("licence_status_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("municipality_id")
                        .HasColumnType("int");

                    b.Property<string>("municipality_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("obl_id")
                        .HasColumnType("int");

                    b.Property<string>("obl_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("procedure_date")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("provider_address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("provider_email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("provider_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("provider_phone1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("provider_phone2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("reg_state")
                        .HasColumnType("int");

                    b.Property<int?>("reg_state8")
                        .HasColumnType("int");

                    b.Property<string>("rev_period_short")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("revocation_date")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("revocation_document")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("revocation_period")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("zip_code")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("NAPOOSearchs", t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("Data.Models.Data.SqlView.WebIntegrationService.NAPOOSearchCipo", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("contact_person_ekatte_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("contact_person_vc_municipality_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("contact_person_vc_obl_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("documents_count")
                        .HasColumnType("int");

                    b.Property<int?>("ekatte_id")
                        .HasColumnType("int");

                    b.Property<string>("ekatte_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("licence_data")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("licence_number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("licence_status_id")
                        .HasColumnType("int");

                    b.Property<string>("licence_status_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("municipality_id")
                        .HasColumnType("int");

                    b.Property<string>("municipality_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("obl_id")
                        .HasColumnType("int");

                    b.Property<string>("obl_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("procedure_date")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("provider_address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("provider_contact_pers_address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("provider_contact_pers_ekatte_id")
                        .HasColumnType("int");

                    b.Property<string>("provider_contact_pers_email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("provider_contact_pers_fax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("provider_contact_pers_phone1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("provider_contact_pers_phone2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("provider_contact_pers_zipcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("provider_contact_person")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("provider_email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("provider_fax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("provider_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("provider_phone1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("provider_phone2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("provider_web")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("reg_state")
                        .HasColumnType("int");

                    b.Property<int?>("reg_state8")
                        .HasColumnType("int");

                    b.Property<string>("vc_provider_manager")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("zip_code")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("NAPOOSearchCipos", t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("Data.Models.Data.SqlView.WebIntegrationService.NAPOOSearchCourses", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("contact_pers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("contact_pers_address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("contact_pers_city")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("contact_pers_email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("contact_pers_phone1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("contact_pers_phone2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("course_group_city")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("course_group_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("course_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("course_type_id")
                        .HasColumnType("int");

                    b.Property<string>("course_type_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ekatte_id")
                        .HasColumnType("int");

                    b.Property<string>("end_date")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("licence_number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("provider_id")
                        .HasColumnType("int");

                    b.Property<string>("provider_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("speciality_vqs")
                        .HasColumnType("int");

                    b.Property<string>("speciality_vqs_recoded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("start_date")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("vc_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("vet_area_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("vet_area_number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("vet_profession_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("vet_profession_number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("vet_speciality_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("vet_speciality_number")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("NAPOOSearchCourses", t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("Data.Models.Data.SqlView.WebIntegrationService.NAPOOStatistics", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int?>("blagoevgrad")
                        .HasColumnType("int");

                    b.Property<int?>("burgas")
                        .HasColumnType("int");

                    b.Property<int?>("dobrich")
                        .HasColumnType("int");

                    b.Property<int?>("gabrovo")
                        .HasColumnType("int");

                    b.Property<int?>("haskovo")
                        .HasColumnType("int");

                    b.Property<int?>("kardjali")
                        .HasColumnType("int");

                    b.Property<int?>("kiustendil")
                        .HasColumnType("int");

                    b.Property<int?>("lovech")
                        .HasColumnType("int");

                    b.Property<int?>("montana")
                        .HasColumnType("int");

                    b.Property<int?>("pazardzhik")
                        .HasColumnType("int");

                    b.Property<int?>("pernik")
                        .HasColumnType("int");

                    b.Property<int?>("pleven")
                        .HasColumnType("int");

                    b.Property<int?>("plovdiv")
                        .HasColumnType("int");

                    b.Property<int?>("razgrad")
                        .HasColumnType("int");

                    b.Property<int?>("ruse")
                        .HasColumnType("int");

                    b.Property<int?>("shumen")
                        .HasColumnType("int");

                    b.Property<int?>("silistra")
                        .HasColumnType("int");

                    b.Property<int?>("sliven")
                        .HasColumnType("int");

                    b.Property<int?>("smolyan")
                        .HasColumnType("int");

                    b.Property<int?>("sofia_grad")
                        .HasColumnType("int");

                    b.Property<int?>("sofia_oblast")
                        .HasColumnType("int");

                    b.Property<int?>("starazagora")
                        .HasColumnType("int");

                    b.Property<int?>("targovishte")
                        .HasColumnType("int");

                    b.Property<int?>("varna")
                        .HasColumnType("int");

                    b.Property<int?>("velikotarnovo")
                        .HasColumnType("int");

                    b.Property<string>("vet_area")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("vidin")
                        .HasColumnType("int");

                    b.Property<int?>("vratsa")
                        .HasColumnType("int");

                    b.Property<int?>("yambol")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("NAPOOStatistics", t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("Data.Models.Data.SqlView.WebIntegrationService.StudentDocumentVM", b =>
                {
                    b.Property<int?>("client_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("client_id"), 1L, 1);

                    b.Property<string>("city_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("course_type_id")
                        .HasColumnType("int");

                    b.Property<string>("course_type_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("document_issue_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("document_prn_no")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("document_prn_ser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("document_reg_no")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("document_type_id")
                        .HasColumnType("int");

                    b.Property<string>("document_type_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("family_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("first_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("licence_number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("profession_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("provider_owner")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("second_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("speciality_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("speciality_vqs")
                        .HasColumnType("int");

                    b.Property<string>("vc_egn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("year_finished")
                        .HasColumnType("int");

                    b.HasKey("client_id");

                    b.ToTable("StudentDocuments", t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("Data.Models.Data.Training.Client", b =>
                {
                    b.Property<int>("IdClient")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdClient"), 1L, 1);

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2")
                        .HasComment("Дата на раждане");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FamilyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Фамилия");

                    b.Property<string>("FamilyNameEN")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasComment("Фамилия на Латиница");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Име");

                    b.Property<string>("FirstNameEN")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasComment("Име на Латиница");

                    b.Property<int>("IdCandidateProvider")
                        .HasColumnType("int")
                        .HasComment("Връзка с CPO,CIPO - Обучаваща институция");

                    b.Property<int?>("IdCityOfBirth")
                        .HasColumnType("int")
                        .HasComment("Месторождение (населено място)");

                    b.Property<int?>("IdCountryOfBirth")
                        .HasColumnType("int")
                        .HasComment("Месторождение (държава)");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int?>("IdEducation")
                        .HasColumnType("int")
                        .HasComment("Образование");

                    b.Property<int?>("IdIndentType")
                        .HasColumnType("int")
                        .HasComment("Вид на идентификатора");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int?>("IdNationality")
                        .HasColumnType("int")
                        .HasComment("Гражданство");

                    b.Property<int?>("IdProfessionalDirection")
                        .HasColumnType("int");

                    b.Property<int?>("IdSex")
                        .HasColumnType("int")
                        .HasComment("Пол");

                    b.Property<string>("Indent")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("ЕГН/ЛНЧ/ИДН");

                    b.Property<string>("MigrationNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OldId")
                        .HasColumnType("int");

                    b.Property<string>("SecondName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Презиме");

                    b.Property<string>("SecondNameEN")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasComment("Презиме на Латиница");

                    b.HasKey("IdClient");

                    b.HasIndex("IdCandidateProvider");

                    b.HasIndex("IdProfessionalDirection");

                    b.ToTable("Training_Client");

                    b.HasComment("Получател на услугата(обучаем)");
                });

            modelBuilder.Entity("Data.Models.Data.Training.ClientCourse", b =>
                {
                    b.Property<int>("IdClientCourse")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdClientCourse"), 1L, 1);

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Адрес");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2")
                        .HasComment("Дата на раждане");

                    b.Property<DateTime?>("CourseJoinDate")
                        .HasColumnType("datetime2")
                        .HasComment("Дата на включване в курса");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("E-mail адрес");

                    b.Property<string>("FamilyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Фамилия");

                    b.Property<DateTime?>("FinishedDate")
                        .HasColumnType("datetime2")
                        .HasComment("Дата на приключване на курса");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Име");

                    b.Property<int?>("IdAssignType")
                        .HasColumnType("int")
                        .HasComment("Основен източник на финансиране");

                    b.Property<int?>("IdCityOfBirth")
                        .HasColumnType("int")
                        .HasComment("Месторождение (населено място)");

                    b.Property<int>("IdClient")
                        .HasColumnType("int")
                        .HasComment("Връзка с  Получател на услугата(обучаем)");

                    b.Property<int?>("IdCountryOfBirth")
                        .HasColumnType("int")
                        .HasComment("Месторождение (държава)");

                    b.Property<int>("IdCourse")
                        .HasColumnType("int")
                        .HasComment("Връзка с Курс за обучение, предлагани от ЦПО");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int?>("IdEducation")
                        .HasColumnType("int")
                        .HasComment("Образование");

                    b.Property<int?>("IdFinishedType")
                        .HasColumnType("int")
                        .HasComment("Приключване на курс");

                    b.Property<int?>("IdIndentType")
                        .HasColumnType("int")
                        .HasComment("Вид на идентификатора");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int?>("IdNationality")
                        .HasColumnType("int")
                        .HasComment("Гражданство");

                    b.Property<int?>("IdProfessionalDirection")
                        .HasColumnType("int");

                    b.Property<int?>("IdQualificationLevel")
                        .HasColumnType("int")
                        .HasComment("Придобита квалификация");

                    b.Property<int?>("IdSex")
                        .HasColumnType("int")
                        .HasComment("Пол");

                    b.Property<int?>("IdSpeciality")
                        .HasColumnType("int");

                    b.Property<string>("Indent")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("ЕГН/ЛНЧ/ИДН");

                    b.Property<bool>("IsContactAllowed")
                        .HasColumnType("bit")
                        .HasComment("Съгласие за използване на информацията за контакт от НАПОО");

                    b.Property<bool>("IsDisabledPerson")
                        .HasColumnType("bit")
                        .HasComment("Лице с увреждания");

                    b.Property<bool>("IsDisadvantagedPerson")
                        .HasColumnType("bit")
                        .HasComment("Лице в неравностойно положение");

                    b.Property<string>("MigrationNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OldId")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Телефон");

                    b.Property<string>("SecondName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Презиме");

                    b.HasKey("IdClientCourse");

                    b.HasIndex("IdClient");

                    b.HasIndex("IdCourse");

                    b.HasIndex("IdProfessionalDirection");

                    b.HasIndex("IdSpeciality");

                    b.ToTable("Training_ClientCourse");

                    b.HasComment("Получател на услугата(обучаем) връзка с курс");
                });

            modelBuilder.Entity("Data.Models.Data.Training.ClientCourseDocument", b =>
                {
                    b.Property<int>("IdClientCourseDocument")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdClientCourseDocument"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DocumentDate")
                        .HasColumnType("datetime2")
                        .HasComment("Дата на регистрационен документ");

                    b.Property<string>("DocumentPrnNo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Фабричен номер");

                    b.Property<string>("DocumentProtocol")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Протокол");

                    b.Property<string>("DocumentRegNo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Регистрационен номер");

                    b.Property<string>("DocumentSerNo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Сериен номер");

                    b.Property<decimal?>("FinalResult")
                        .HasColumnType("decimal(3,2)")
                        .HasComment("Обща оценка от теория и практика");

                    b.Property<int?>("FinishedYear")
                        .HasColumnType("int")
                        .HasComment("Година на приключване");

                    b.Property<int>("IdClientCourse")
                        .HasColumnType("int")
                        .HasComment("Връзка с курс/обучаем");

                    b.Property<int?>("IdCourseProtocol")
                        .HasColumnType("int")
                        .HasComment("Връзка с протокол от курс за обучение");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int?>("IdDocumentSerialNumber")
                        .HasColumnType("int")
                        .HasComment("Връзка с фабричен номер на документ от печатница на МОН");

                    b.Property<int?>("IdDocumentStatus")
                        .HasColumnType("int")
                        .HasComment("Статус на документ за завършено обучение");

                    b.Property<int?>("IdDocumentType")
                        .HasColumnType("int")
                        .HasComment("Документи за завършено обучение");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int?>("IdOriginalClientCourseDocument")
                        .HasColumnType("int")
                        .HasComment("Връзка с оригиналния документ от курс за обучение");

                    b.Property<int?>("IdTypeOfRequestedDocument")
                        .HasColumnType("int")
                        .HasComment("Връзка с тип докумет към печатница на МОН");

                    b.Property<string>("MigrationNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OldId")
                        .HasColumnType("int");

                    b.Property<decimal?>("PracticeResult")
                        .HasColumnType("decimal(3,2)")
                        .HasComment("Оценка по практика");

                    b.Property<string>("QualificationLevel")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Степен");

                    b.Property<string>("QualificationName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Правоспособност");

                    b.Property<decimal?>("TheoryResult")
                        .HasColumnType("decimal(3,2)")
                        .HasComment("Оценка по теория");

                    b.HasKey("IdClientCourseDocument");

                    b.HasIndex("IdClientCourse");

                    b.HasIndex("IdCourseProtocol");

                    b.HasIndex("IdDocumentSerialNumber");

                    b.HasIndex("IdOriginalClientCourseDocument");

                    b.HasIndex("IdTypeOfRequestedDocument");

                    b.ToTable("Training_ClientCourseDocument");

                    b.HasComment("Издадени документи на курсисти");
                });

            modelBuilder.Entity("Data.Models.Data.Training.ClientCourseDocumentStatus", b =>
                {
                    b.Property<int>("IdClientCourseDocumentStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdClientCourseDocumentStatus"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdClientCourseDocument")
                        .HasColumnType("int")
                        .HasComment("Връзка с издадени документ на курсист");

                    b.Property<int>("IdClientDocumentStatus")
                        .HasColumnType("int")
                        .HasComment("Статус на документа за завършване на курсист");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SubmissionComment")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Коментар при подаване към НАПОО");

                    b.HasKey("IdClientCourseDocumentStatus");

                    b.HasIndex("IdClientCourseDocument");

                    b.ToTable("Training_ClientCourseDocumentStatus");

                    b.HasComment("История на статуса на документ за завършване на курсист");
                });

            modelBuilder.Entity("Data.Models.Data.Training.ClientCourseStatus", b =>
                {
                    b.Property<int>("IdClientCourseStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdClientCourseStatus"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdClientCourse")
                        .HasColumnType("int")
                        .HasComment("Връзка с Получател на услугата(обучаем) връзка с курс");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdFinishedType")
                        .HasColumnType("int")
                        .HasComment("Приключване на курс");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.HasKey("IdClientCourseStatus");

                    b.HasIndex("IdClientCourse");

                    b.ToTable("Training_ClientCourseStatus");

                    b.HasComment("История на статуса на завършване на курс за обучение от курсист");
                });

            modelBuilder.Entity("Data.Models.Data.Training.ClientRequiredDocument", b =>
                {
                    b.Property<int>("IdClientRequiredDocument")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdClientRequiredDocument"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Описание");

                    b.Property<DateTime?>("DocumentDate")
                        .HasColumnType("datetime2")
                        .HasComment("Дата на регистрационен документ");

                    b.Property<DateTime?>("DocumentOfficialDate")
                        .HasColumnType("datetime2")
                        .HasComment("Официална дата на документ");

                    b.Property<string>("DocumentPrnNo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Фабричен номер");

                    b.Property<string>("DocumentRegNo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Регистрационен номер");

                    b.Property<int?>("IdClientCourse")
                        .HasColumnType("int")
                        .HasComment("Връзка с курс/обучаем");

                    b.Property<int>("IdCourse")
                        .HasColumnType("int")
                        .HasComment("Връзка с Курс за обучение, предлагани от ЦПО");

                    b.Property<int>("IdCourseRequiredDocumentType")
                        .HasColumnType("int")
                        .HasComment("Тип задължителни документи за курс,курсист");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int?>("IdEducation")
                        .HasColumnType("int")
                        .HasComment("Образование:KeyType код - Education");

                    b.Property<int?>("IdMinimumQualificationLevel")
                        .HasColumnType("int")
                        .HasComment("Квалификационно ниво");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<bool>("IsBeforeDate")
                        .HasColumnType("bit")
                        .HasComment("Документа e след 2007 година");

                    b.Property<bool>("IsValid")
                        .HasColumnType("bit")
                        .HasComment("Документа е валиден");

                    b.Property<DateTime?>("IssueDocumentDate")
                        .HasColumnType("datetime2")
                        .HasComment("Дата на издаване на документа");

                    b.Property<string>("MigrationNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OldId")
                        .HasColumnType("int");

                    b.Property<string>("UploadedFileName")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasComment("Прикачен файл");

                    b.HasKey("IdClientRequiredDocument");

                    b.HasIndex("IdClientCourse");

                    b.HasIndex("IdCourse");

                    b.ToTable("Training_ClientRequiredDocument");

                    b.HasComment("Издадени документи на курсисти");
                });

            modelBuilder.Entity("Data.Models.Data.Training.Consulting", b =>
                {
                    b.Property<int>("IdConsulting")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdConsulting"), 1L, 1);

                    b.Property<decimal?>("Cost")
                        .HasColumnType("decimal(10,2)")
                        .HasComment("Цена (в лева за консултирано лице)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdConsultingClient")
                        .HasColumnType("int")
                        .HasComment("Връзка с консултирано лице");

                    b.Property<int?>("IdConsultingReceiveType")
                        .HasColumnType("int")
                        .HasComment("Начин на предоставяне на услугата");

                    b.Property<int?>("IdConsultingType")
                        .HasColumnType("int")
                        .HasComment("Вид на дейността по консултиране");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.HasKey("IdConsulting");

                    b.HasIndex("IdConsultingClient");

                    b.ToTable("Training_Consulting");

                    b.HasComment("Консултация по дейности, предлагани от ЦИПО");
                });

            modelBuilder.Entity("Data.Models.Data.Training.ConsultingClient", b =>
                {
                    b.Property<int>("IdConsultingClient")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdConsultingClient"), 1L, 1);

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Адрес");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2")
                        .HasComment("Дата на раждане");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("E-mail адрес");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2")
                        .HasComment("Дата на приключване на консултацията");

                    b.Property<string>("FamilyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Фамилия");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Име");

                    b.Property<int>("IdAimAtCIPOServicesType")
                        .HasColumnType("int")
                        .HasComment("Вид на насочен към услугите на ЦИПО");

                    b.Property<int?>("IdAssignType")
                        .HasColumnType("int")
                        .HasComment("Основен източник на финансиране");

                    b.Property<int>("IdCandidateProvider")
                        .HasColumnType("int")
                        .HasComment("Връзка с CandidateProvider");

                    b.Property<int>("IdClient")
                        .HasColumnType("int")
                        .HasComment("Връзка с  Получател на услугата(обучаем)");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int?>("IdFinishedType")
                        .HasColumnType("int")
                        .HasComment("Приключване на курс");

                    b.Property<int?>("IdIndentType")
                        .HasColumnType("int")
                        .HasComment("Вид на идентификатора");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int?>("IdNationality")
                        .HasColumnType("int")
                        .HasComment("Гражданство");

                    b.Property<int?>("IdRegistrationAtLabourOfficeType")
                        .HasColumnType("int")
                        .HasComment("Вид на регистрация в бюрото по труда");

                    b.Property<int?>("IdSex")
                        .HasColumnType("int")
                        .HasComment("Пол");

                    b.Property<string>("Indent")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasComment("ЕГН/ЛНЧ/ИДН");

                    b.Property<bool>("IsContactAllowed")
                        .HasColumnType("bit")
                        .HasComment("Съгласие за използване на информацията за контакт от НАПОО");

                    b.Property<bool>("IsDisabledPerson")
                        .HasColumnType("bit")
                        .HasComment("Лице с увреждания");

                    b.Property<bool>("IsDisadvantagedPerson")
                        .HasColumnType("bit")
                        .HasComment("Лице в неравностойно положение");

                    b.Property<bool>("IsEmployedPerson")
                        .HasColumnType("bit")
                        .HasComment("Заето лице");

                    b.Property<bool>("IsStudent")
                        .HasColumnType("bit")
                        .HasComment("Учащ");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Телефон");

                    b.Property<string>("SecondName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Презиме");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2")
                        .HasComment("Дата на стартиране на консултацията");

                    b.HasKey("IdConsultingClient");

                    b.HasIndex("IdCandidateProvider");

                    b.HasIndex("IdClient");

                    b.ToTable("Training_ConsultingClient");

                    b.HasComment("Получател на услугата(консултиран) по дейност от ЦИПО");
                });

            modelBuilder.Entity("Data.Models.Data.Training.ConsultingClientRequiredDocument", b =>
                {
                    b.Property<int>("IdConsultingClientRequiredDocument")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdConsultingClientRequiredDocument"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Описание");

                    b.Property<int>("IdConsultingClient")
                        .HasColumnType("int")
                        .HasComment("Връзка с консултирано лице");

                    b.Property<int>("IdConsultingRequiredDocumentType")
                        .HasColumnType("int")
                        .HasComment("Тип задължителни документи за курс,курсист");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UploadedFileName")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasComment("Прикачен файл");

                    b.HasKey("IdConsultingClientRequiredDocument");

                    b.HasIndex("IdConsultingClient");

                    b.ToTable("Training_ConsultingClientRequiredDocument");

                    b.HasComment("Издадени документи на консултирано лице");
                });

            modelBuilder.Entity("Data.Models.Data.Training.ConsultingDocumentUploadedFile", b =>
                {
                    b.Property<int>("IdConsultingDocumentUploadedFile")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdConsultingDocumentUploadedFile"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdConsultingClient")
                        .HasColumnType("int")
                        .HasComment("Връзка с консултирано лице");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UploadedFileName")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasComment("Прикачен файл");

                    b.HasKey("IdConsultingDocumentUploadedFile");

                    b.HasIndex("IdConsultingClient");

                    b.ToTable("Training_ConsultingDocumentUploadedFile");

                    b.HasComment("Прикачени файлове за документи на консултирано лице");
                });

            modelBuilder.Entity("Data.Models.Data.Training.ConsultingPremises", b =>
                {
                    b.Property<int>("IdConsultingPremises")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdConsultingPremises"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdConsultingClient")
                        .HasColumnType("int")
                        .HasComment("Връзка с консултирано лице");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int>("IdPremises")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.HasKey("IdConsultingPremises");

                    b.HasIndex("IdConsultingClient");

                    b.HasIndex("IdPremises");

                    b.ToTable("Training_ConsultingPremises");

                    b.HasComment("Връзка между MTB и консултация по дейност");
                });

            modelBuilder.Entity("Data.Models.Data.Training.ConsultingTrainer", b =>
                {
                    b.Property<int>("IdConsultingTrainer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdConsultingTrainer"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdConsultingClient")
                        .HasColumnType("int")
                        .HasComment("Връзка с консултирано лице");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int>("IdTrainer")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.HasKey("IdConsultingTrainer");

                    b.HasIndex("IdConsultingClient");

                    b.HasIndex("IdTrainer");

                    b.ToTable("Training_ConsultingTrainer");

                    b.HasComment("Връзка между консултант и дейност по консултиране");
                });

            modelBuilder.Entity("Data.Models.Data.Training.Course", b =>
                {
                    b.Property<int>("IdCourse")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCourse"), 1L, 1);

                    b.Property<string>("AdditionalNotes")
                        .HasColumnType("ntext")
                        .HasComment("Други пояснения");

                    b.Property<decimal?>("Cost")
                        .HasColumnType("decimal(10,2)")
                        .HasComment("Цена (в лева за един курсист)");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Наименование на курса");

                    b.Property<string>("CourseNameEN")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Наименование на курса на латиница");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DisabilityCount")
                        .HasColumnType("int")
                        .HasComment("Брой обучаеми в неравностойно положение (параграф 1 – т. 4а от ЗНЗ)");

                    b.Property<int?>("DurationHours")
                        .HasColumnType("int")
                        .HasComment("Продължителност");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2")
                        .HasComment("Очаквана дата за завършване на курса");

                    b.Property<DateTime?>("ExamPracticeDate")
                        .HasColumnType("datetime2")
                        .HasComment("Очаквана дата за изпит по практика");

                    b.Property<DateTime?>("ExamTheoryDate")
                        .HasColumnType("datetime2")
                        .HasComment("Очаквана дата за изпит по теория");

                    b.Property<int?>("IdAssignType")
                        .HasColumnType("int")
                        .HasComment("Основен източник на финансиране");

                    b.Property<int?>("IdCandidateProvider")
                        .HasColumnType("int")
                        .HasComment("Връзка с CandidateProvider");

                    b.Property<int?>("IdCandidateProviderPremises")
                        .HasColumnType("int")
                        .HasComment("Метериална техническа база");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int?>("IdFormEducation")
                        .HasColumnType("int")
                        .HasComment("Форма на обучение");

                    b.Property<int?>("IdLegalCapacityOrdinanceType")
                        .HasColumnType("int")
                        .HasComment("Вид на наредбата за правоспособност");

                    b.Property<int?>("IdLocation")
                        .HasColumnType("int")
                        .HasComment("Населено място");

                    b.Property<int?>("IdMeasureType")
                        .HasColumnType("int")
                        .HasComment("Вид");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int?>("IdProgram")
                        .HasColumnType("int")
                        .HasComment("Връзка с Програмa за обучение, предлагани от ЦПО");

                    b.Property<int?>("IdStatus")
                        .HasColumnType("int")
                        .HasComment("Статус на курса");

                    b.Property<int?>("IdTrainingCourseType")
                        .HasColumnType("int")
                        .HasComment("Вид на курса за обучение");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit")
                        .HasComment("Дали курсът е архивиран");

                    b.Property<int?>("MandatoryHours")
                        .HasColumnType("int")
                        .HasComment("Задължителни учебни ч.(бр.)");

                    b.Property<string>("MigrationNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OldId")
                        .HasColumnType("int");

                    b.Property<int?>("SelectableHours")
                        .HasColumnType("int")
                        .HasComment("Избираеми учебни ч.(бр.)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2")
                        .HasComment("Очаквана дата за започване на курса");

                    b.Property<DateTime?>("SubscribeDate")
                        .HasColumnType("datetime2")
                        .HasComment("Крайна дата за записване");

                    b.HasKey("IdCourse");

                    b.HasIndex("IdCandidateProvider");

                    b.HasIndex("IdCandidateProviderPremises");

                    b.HasIndex("IdLocation");

                    b.HasIndex("IdProgram");

                    b.ToTable("Training_Course");

                    b.HasComment("Курс за обучение, предлагани от ЦПО");
                });

            modelBuilder.Entity("Data.Models.Data.Training.CourseChecking", b =>
                {
                    b.Property<int>("IdCourseChecking")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCourseChecking"), 1L, 1);

                    b.Property<bool>("CheckDone")
                        .HasColumnType("bit")
                        .HasComment("Извършена проверка от експерт на НАПОО");

                    b.Property<DateTime?>("CheckingDate")
                        .HasColumnType("datetime2")
                        .HasComment("Дата на проверка");

                    b.Property<string>("Comment")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasComment("Коментар");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCourse")
                        .HasColumnType("int")
                        .HasComment("Връзка с курс за обучение");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int?>("IdFollowUpControl")
                        .HasColumnType("int")
                        .HasComment("Последващ контрол, изпълняван от служител/и на НАПОО");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.HasKey("IdCourseChecking");

                    b.HasIndex("IdCourse");

                    b.HasIndex("IdFollowUpControl");

                    b.ToTable("Training_CourseChecking");
                });

            modelBuilder.Entity("Data.Models.Data.Training.CourseCommissionMember", b =>
                {
                    b.Property<int>("IdCourseCommissionMember")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCourseCommissionMember"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FamilyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Фамилия");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasComment("Име");

                    b.Property<int>("IdCourse")
                        .HasColumnType("int")
                        .HasComment("Връзка с Курса за обучение, предлаган от ЦПО");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<bool>("IsChairman")
                        .HasColumnType("bit")
                        .HasComment("Дали е председател на комисия");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecondName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Презиме");

                    b.HasKey("IdCourseCommissionMember");

                    b.HasIndex("IdCourse");

                    b.ToTable("Training_CourseCommissionMember");

                    b.HasComment("Член на изпитна комисия към курс за обучение");
                });

            modelBuilder.Entity("Data.Models.Data.Training.CourseDocumentUploadedFile", b =>
                {
                    b.Property<int>("IdCourseDocumentUploadedFile")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCourseDocumentUploadedFile"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdClientCourseDocument")
                        .HasColumnType("int")
                        .HasComment("Връзка с издадени документи на курсисти");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UploadedFileName")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasComment("Прикачен файл");

                    b.HasKey("IdCourseDocumentUploadedFile");

                    b.HasIndex("IdClientCourseDocument");

                    b.ToTable("Training_CourseDocumentUploadedFile");

                    b.HasComment("Прикачени файлове за документи на курсисти");
                });

            modelBuilder.Entity("Data.Models.Data.Training.CourseOrder", b =>
                {
                    b.Property<int>("IdCourseOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCourseOrder"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Описание на заповед");

                    b.Property<int>("IdCourse")
                        .HasColumnType("int")
                        .HasComment("Връзка с курс за обучение, предлагани от ЦПО");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2")
                        .HasComment("Дата на заповед");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Номер на заповед");

                    b.Property<string>("UploadedFileName")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasComment("Прикачен файл");

                    b.HasKey("IdCourseOrder");

                    b.HasIndex("IdCourse");

                    b.ToTable("Training_CourseOrder");

                    b.HasComment("Заповед към курс за обучение");
                });

            modelBuilder.Entity("Data.Models.Data.Training.CourseProtocol", b =>
                {
                    b.Property<int>("IdCourseProtocol")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCourseProtocol"), 1L, 1);

                    b.Property<DateTime?>("CourseProtocolDate")
                        .IsRequired()
                        .HasColumnType("datetime2")
                        .HasComment("Дата на протокол");

                    b.Property<string>("CourseProtocolNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Номер на протокол");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCandidateProvider")
                        .HasColumnType("int")
                        .HasComment("Връзка с ЦПО");

                    b.Property<int>("IdCourse")
                        .HasColumnType("int")
                        .HasComment("Връзка с курс за обучение, предлагани от ЦПО");

                    b.Property<int?>("IdCourseCommissionMember")
                        .HasColumnType("int")
                        .HasComment("Връзка с член на изпитна комисия към курс за обучение");

                    b.Property<int>("IdCourseProtocolType")
                        .HasColumnType("int")
                        .HasComment("Вид на протокол");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UploadedFileName")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasComment("Прикачен файл");

                    b.HasKey("IdCourseProtocol");

                    b.HasIndex("IdCandidateProvider");

                    b.HasIndex("IdCourse");

                    b.HasIndex("IdCourseCommissionMember");

                    b.ToTable("Training_CourseProtocol");

                    b.HasComment("Протокол към курс за обучение, предлагани от ЦПО");
                });

            modelBuilder.Entity("Data.Models.Data.Training.CourseProtocolGrade", b =>
                {
                    b.Property<int>("IdCourseProtocolGrade")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCourseProtocolGrade"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("Grade")
                        .HasColumnType("float")
                        .HasComment("Оценка от протокол от курс за обучение");

                    b.Property<int>("IdClientCourse")
                        .HasColumnType("int")
                        .HasComment("Връзка с протокол към курс за обучение, предлаган от ЦПО");

                    b.Property<int>("IdCourseProtocol")
                        .HasColumnType("int")
                        .HasComment("Връзка с протокол към курс за обучение, предлаган от ЦПО");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.HasKey("IdCourseProtocolGrade");

                    b.HasIndex("IdClientCourse");

                    b.HasIndex("IdCourseProtocol");

                    b.ToTable("Training_CourseProtocolGrade");

                    b.HasComment("Протокол към курс за обучение, предлагани от ЦПО");
                });

            modelBuilder.Entity("Data.Models.Data.Training.CourseSchedule", b =>
                {
                    b.Property<int>("IdCourseSchedule")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCourseSchedule"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Hours")
                        .HasColumnType("float");

                    b.Property<int?>("IdCandidateProviderPremises")
                        .HasColumnType("int");

                    b.Property<int?>("IdCandidateProviderTrainer")
                        .HasColumnType("int");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int>("IdTrainingCurriculum")
                        .HasColumnType("int");

                    b.Property<int>("IdTrainingScheduleType")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ScheduleDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeTo")
                        .HasColumnType("datetime2");

                    b.HasKey("IdCourseSchedule");

                    b.HasIndex("IdCandidateProviderPremises");

                    b.HasIndex("IdCandidateProviderTrainer");

                    b.HasIndex("IdTrainingCurriculum");

                    b.ToTable("Training_CourseSchedule");
                });

            modelBuilder.Entity("Data.Models.Data.Training.CourseSubject", b =>
                {
                    b.Property<int>("IdCourseSubject")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCourseSubject"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCourse")
                        .HasColumnType("int")
                        .HasComment("Връзка с курс за обучение, предлагани от ЦПО");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int>("IdProfessionalTraining")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("PracticeHours")
                        .HasColumnType("float")
                        .HasComment("Сумарен брой часове по практика");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("TheoryHours")
                        .HasColumnType("float")
                        .HasComment("Сумарен брой часове по теория");

                    b.HasKey("IdCourseSubject");

                    b.HasIndex("IdCourse");

                    b.ToTable("Training_CourseSubject");

                    b.HasComment("Предмет от програма за обучение към курс");
                });

            modelBuilder.Entity("Data.Models.Data.Training.CourseSubjectGrade", b =>
                {
                    b.Property<int>("IdCourseSubjectGrade")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCourseSubjectGrade"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdClientCourse")
                        .HasColumnType("int")
                        .HasComment("Връзка с Получател на услугата(обучаем) връзка с курс");

                    b.Property<int?>("IdCourseSubject")
                        .HasColumnType("int")
                        .HasComment("Предмет от програма за обучение към курс");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("PracticeGrade")
                        .HasColumnType("float")
                        .HasComment("Оценка по предмет за практика");

                    b.Property<double?>("TheoryGrade")
                        .HasColumnType("float")
                        .HasComment("Оценка по предмет за теория");

                    b.HasKey("IdCourseSubjectGrade");

                    b.HasIndex("IdClientCourse");

                    b.HasIndex("IdCourseSubject");

                    b.ToTable("Training_CourseSubjectGrade");

                    b.HasComment("Оценка по предмет за даден курсист");
                });

            modelBuilder.Entity("Data.Models.Data.Training.PremisesCourse", b =>
                {
                    b.Property<int>("IdPremisesCourse")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPremisesCourse"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCourse")
                        .HasColumnType("int")
                        .HasComment("Връзка с Курс за обучение, предлагани от ЦПО");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int>("IdPremises")
                        .HasColumnType("int");

                    b.Property<int?>("IdТraininType")
                        .HasColumnType("int")
                        .HasComment("Вид обучение");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.HasKey("IdPremisesCourse");

                    b.HasIndex("IdCourse");

                    b.HasIndex("IdPremises");

                    b.ToTable("Training_PremisesCourse");

                    b.HasComment("Връзка между MTB и курс");
                });

            modelBuilder.Entity("Data.Models.Data.Training.Program", b =>
                {
                    b.Property<int>("IdProgram")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdProgram"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCandidateProvider")
                        .HasColumnType("int")
                        .HasComment("Връзка с CPO,CIPO - Обучаваща институция");

                    b.Property<int>("IdCourseType")
                        .HasColumnType("int")
                        .HasComment("Вид на обучение");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int?>("IdFrameworkProgram")
                        .HasColumnType("int")
                        .HasComment("Рамкова програма");

                    b.Property<int?>("IdLegalCapacityOrdinanceType")
                        .HasColumnType("int")
                        .HasComment("Вид на наредбата за правоспособност");

                    b.Property<int>("IdMinimumLevelEducation")
                        .HasColumnType("int")
                        .HasComment("Минимално образователно равнище от рамкова програма");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int>("IdSpeciality")
                        .HasColumnType("int")
                        .HasComment("Специалност");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Дали е записът е изтрит");

                    b.Property<int>("MandatoryHours")
                        .HasColumnType("int")
                        .HasComment("Задължителни учебни ч.(бр.)");

                    b.Property<string>("MigrationNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OldId")
                        .HasColumnType("int");

                    b.Property<string>("ProgramName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Наименование на програма");

                    b.Property<string>("ProgramNote")
                        .HasColumnType("ntext")
                        .HasComment("Допълнителна информация");

                    b.Property<string>("ProgramNumber")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Номер на програма");

                    b.Property<int>("SelectableHours")
                        .HasColumnType("int")
                        .HasComment("Избираеми учебни ч.(бр.)");

                    b.HasKey("IdProgram");

                    b.HasIndex("IdCandidateProvider");

                    b.HasIndex("IdFrameworkProgram");

                    b.HasIndex("IdSpeciality");

                    b.ToTable("Training_Program");

                    b.HasComment("Програмa за обучение, предлагани от ЦПО");
                });

            modelBuilder.Entity("Data.Models.Data.Training.TrainerCourse", b =>
                {
                    b.Property<int>("IdTrainerCourse")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTrainerCourse"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCourse")
                        .HasColumnType("int")
                        .HasComment("Връзка с Курс за обучение, предлагани от ЦПО");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int>("IdTrainer")
                        .HasColumnType("int");

                    b.Property<int?>("IdТraininType")
                        .HasColumnType("int")
                        .HasComment("Вид обучение");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.HasKey("IdTrainerCourse");

                    b.HasIndex("IdCourse");

                    b.HasIndex("IdTrainer");

                    b.ToTable("Training_TrainerCourse");

                    b.HasComment("Връзка между лектор и курс");
                });

            modelBuilder.Entity("Data.Models.Data.Training.TrainingCurriculum", b =>
                {
                    b.Property<int>("IdTrainingCurriculum")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTrainingCurriculum"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IdCandidateCurriculum")
                        .HasColumnType("int");

                    b.Property<int>("IdCandidateProviderSpeciality")
                        .HasColumnType("int");

                    b.Property<int?>("IdCourse")
                        .HasColumnType("int");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int>("IdProfessionalTraining")
                        .HasColumnType("int");

                    b.Property<int>("IdProgram")
                        .HasColumnType("int");

                    b.Property<string>("MigrationNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OldId")
                        .HasColumnType("int");

                    b.Property<double?>("Practice")
                        .HasColumnType("float");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<double?>("Theory")
                        .HasColumnType("float");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.HasKey("IdTrainingCurriculum");

                    b.HasIndex("IdCandidateCurriculum");

                    b.HasIndex("IdCandidateProviderSpeciality");

                    b.HasIndex("IdCourse");

                    b.HasIndex("IdProgram");

                    b.ToTable("Training_Curriculum");
                });

            modelBuilder.Entity("Data.Models.Data.Training.TrainingCurriculumERU", b =>
                {
                    b.Property<int>("IdTrainingCurriculumERU")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTrainingCurriculumERU"), 1L, 1);

                    b.Property<int>("IdERU")
                        .HasColumnType("int");

                    b.Property<int>("IdTrainingCurriculum")
                        .HasColumnType("int");

                    b.HasKey("IdTrainingCurriculumERU");

                    b.HasIndex("IdERU");

                    b.HasIndex("IdTrainingCurriculum");

                    b.ToTable("Training_CurriculumERU");
                });

            modelBuilder.Entity("Data.Models.Data.Training.ValidationClient", b =>
                {
                    b.Property<int>("IdValidationClient")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdValidationClient"), 1L, 1);

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Адрес");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2")
                        .HasComment("Дата на раждане");

                    b.Property<decimal?>("Cost")
                        .HasColumnType("decimal(10,2)")
                        .HasComment("Цена (в лева за консултирано лице)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("E-mail адрес");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2")
                        .HasComment("Дата на приключване на консултацията");

                    b.Property<DateTime?>("ExamPracticeDate")
                        .HasColumnType("datetime2")
                        .HasComment("Очаквана дата за изпит по практика");

                    b.Property<DateTime?>("ExamTheoryDate")
                        .HasColumnType("datetime2")
                        .HasComment("Очаквана дата за изпит по теория");

                    b.Property<string>("FamilyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Фамилия");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Име");

                    b.Property<int?>("IdAssignType")
                        .HasColumnType("int")
                        .HasComment("Основен източник на финансиране");

                    b.Property<int>("IdCandidateProvider")
                        .HasColumnType("int")
                        .HasComment("Връзка с CandidateProvider");

                    b.Property<int?>("IdCityOfBirth")
                        .HasColumnType("int")
                        .HasComment("Месторождение (населено място)");

                    b.Property<int>("IdClient")
                        .HasColumnType("int")
                        .HasComment("Връзка с  Получател на услугата(обучаем)");

                    b.Property<int?>("IdCountryOfBirth")
                        .HasColumnType("int")
                        .HasComment("Месторождение (държава)");

                    b.Property<int>("IdCourseType")
                        .HasColumnType("int")
                        .HasComment("Вид на курса за обучение");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int?>("IdFinishedType")
                        .HasColumnType("int")
                        .HasComment("Приключване на курс");

                    b.Property<int?>("IdFrameworkProgram")
                        .HasColumnType("int")
                        .HasComment("Рамкова програма");

                    b.Property<int?>("IdIndentType")
                        .HasColumnType("int")
                        .HasComment("Вид на идентификатора");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int?>("IdNationality")
                        .HasColumnType("int")
                        .HasComment("Гражданство");

                    b.Property<int?>("IdQualificationLevel")
                        .HasColumnType("int")
                        .HasComment("Придобита квалификация");

                    b.Property<int?>("IdSex")
                        .HasColumnType("int")
                        .HasComment("Пол");

                    b.Property<int?>("IdSpeciality")
                        .HasColumnType("int");

                    b.Property<int?>("IdStatus")
                        .HasColumnType("int")
                        .HasComment("Статус на валидирането");

                    b.Property<string>("Indent")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("ЕГН/ЛНЧ/ИДН");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit")
                        .HasComment("Дали валидирането е архивирано");

                    b.Property<bool>("IsContactAllowed")
                        .HasColumnType("bit")
                        .HasComment("Съгласие за използване на информацията за контакт от НАПОО");

                    b.Property<bool>("IsDisabledPerson")
                        .HasColumnType("bit")
                        .HasComment("Лице с увреждания");

                    b.Property<bool>("IsDisadvantagedPerson")
                        .HasColumnType("bit")
                        .HasComment("Лице в неравностойно положение");

                    b.Property<string>("MigrationNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OldId")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Телефон");

                    b.Property<string>("SecondName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Презиме");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2")
                        .HasComment("Дата на стартиране на консултацията");

                    b.HasKey("IdValidationClient");

                    b.HasIndex("IdCandidateProvider");

                    b.HasIndex("IdClient");

                    b.HasIndex("IdFrameworkProgram");

                    b.HasIndex("IdSpeciality");

                    b.ToTable("Training_ValidationClient");

                    b.HasComment("Получател на услугата по валидиране на специалност");
                });

            modelBuilder.Entity("Data.Models.Data.Training.ValidationClientDocument", b =>
                {
                    b.Property<int>("IdValidationClientDocument")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdValidationClientDocument"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DocumentDate")
                        .HasColumnType("datetime2")
                        .HasComment("Дата на регистрационен документ");

                    b.Property<string>("DocumentProtocol")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Протокол");

                    b.Property<string>("DocumentRegNo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Регистрационен номер");

                    b.Property<decimal?>("FinalResult")
                        .HasColumnType("decimal(3,2)")
                        .HasComment("Обща оценка от теория и практика");

                    b.Property<int?>("FinishedYear")
                        .HasColumnType("int")
                        .HasComment("Година на приключване");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int?>("IdDocumentSerialNumber")
                        .HasColumnType("int")
                        .HasComment("Връзка с фабричен номер на документ от печатница на МОН");

                    b.Property<int?>("IdDocumentStatus")
                        .HasColumnType("int")
                        .HasComment("Статус на документ за завършено обучение");

                    b.Property<int?>("IdDocumentType")
                        .HasColumnType("int")
                        .HasComment("Документи за завършено обучение");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int?>("IdOriginalValidationClientDocument")
                        .HasColumnType("int")
                        .HasComment("Връзка с оригиналния документ от курс за валидиране");

                    b.Property<int?>("IdTypeOfRequestedDocument")
                        .HasColumnType("int")
                        .HasComment("Връзка с тип докумет към печатница на МОН");

                    b.Property<int>("IdValidationClient")
                        .HasColumnType("int")
                        .HasComment("Връзка с обучаем");

                    b.Property<int?>("IdValidationProtocol")
                        .HasColumnType("int")
                        .HasComment("Връзка с протокол от курс за валидиране");

                    b.Property<string>("MigrationNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OldId")
                        .HasColumnType("int");

                    b.Property<decimal?>("PracticeResult")
                        .HasColumnType("decimal(3,2)")
                        .HasComment("Оценка по практика");

                    b.Property<string>("QualificationLevel")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Степен");

                    b.Property<decimal?>("TheoryResult")
                        .HasColumnType("decimal(3,2)")
                        .HasComment("Оценка по теория");

                    b.HasKey("IdValidationClientDocument");

                    b.HasIndex("IdDocumentSerialNumber");

                    b.HasIndex("IdOriginalValidationClientDocument");

                    b.HasIndex("IdTypeOfRequestedDocument");

                    b.HasIndex("IdValidationClient");

                    b.HasIndex("IdValidationProtocol");

                    b.ToTable("Training_ValidationClientDocument");

                    b.HasComment("Издадени документи на клиенти по процедура за валидиране");
                });

            modelBuilder.Entity("Data.Models.Data.Training.ValidationClientDocumentStatus", b =>
                {
                    b.Property<int>("IdValidationClientDocumentStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdValidationClientDocumentStatus"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdClientDocumentStatus")
                        .HasColumnType("int")
                        .HasComment("Статус на документа за завършване на курсист");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int>("IdValidationClientDocument")
                        .HasColumnType("int")
                        .HasComment("Връзка с издаден документ на курсист за валидиране");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SubmissionComment")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Коментар при подаване към НАПОО");

                    b.HasKey("IdValidationClientDocumentStatus");

                    b.HasIndex("IdValidationClientDocument");

                    b.ToTable("Training_ValidationClientDocumentStatus");

                    b.HasComment("История на статуса на документ за завършване на курсист за валидиране");
                });

            modelBuilder.Entity("Data.Models.Data.Training.ValidationClientRequiredDocument", b =>
                {
                    b.Property<int>("IdValidationClientRequiredDocument")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdValidationClientRequiredDocument"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Описание");

                    b.Property<DateTime?>("DocumentDate")
                        .HasColumnType("datetime2")
                        .HasComment("Дата на регистрационен документ");

                    b.Property<DateTime?>("DocumentOfficialDate")
                        .HasColumnType("datetime2")
                        .HasComment("Официална дата на документ");

                    b.Property<string>("DocumentPrnNo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Фабричен номер");

                    b.Property<string>("DocumentRegNo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Регистрационен номер");

                    b.Property<int>("IdCourseRequiredDocumentType")
                        .HasColumnType("int")
                        .HasComment("Тип задължителни документи за курс,курсист");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int?>("IdEducation")
                        .HasColumnType("int")
                        .HasComment("Образование:KeyType код - Education");

                    b.Property<int?>("IdMinimumQualificationLevel")
                        .HasColumnType("int")
                        .HasComment("Квалификационно ниво");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int>("IdValidationClient")
                        .HasColumnType("int")
                        .HasComment("Връзка с Курс за валидиране");

                    b.Property<bool>("IsBeforeDate")
                        .HasColumnType("bit")
                        .HasComment("Документа e след 2007 година");

                    b.Property<bool>("IsValid")
                        .HasColumnType("bit")
                        .HasComment("Документа е валиден");

                    b.Property<DateTime?>("IssueDocumentDate")
                        .HasColumnType("datetime2")
                        .HasComment("Дата на издаване на документа");

                    b.Property<string>("MigrationNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OldId")
                        .HasColumnType("int");

                    b.Property<string>("UploadedFileName")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasComment("Прикачен файл");

                    b.HasKey("IdValidationClientRequiredDocument");

                    b.HasIndex("IdValidationClient");

                    b.ToTable("Training_ValidationClientRequiredDocument");

                    b.HasComment("Издадени документи на курсисти за курс по валидиране");
                });

            modelBuilder.Entity("Data.Models.Data.Training.ValidationCommissionMember", b =>
                {
                    b.Property<int>("IdValidationCommissionMember")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdValidationCommissionMember"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FamilyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Фамилия");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasComment("Име");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int>("IdValidationClient")
                        .HasColumnType("int")
                        .HasComment("Връзка с клиента по процедура за валидиране");

                    b.Property<bool>("IsChairman")
                        .HasColumnType("bit")
                        .HasComment("Дали е председател на комисия");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecondName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Презиме");

                    b.HasKey("IdValidationCommissionMember");

                    b.HasIndex("IdValidationClient");

                    b.ToTable("Training_ValidationCommissionMember");

                    b.HasComment("Членове на изпитна комисия към процедура за валидиране");
                });

            modelBuilder.Entity("Data.Models.Data.Training.ValidationCompetency", b =>
                {
                    b.Property<int>("IdValidationCompetency")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdValidationCompetency"), 1L, 1);

                    b.Property<string>("Competency")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Компетентност");

                    b.Property<int>("CompetencyNumber")
                        .HasColumnType("int")
                        .HasComment("Номер на компетентност");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int>("IdValidationClient")
                        .HasColumnType("int")
                        .HasComment("Връзка с обучаем от курс за валидиране");

                    b.Property<bool>("IsCompetencyRecognized")
                        .HasColumnType("bit")
                        .HasComment("Дали се признава компетентността");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.HasKey("IdValidationCompetency");

                    b.HasIndex("IdValidationClient");

                    b.ToTable("Training_ValidationCompetency");

                    b.HasComment("Компетентност към курс за валидиране");
                });

            modelBuilder.Entity("Data.Models.Data.Training.ValidationCurriculum", b =>
                {
                    b.Property<int>("IdValidationCurriculum")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdValidationCurriculum"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCandidateProviderSpeciality")
                        .HasColumnType("int");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int>("IdProfessionalTraining")
                        .HasColumnType("int");

                    b.Property<int>("IdValidationClient")
                        .HasColumnType("int");

                    b.Property<string>("MigrationNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OldId")
                        .HasColumnType("int");

                    b.Property<double?>("Practice")
                        .HasColumnType("float");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<double?>("Theory")
                        .HasColumnType("float");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.HasKey("IdValidationCurriculum");

                    b.HasIndex("IdCandidateProviderSpeciality");

                    b.HasIndex("IdValidationClient");

                    b.ToTable("Training_ValidationCurriculum");
                });

            modelBuilder.Entity("Data.Models.Data.Training.ValidationCurriculumERU", b =>
                {
                    b.Property<int>("IdValidationCurriculumERU")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdValidationCurriculumERU"), 1L, 1);

                    b.Property<int>("IdERU")
                        .HasColumnType("int");

                    b.Property<int>("IdValidationCurriculum")
                        .HasColumnType("int");

                    b.HasKey("IdValidationCurriculumERU");

                    b.HasIndex("IdERU");

                    b.HasIndex("IdValidationCurriculum");

                    b.ToTable("Training_ValidationCurriculumERU");
                });

            modelBuilder.Entity("Data.Models.Data.Training.ValidationDocumentUploadedFile", b =>
                {
                    b.Property<int>("IdValidationDocumentUploadedFile")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdValidationDocumentUploadedFile"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int>("IdValidationClientDocument")
                        .HasColumnType("int")
                        .HasComment("Връзка с издадени документи на курсисти");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UploadedFileName")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasComment("Прикачен файл");

                    b.HasKey("IdValidationDocumentUploadedFile");

                    b.HasIndex("IdValidationClientDocument");

                    b.ToTable("Training_ValidationDocumentUploadedFile");

                    b.HasComment("Прикачени файлове за документи на курсисти за процедура по валидиране");
                });

            modelBuilder.Entity("Data.Models.Data.Training.ValidationOrder", b =>
                {
                    b.Property<int>("IdValidationOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdValidationOrder"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Описание на заповед");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int>("IdValidationClient")
                        .HasColumnType("int")
                        .HasComment("Връзка с курс за валидиране");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2")
                        .HasComment("Дата на заповед");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Номер на заповед");

                    b.Property<string>("UploadedFileName")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasComment("Прикачен файл");

                    b.HasKey("IdValidationOrder");

                    b.HasIndex("IdValidationClient");

                    b.ToTable("Training_ValidationOrder");

                    b.HasComment("Заповед към курс за валидиране");
                });

            modelBuilder.Entity("Data.Models.Data.Training.ValidationPremises", b =>
                {
                    b.Property<int>("IdValidationPremises")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdValidationPremises"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int>("IdPremises")
                        .HasColumnType("int");

                    b.Property<int>("IdValidationClient")
                        .HasColumnType("int")
                        .HasComment("Връзка с Курс за валидиране");

                    b.Property<int?>("IdТrainingType")
                        .HasColumnType("int")
                        .HasComment("Вид обучение");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.HasKey("IdValidationPremises");

                    b.HasIndex("IdPremises");

                    b.HasIndex("IdValidationClient");

                    b.ToTable("Training_ValidationPremises");

                    b.HasComment("Връзка между MTB и курс за валидиране");
                });

            modelBuilder.Entity("Data.Models.Data.Training.ValidationProtocol", b =>
                {
                    b.Property<int>("IdValidationProtocol")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdValidationProtocol"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCandidateProvider")
                        .HasColumnType("int")
                        .HasComment("Връзка с ЦПО");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int>("IdValidationClient")
                        .HasColumnType("int")
                        .HasComment("Връзка с клиент по процедура за валидиране");

                    b.Property<int?>("IdValidationCommissionMember")
                        .HasColumnType("int")
                        .HasComment("Връзка с член на изпитна комисия към курс за валидиране");

                    b.Property<int>("IdValidationProtocolType")
                        .HasColumnType("int")
                        .HasComment("Вид на протокол");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UploadedFileName")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasComment("Прикачен файл");

                    b.Property<DateTime?>("ValidationProtocolDate")
                        .IsRequired()
                        .HasColumnType("datetime2")
                        .HasComment("Дата на протокол");

                    b.Property<string>("ValidationProtocolNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Номер на протокол");

                    b.HasKey("IdValidationProtocol");

                    b.HasIndex("IdCandidateProvider");

                    b.HasIndex("IdValidationClient");

                    b.HasIndex("IdValidationCommissionMember");

                    b.ToTable("Training_ValidationProtocol");

                    b.HasComment("Протокол към процедура за валидиране");
                });

            modelBuilder.Entity("Data.Models.Data.Training.ValidationProtocolGrade", b =>
                {
                    b.Property<int>("IdValidationProtocolGrade")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdValidationProtocolGrade"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("Grade")
                        .HasColumnType("float")
                        .HasComment("Оценка от протокол от курс за валидиране");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int>("IdValidationClient")
                        .HasColumnType("int")
                        .HasComment("Връзка с курс за валидиране");

                    b.Property<int>("IdValidationProtocol")
                        .HasColumnType("int")
                        .HasComment("Връзка с протокол към курс за валидиране");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.HasKey("IdValidationProtocolGrade");

                    b.HasIndex("IdValidationClient");

                    b.HasIndex("IdValidationProtocol");

                    b.ToTable("Training_ValidationProtocolGrade");

                    b.HasComment("Протокол към курс за валидиране");
                });

            modelBuilder.Entity("Data.Models.Data.Training.ValidationTrainer", b =>
                {
                    b.Property<int>("IdValidationTrainer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdValidationTrainer"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int>("IdTrainer")
                        .HasColumnType("int");

                    b.Property<int>("IdValidationClient")
                        .HasColumnType("int")
                        .HasComment("Връзка с Курс за валидиране");

                    b.Property<int?>("IdТrainingType")
                        .HasColumnType("int")
                        .HasComment("Вид обучение");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.HasKey("IdValidationTrainer");

                    b.HasIndex("IdTrainer");

                    b.HasIndex("IdValidationClient");

                    b.ToTable("Training_ValidationTrainer");

                    b.HasComment("Връзка между лектор и курс за валидиране");
                });

            modelBuilder.Entity("Data.Models.SPPOOOrder", b =>
                {
                    b.Property<int>("IdOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdOrder"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UploadedFileName")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.HasKey("IdOrder");

                    b.ToTable("SPPOO_Order");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Data.Models.Data.Archive.AnnualInfo", b =>
                {
                    b.HasOne("Data.Models.Data.Candidate.CandidateProvider", "CandidateProvider")
                        .WithMany("AnnualInfos")
                        .HasForeignKey("IdCandidateProvider")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CandidateProvider");
                });

            modelBuilder.Entity("Data.Models.Data.Archive.AnnualInfoStatus", b =>
                {
                    b.HasOne("Data.Models.Data.Archive.AnnualInfo", "AnnualInfo")
                        .WithMany("AnnualInfoStatuses")
                        .HasForeignKey("IdAnnualInfo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AnnualInfo");
                });

            modelBuilder.Entity("Data.Models.Data.Archive.ArchCandidateCurriculum", b =>
                {
                    b.HasOne("Data.Models.Data.Archive.ArchCandidateProviderSpeciality", "ArchCandidateProviderSpeciality")
                        .WithMany("CandidateCurriculums")
                        .HasForeignKey("IdArchCandidateProviderSpeciality")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Data.Candidate.CandidateCurriculumModification", "CandidateCurriculumModification")
                        .WithMany()
                        .HasForeignKey("IdCandidateCurriculumModification");

                    b.HasOne("Data.Models.Data.Candidate.CandidateProviderSpeciality", "CandidateProviderSpeciality")
                        .WithMany()
                        .HasForeignKey("IdCandidateProviderSpeciality")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ArchCandidateProviderSpeciality");

                    b.Navigation("CandidateCurriculumModification");

                    b.Navigation("CandidateProviderSpeciality");
                });

            modelBuilder.Entity("Data.Models.Data.Archive.ArchCandidateProvider", b =>
                {
                    b.HasOne("Data.Models.Data.Candidate.CandidateProvider", "CandidateProviderActive")
                        .WithMany()
                        .HasForeignKey("IdCandidateProviderActive");

                    b.HasOne("Data.Models.Data.Common.Location", "Location")
                        .WithMany()
                        .HasForeignKey("IdLocation");

                    b.HasOne("Data.Models.Data.Common.Location", "LocationCorrespondence")
                        .WithMany()
                        .HasForeignKey("IdLocationCorrespondence");

                    b.HasOne("Data.Models.Data.Common.Region", "RegionCorrespondence")
                        .WithMany()
                        .HasForeignKey("IdRegionCorrespondence");

                    b.HasOne("Data.Models.Data.ProviderData.StartedProcedure", "StartedProcedure")
                        .WithMany()
                        .HasForeignKey("IdStartedProcedure");

                    b.Navigation("CandidateProviderActive");

                    b.Navigation("Location");

                    b.Navigation("LocationCorrespondence");

                    b.Navigation("RegionCorrespondence");

                    b.Navigation("StartedProcedure");
                });

            modelBuilder.Entity("Data.Models.Data.Archive.ArchCandidateProviderPremises", b =>
                {
                    b.HasOne("Data.Models.Data.Archive.ArchCandidateProvider", "ArchCandidateProvider")
                        .WithMany("CandidateProviderPremises")
                        .HasForeignKey("IdArchCandidateProvider")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Data.Candidate.CandidateProvider", "CandidateProvider")
                        .WithMany()
                        .HasForeignKey("IdCandidate_Provider")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Data.Common.Location", "Location")
                        .WithMany()
                        .HasForeignKey("IdLocation");

                    b.Navigation("ArchCandidateProvider");

                    b.Navigation("CandidateProvider");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Data.Models.Data.Archive.ArchCandidateProviderPremisesSpeciality", b =>
                {
                    b.HasOne("Data.Models.Data.Archive.ArchCandidateProviderPremises", "ArchCandidateProviderPremises")
                        .WithMany("CandidateProviderPremisesSpecialities")
                        .HasForeignKey("IdArchCandidateProviderPremises")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Data.Candidate.CandidateProviderPremises", "CandidateProviderPremises")
                        .WithMany()
                        .HasForeignKey("IdCandidateProviderPremises")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Data.SPPOO.Speciality", "Speciality")
                        .WithMany()
                        .HasForeignKey("IdSpeciality")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ArchCandidateProviderPremises");

                    b.Navigation("CandidateProviderPremises");

                    b.Navigation("Speciality");
                });

            modelBuilder.Entity("Data.Models.Data.Archive.ArchCandidateProviderSpeciality", b =>
                {
                    b.HasOne("Data.Models.Data.Archive.ArchCandidateProvider", "ArchCandidateProvider")
                        .WithMany("CandidateProviderSpecialities")
                        .HasForeignKey("IdArchCandidateProvider")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Data.Candidate.CandidateProvider", "CandidateProvider")
                        .WithMany()
                        .HasForeignKey("IdCandidate_Provider")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Data.SPPOO.FrameworkProgram", "FrameworkProgram")
                        .WithMany()
                        .HasForeignKey("IdFrameworkProgram");

                    b.HasOne("Data.Models.Data.SPPOO.Speciality", "Speciality")
                        .WithMany()
                        .HasForeignKey("IdSpeciality")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ArchCandidateProvider");

                    b.Navigation("CandidateProvider");

                    b.Navigation("FrameworkProgram");

                    b.Navigation("Speciality");
                });

            modelBuilder.Entity("Data.Models.Data.Archive.ArchCandidateProviderTrainer", b =>
                {
                    b.HasOne("Data.Models.Data.Archive.ArchCandidateProvider", "ArchCandidateProvider")
                        .WithMany("CandidateProviderTrainers")
                        .HasForeignKey("IdArchCandidateProvider")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Data.Candidate.CandidateProvider", "CandidateProvider")
                        .WithMany()
                        .HasForeignKey("IdCandidate_Provider")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ArchCandidateProvider");

                    b.Navigation("CandidateProvider");
                });

            modelBuilder.Entity("Data.Models.Data.Archive.ArchCandidateProviderTrainerQualification", b =>
                {
                    b.HasOne("Data.Models.Data.Archive.ArchCandidateProviderTrainer", "ArchCandidateProviderTrainer")
                        .WithMany("CandidateProviderTrainerQualifications")
                        .HasForeignKey("IdArchCandidateProviderTrainer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Data.Candidate.CandidateProviderTrainer", "CandidateProviderTrainer")
                        .WithMany()
                        .HasForeignKey("IdCandidateProviderTrainer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Data.SPPOO.Profession", "Profession")
                        .WithMany()
                        .HasForeignKey("IdProfession");

                    b.Navigation("ArchCandidateProviderTrainer");

                    b.Navigation("CandidateProviderTrainer");

                    b.Navigation("Profession");
                });

            modelBuilder.Entity("Data.Models.Data.Archive.SelfAssessmentReport", b =>
                {
                    b.HasOne("Data.Models.Data.Candidate.CandidateProvider", "CandidateProvider")
                        .WithMany()
                        .HasForeignKey("IdCandidateProvider")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Data.Assessment.SurveyResult", "SurveyResult")
                        .WithMany()
                        .HasForeignKey("IdSurveyResult");

                    b.Navigation("CandidateProvider");

                    b.Navigation("SurveyResult");
                });

            modelBuilder.Entity("Data.Models.Data.Archive.SelfAssessmentReportStatus", b =>
                {
                    b.HasOne("Data.Models.Data.Archive.SelfAssessmentReport", "SelfAssessmentReport")
                        .WithMany("SelfAssessmentReportStatuses")
                        .HasForeignKey("IdSelfAssessmentReport")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SelfAssessmentReport");
                });

            modelBuilder.Entity("Data.Models.Data.Assessment.Answer", b =>
                {
                    b.HasOne("Data.Models.Data.Assessment.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("IdQuestion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Data.Models.Data.Assessment.Question", b =>
                {
                    b.HasOne("Data.Models.Data.Assessment.Survey", "Survey")
                        .WithMany("Questions")
                        .HasForeignKey("IdSurvey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("Data.Models.Data.Assessment.SurveyResult", b =>
                {
                    b.HasOne("Data.Models.Data.Candidate.CandidateProvider", "CandidateProvider")
                        .WithMany()
                        .HasForeignKey("IdCandidate_Provider")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Data.Training.ClientCourse", "ClientCourse")
                        .WithMany()
                        .HasForeignKey("IdClientCourse");

                    b.HasOne("Data.Models.Data.Training.ConsultingClient", "ConsultingClient")
                        .WithMany()
                        .HasForeignKey("IdConsultingClient");

                    b.HasOne("Data.Models.Data.Assessment.Survey", "Survey")
                        .WithMany("SurveyResults")
                        .HasForeignKey("IdSurvey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Data.Training.ValidationClient", "ValidationClient")
                        .WithMany()
                        .HasForeignKey("IdValidationClient");

                    b.Navigation("CandidateProvider");

                    b.Navigation("ClientCourse");

                    b.Navigation("ConsultingClient");

                    b.Navigation("Survey");

                    b.Navigation("ValidationClient");
                });

            modelBuilder.Entity("Data.Models.Data.Assessment.UserAnswer", b =>
                {
                    b.HasOne("Data.Models.Data.Assessment.Answer", "Answer")
                        .WithMany("UserAnswers")
                        .HasForeignKey("IdAnswer");

                    b.HasOne("Data.Models.Data.Assessment.Question", "Question")
                        .WithMany("UserAnswers")
                        .HasForeignKey("IdQuestion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Data.Assessment.UserAnswerOpen", "UserAnswerOpen")
                        .WithMany("UserAnswers")
                        .HasForeignKey("IdUserAnswerOpen")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Answer");

                    b.Navigation("Question");

                    b.Navigation("UserAnswerOpen");
                });

            modelBuilder.Entity("Data.Models.Data.Assessment.UserAnswerOpen", b =>
                {
                    b.HasOne("Data.Models.Data.Assessment.Question", "Question")
                        .WithMany("UserAnswerOpens")
                        .HasForeignKey("IdQuestion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Data.Assessment.SurveyResult", "SurveyResult")
                        .WithMany("UserAnswerOpens")
                        .HasForeignKey("IdSurveyResult")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("SurveyResult");
                });

            modelBuilder.Entity("Data.Models.Data.Candidate.CandidateCurriculum", b =>
                {
                    b.HasOne("Data.Models.Data.Candidate.CandidateCurriculumModification", "CandidateCurriculumModification")
                        .WithMany("CandidateCurriculums")
                        .HasForeignKey("IdCandidateCurriculumModification");

                    b.HasOne("Data.Models.Data.Candidate.CandidateProviderSpeciality", "CandidateProviderSpeciality")
                        .WithMany("CandidateCurriculums")
                        .HasForeignKey("IdCandidateProviderSpeciality")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CandidateCurriculumModification");

                    b.Navigation("CandidateProviderSpeciality");
                });

            modelBuilder.Entity("Data.Models.Data.Candidate.CandidateCurriculumERU", b =>
                {
                    b.HasOne("Data.Models.Data.Candidate.CandidateCurriculum", "CandidateCurriculum")
                        .WithMany("CandidateCurriculumERUs")
                        .HasForeignKey("IdCandidateCurriculum")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Data.DOC.ERU", "ERU")
                        .WithMany()
                        .HasForeignKey("IdERU")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CandidateCurriculum");

                    b.Navigation("ERU");
                });

            modelBuilder.Entity("Data.Models.Data.Candidate.CandidateCurriculumModification", b =>
                {
                    b.HasOne("Data.Models.Data.Candidate.CandidateProviderSpeciality", "CandidateProviderSpeciality")
                        .WithMany("CandidateCurriculumModifications")
                        .HasForeignKey("IdCandidateProviderSpeciality")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CandidateProviderSpeciality");
                });

            modelBuilder.Entity("Data.Models.Data.Candidate.CandidateProvider", b =>
                {
                    b.HasOne("Data.Models.Data.Candidate.CandidateProvider", "CandidateProviderActive")
                        .WithMany()
                        .HasForeignKey("IdCandidateProviderActive");

                    b.HasOne("Data.Models.Data.Common.Location", "Location")
                        .WithMany()
                        .HasForeignKey("IdLocation");

                    b.HasOne("Data.Models.Data.Common.Location", "LocationCorrespondence")
                        .WithMany()
                        .HasForeignKey("IdLocationCorrespondence");

                    b.HasOne("Data.Models.Data.Common.Region", "RegionAdmin")
                        .WithMany()
                        .HasForeignKey("IdRegionAdmin");

                    b.HasOne("Data.Models.Data.Common.Region", "RegionCorrespondence")
                        .WithMany()
                        .HasForeignKey("IdRegionCorrespondence");

                    b.HasOne("Data.Models.Data.ProviderData.StartedProcedure", "StartedProcedure")
                        .WithMany("CandidateProviders")
                        .HasForeignKey("IdStartedProcedure");

                    b.Navigation("CandidateProviderActive");

                    b.Navigation("Location");

                    b.Navigation("LocationCorrespondence");

                    b.Navigation("RegionAdmin");

                    b.Navigation("RegionCorrespondence");

                    b.Navigation("StartedProcedure");
                });

            modelBuilder.Entity("Data.Models.Data.Candidate.CandidateProviderCIPOStructureActivity", b =>
                {
                    b.HasOne("Data.Models.Data.Candidate.CandidateProvider", "CandidateProvider")
                        .WithMany()
                        .HasForeignKey("IdCandidate_Provider")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CandidateProvider");
                });

            modelBuilder.Entity("Data.Models.Data.Candidate.CandidateProviderConsulting", b =>
                {
                    b.HasOne("Data.Models.Data.Candidate.CandidateProvider", "CandidateProvider")
                        .WithMany("CandidateProviderConsultings")
                        .HasForeignKey("IdCandidateProvider")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CandidateProvider");
                });

            modelBuilder.Entity("Data.Models.Data.Candidate.CandidateProviderCPOStructureActivity", b =>
                {
                    b.HasOne("Data.Models.Data.Candidate.CandidateProvider", "CandidateProvider")
                        .WithMany()
                        .HasForeignKey("IdCandidate_Provider")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CandidateProvider");
                });

            modelBuilder.Entity("Data.Models.Data.Candidate.CandidateProviderDocument", b =>
                {
                    b.HasOne("Data.Models.Data.Candidate.CandidateProvider", "CandidateProvider")
                        .WithMany("CandidateProviderDocuments")
                        .HasForeignKey("IdCandidateProvider")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CandidateProvider");
                });

            modelBuilder.Entity("Data.Models.Data.Candidate.CandidateProviderLicenceChange", b =>
                {
                    b.HasOne("Data.Models.Data.Candidate.CandidateProvider", "CandidateProvider")
                        .WithMany()
                        .HasForeignKey("IdCandidate_Provider")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CandidateProvider");
                });

            modelBuilder.Entity("Data.Models.Data.Candidate.CandidateProviderPerson", b =>
                {
                    b.HasOne("Data.Models.Data.Candidate.CandidateProvider", "CandidateProvider")
                        .WithMany("CandidateProviderPeople")
                        .HasForeignKey("IdCandidate_Provider")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Data.Common.Person", "Person")
                        .WithMany("CandidateProviderPersons")
                        .HasForeignKey("IdPerson")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CandidateProvider");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Data.Models.Data.Candidate.CandidateProviderPremises", b =>
                {
                    b.HasOne("Data.Models.Data.Candidate.CandidateProvider", "CandidateProvider")
                        .WithMany("CandidateProviderPremises")
                        .HasForeignKey("IdCandidate_Provider")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Data.Common.Location", "Location")
                        .WithMany()
                        .HasForeignKey("IdLocation");

                    b.Navigation("CandidateProvider");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Data.Models.Data.Candidate.CandidateProviderPremisesChecking", b =>
                {
                    b.HasOne("Data.Models.Data.Candidate.CandidateProviderPremises", "CandidateProviderPremises")
                        .WithMany("CandidateProviderPremisesCheckings")
                        .HasForeignKey("IdCandidateProviderPremises")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Data.Control.FollowUpControl", "FollowUpControl")
                        .WithMany()
                        .HasForeignKey("IdFollowUpControl");

                    b.Navigation("CandidateProviderPremises");

                    b.Navigation("FollowUpControl");
                });

            modelBuilder.Entity("Data.Models.Data.Candidate.CandidateProviderPremisesDocument", b =>
                {
                    b.HasOne("Data.Models.Data.Candidate.CandidateProviderPremises", "CandidateProviderPremises")
                        .WithMany("CandidateProviderPremisesDocuments")
                        .HasForeignKey("IdCandidateProviderPremises")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CandidateProviderPremises");
                });

            modelBuilder.Entity("Data.Models.Data.Candidate.CandidateProviderPremisesRoom", b =>
                {
                    b.HasOne("Data.Models.Data.Candidate.CandidateProviderPremises", "CandidateProviderPremises")
                        .WithMany("CandidateProviderPremisesRooms")
                        .HasForeignKey("IdCandidateProviderPremises")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CandidateProviderPremises");
                });

            modelBuilder.Entity("Data.Models.Data.Candidate.CandidateProviderPremisesSpeciality", b =>
                {
                    b.HasOne("Data.Models.Data.Candidate.CandidateProviderPremises", "CandidateProviderPremises")
                        .WithMany("CandidateProviderPremisesSpecialities")
                        .HasForeignKey("IdCandidateProviderPremises")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Data.SPPOO.Speciality", "Speciality")
                        .WithMany("CandidateProviderPremisesSpecialities")
                        .HasForeignKey("IdSpeciality")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CandidateProviderPremises");

                    b.Navigation("Speciality");
                });

            modelBuilder.Entity("Data.Models.Data.Candidate.CandidateProviderSpeciality", b =>
                {
                    b.HasOne("Data.Models.Data.Candidate.CandidateProvider", "CandidateProvider")
                        .WithMany("CandidateProviderSpecialities")
                        .HasForeignKey("IdCandidate_Provider")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Data.SPPOO.FrameworkProgram", "FrameworkProgram")
                        .WithMany()
                        .HasForeignKey("IdFrameworkProgram");

                    b.HasOne("Data.Models.Data.SPPOO.Speciality", "Speciality")
                        .WithMany()
                        .HasForeignKey("IdSpeciality")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CandidateProvider");

                    b.Navigation("FrameworkProgram");

                    b.Navigation("Speciality");
                });

            modelBuilder.Entity("Data.Models.Data.Candidate.CandidateProviderStatus", b =>
                {
                    b.HasOne("Data.Models.Data.Candidate.CandidateProvider", "CandidateProvider")
                        .WithMany("CandidateProviderStatuses")
                        .HasForeignKey("IdCandidate_Provider")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CandidateProvider");
                });

            modelBuilder.Entity("Data.Models.Data.Candidate.CandidateProviderTrainer", b =>
                {
                    b.HasOne("Data.Models.Data.Candidate.CandidateProvider", "CandidateProvider")
                        .WithMany("CandidateProviderTrainers")
                        .HasForeignKey("IdCandidate_Provider")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CandidateProvider");
                });

            modelBuilder.Entity("Data.Models.Data.Candidate.CandidateProviderTrainerChecking", b =>
                {
                    b.HasOne("Data.Models.Data.Candidate.CandidateProviderTrainer", "CandidateProviderTrainer")
                        .WithMany("CandidateProviderTrainerCheckings")
                        .HasForeignKey("IdCandidateProviderTrainer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Data.Control.FollowUpControl", "FollowUpControl")
                        .WithMany()
                        .HasForeignKey("IdFollowUpControl");

                    b.Navigation("CandidateProviderTrainer");

                    b.Navigation("FollowUpControl");
                });

            modelBuilder.Entity("Data.Models.Data.Candidate.CandidateProviderTrainerDocument", b =>
                {
                    b.HasOne("Data.Models.Data.Candidate.CandidateProviderTrainer", "CandidateProviderTrainer")
                        .WithMany("CandidateProviderTrainerDocuments")
                        .HasForeignKey("IdCandidateProviderTrainer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CandidateProviderTrainer");
                });

            modelBuilder.Entity("Data.Models.Data.Candidate.CandidateProviderTrainerProfile", b =>
                {
                    b.HasOne("Data.Models.Data.Candidate.CandidateProviderTrainer", "CandidateProviderTrainer")
                        .WithMany("CandidateProviderTrainerProfiles")
                        .HasForeignKey("IdCandidateProviderTrainer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Data.SPPOO.ProfessionalDirection", "ProfessionalDirection")
                        .WithMany()
                        .HasForeignKey("IdProfessionalDirection")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CandidateProviderTrainer");

                    b.Navigation("ProfessionalDirection");
                });

            modelBuilder.Entity("Data.Models.Data.Candidate.CandidateProviderTrainerQualification", b =>
                {
                    b.HasOne("Data.Models.Data.Candidate.CandidateProviderTrainer", "CandidateProviderTrainer")
                        .WithMany("CandidateProviderTrainerQualifications")
                        .HasForeignKey("IdCandidateProviderTrainer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Data.SPPOO.Profession", "Profession")
                        .WithMany()
                        .HasForeignKey("IdProfession");

                    b.Navigation("CandidateProviderTrainer");

                    b.Navigation("Profession");
                });

            modelBuilder.Entity("Data.Models.Data.Candidate.CandidateProviderTrainerSpeciality", b =>
                {
                    b.HasOne("Data.Models.Data.Candidate.CandidateProviderTrainer", "CandidateProviderTrainer")
                        .WithMany("CandidateProviderTrainerSpecialities")
                        .HasForeignKey("IdCandidateProviderTrainer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Data.SPPOO.Speciality", "Speciality")
                        .WithMany("CandidateProviderTrainerSpecialities")
                        .HasForeignKey("IdSpeciality")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CandidateProviderTrainer");

                    b.Navigation("Speciality");
                });

            modelBuilder.Entity("Data.Models.Data.Common.AuthenticationTicket", b =>
                {
                    b.HasOne("Data.Models.Data.ProviderData.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Models.Data.Common.KeyValue", b =>
                {
                    b.HasOne("Data.Models.Data.Common.KeyType", "KeyType")
                        .WithMany("KeyValues")
                        .HasForeignKey("IdKeyType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KeyType");
                });

            modelBuilder.Entity("Data.Models.Data.Common.Location", b =>
                {
                    b.HasOne("Data.Models.Data.Common.Municipality", "Municipality")
                        .WithMany("Locations")
                        .HasForeignKey("idMunicipality")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Municipality");
                });

            modelBuilder.Entity("Data.Models.Data.Common.MenuNodeRole", b =>
                {
                    b.HasOne("Data.Models.Data.Role.ApplicationRole", "ApplicationRole")
                        .WithMany()
                        .HasForeignKey("IdApplicationRole")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Data.Common.MenuNode", "MenuNode")
                        .WithMany("MenuNodeRoles")
                        .HasForeignKey("IdMenuNode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationRole");

                    b.Navigation("MenuNode");
                });

            modelBuilder.Entity("Data.Models.Data.Common.Municipality", b =>
                {
                    b.HasOne("Data.Models.Data.Common.District", "District")
                        .WithMany("Municipalities")
                        .HasForeignKey("idDistrict")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");
                });

            modelBuilder.Entity("Data.Models.Data.Common.Notification", b =>
                {
                    b.HasOne("Data.Models.Data.Common.Person", "PersonFrom")
                        .WithMany()
                        .HasForeignKey("IdPersonFrom");

                    b.HasOne("Data.Models.Data.Common.Person", "PersonTo")
                        .WithMany()
                        .HasForeignKey("IdPersonTo");

                    b.Navigation("PersonFrom");

                    b.Navigation("PersonTo");
                });

            modelBuilder.Entity("Data.Models.Data.Common.Person", b =>
                {
                    b.HasOne("Data.Models.Data.Common.Location", "Location")
                        .WithMany()
                        .HasForeignKey("IdLocation");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Data.Models.Data.Common.Region", b =>
                {
                    b.HasOne("Data.Models.Data.Common.Municipality", "Municipality")
                        .WithMany("Regions")
                        .HasForeignKey("idMunicipality")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Municipality");
                });

            modelBuilder.Entity("Data.Models.Data.Control.FollowUpControl", b =>
                {
                    b.HasOne("Data.Models.Data.Candidate.CandidateProvider", "CandidateProvider")
                        .WithMany()
                        .HasForeignKey("IdCandidateProvider")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CandidateProvider");
                });

            modelBuilder.Entity("Data.Models.Data.Control.FollowUpControlDocument", b =>
                {
                    b.HasOne("Data.Models.Data.Control.FollowUpControl", "FollowUpControl")
                        .WithMany("FollowUpControlDocuments")
                        .HasForeignKey("IdFollowUpControl")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FollowUpControl");
                });

            modelBuilder.Entity("Data.Models.Data.Control.FollowUpControlDocumentNotification", b =>
                {
                    b.HasOne("Data.Models.Data.Control.FollowUpControlDocument", "FollowUpControlDocument")
                        .WithMany()
                        .HasForeignKey("IdFollowUpControlDocument")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Data.Common.Notification", "Notification")
                        .WithMany()
                        .HasForeignKey("IdNotification")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FollowUpControlDocument");

                    b.Navigation("Notification");
                });

            modelBuilder.Entity("Data.Models.Data.Control.FollowUpControlExpert", b =>
                {
                    b.HasOne("Data.Models.Data.ExternalExpertCommission.Expert", "Expert")
                        .WithMany("FollowUpControlExperts")
                        .HasForeignKey("IdExpert")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Data.Control.FollowUpControl", "FollowUpControl")
                        .WithMany("FollowUpControlExperts")
                        .HasForeignKey("IdFollowUpControl")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Expert");

                    b.Navigation("FollowUpControl");
                });

            modelBuilder.Entity("Data.Models.Data.Control.FollowUpControlUploadedFile", b =>
                {
                    b.HasOne("Data.Models.Data.Control.FollowUpControl", "FollowUpControl")
                        .WithMany("FollowUpControlUploadedFiles")
                        .HasForeignKey("IdFollowUpControl")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FollowUpControl");
                });

            modelBuilder.Entity("Data.Models.Data.DOC.DOC", b =>
                {
                    b.HasOne("Data.Models.Data.SPPOO.Profession", "Profession")
                        .WithMany("DOCs")
                        .HasForeignKey("IdProfession")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profession");
                });

            modelBuilder.Entity("Data.Models.Data.DOC.DOC_DOC_NKPD", b =>
                {
                    b.HasOne("Data.Models.Data.DOC.DOC", "DOC")
                        .WithMany("docNkpds")
                        .HasForeignKey("IdDOC")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Data.DOC.NKPD", "NKPD")
                        .WithMany()
                        .HasForeignKey("IdNKPD")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DOC");

                    b.Navigation("NKPD");
                });

            modelBuilder.Entity("Data.Models.Data.DOC.ERU", b =>
                {
                    b.HasOne("Data.Models.Data.DOC.DOC", "DOC")
                        .WithMany("ERUs")
                        .HasForeignKey("IdDOC")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DOC");
                });

            modelBuilder.Entity("Data.Models.Data.DOC.ERUSpeciality", b =>
                {
                    b.HasOne("Data.Models.Data.DOC.ERU", "ERU")
                        .WithMany("ERUSpecialities")
                        .HasForeignKey("IdERU")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Data.SPPOO.Speciality", "Speciality")
                        .WithMany("ERUSpecialities")
                        .HasForeignKey("IdSpeciality")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ERU");

                    b.Navigation("Speciality");
                });

            modelBuilder.Entity("Data.Models.Data.EGovPayment.Payment", b =>
                {
                    b.HasOne("Data.Models.Data.Candidate.CandidateProvider", "CandidateProvider")
                        .WithMany()
                        .HasForeignKey("IdCandidate_Provider")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Data.ProviderData.ProcedurePrice", "ProcedurePrice")
                        .WithMany()
                        .HasForeignKey("IdProcedurePrice")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CandidateProvider");

                    b.Navigation("ProcedurePrice");
                });

            modelBuilder.Entity("Data.Models.Data.ExternalExpertCommission.Expert", b =>
                {
                    b.HasOne("Data.Models.Data.Common.Person", "Person")
                        .WithMany()
                        .HasForeignKey("IdPerson");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Data.Models.Data.ExternalExpertCommission.ExpertDOC", b =>
                {
                    b.HasOne("Data.Models.Data.DOC.DOC", "DOC")
                        .WithMany()
                        .HasForeignKey("IdDOC")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Data.ExternalExpertCommission.Expert", "Expert")
                        .WithMany("ExpertDOCs")
                        .HasForeignKey("IdExpert")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DOC");

                    b.Navigation("Expert");
                });

            modelBuilder.Entity("Data.Models.Data.ExternalExpertCommission.ExpertDocument", b =>
                {
                    b.HasOne("Data.Models.Data.ExternalExpertCommission.Expert", "Expert")
                        .WithMany("ExpertDocuments")
                        .HasForeignKey("IdExpert")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Expert");
                });

            modelBuilder.Entity("Data.Models.Data.ExternalExpertCommission.ExpertExpertCommission", b =>
                {
                    b.HasOne("Data.Models.Data.ExternalExpertCommission.Expert", "Expert")
                        .WithMany("ExpertExpertCommissions")
                        .HasForeignKey("IdExpert")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Expert");
                });

            modelBuilder.Entity("Data.Models.Data.ExternalExpertCommission.ExpertNapoo", b =>
                {
                    b.HasOne("Data.Models.Data.ExternalExpertCommission.Expert", "Expert")
                        .WithMany("ExpertNapoos")
                        .HasForeignKey("IdExpert")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Expert");
                });

            modelBuilder.Entity("Data.Models.Data.ExternalExpertCommission.ExpertProfessionalDirection", b =>
                {
                    b.HasOne("Data.Models.Data.ExternalExpertCommission.Expert", "Expert")
                        .WithMany("ExpertProfessionalDirections")
                        .HasForeignKey("IdExpert")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Data.SPPOO.ProfessionalDirection", "ProfessionalDirection")
                        .WithMany()
                        .HasForeignKey("IdProfessionalDirection")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Expert");

                    b.Navigation("ProfessionalDirection");
                });

            modelBuilder.Entity("Data.Models.Data.ProviderData.ApplicationUser", b =>
                {
                    b.HasOne("Data.Models.Data.Common.Person", "Person")
                        .WithMany()
                        .HasForeignKey("IdPerson");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Data.Models.Data.ProviderData.NegativeIssue", b =>
                {
                    b.HasOne("Data.Models.Data.ProviderData.StartedProcedure", "StartedProcedure")
                        .WithMany("NegativeIssues")
                        .HasForeignKey("IdStartedProcedure")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StartedProcedure");
                });

            modelBuilder.Entity("Data.Models.Data.ProviderData.ProcedureDocument", b =>
                {
                    b.HasOne("Data.Models.Data.ExternalExpertCommission.Expert", "Expert")
                        .WithMany("ProcedureDocuments")
                        .HasForeignKey("IdExpert");

                    b.HasOne("Data.Models.Data.ProviderData.StartedProcedure", "StartedProcedure")
                        .WithMany("ProcedureDocuments")
                        .HasForeignKey("IdStartedProcedure")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Expert");

                    b.Navigation("StartedProcedure");
                });

            modelBuilder.Entity("Data.Models.Data.ProviderData.ProcedureDocumentNotification", b =>
                {
                    b.HasOne("Data.Models.Data.Common.Notification", "Notification")
                        .WithMany()
                        .HasForeignKey("IdNotification")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Data.ProviderData.ProcedureDocument", "ProcedureDocument")
                        .WithMany()
                        .HasForeignKey("IdProcedureDocument")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Notification");

                    b.Navigation("ProcedureDocument");
                });

            modelBuilder.Entity("Data.Models.Data.ProviderData.ProcedureExpertCommission", b =>
                {
                    b.HasOne("Data.Models.Data.ProviderData.StartedProcedure", "StartedProcedure")
                        .WithMany("ProcedureExpertCommissions")
                        .HasForeignKey("IdStartedProcedure")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StartedProcedure");
                });

            modelBuilder.Entity("Data.Models.Data.ProviderData.ProcedureExternalExpert", b =>
                {
                    b.HasOne("Data.Models.Data.ExternalExpertCommission.Expert", "Expert")
                        .WithMany("ProcedureExternalExperts")
                        .HasForeignKey("IdExpert")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Data.ProviderData.ProcedureDocument", "ProcedureDocument")
                        .WithMany()
                        .HasForeignKey("IdProcedureDocument");

                    b.HasOne("Data.Models.Data.SPPOO.ProfessionalDirection", "ProfessionalDirection")
                        .WithMany()
                        .HasForeignKey("IdProfessionalDirection");

                    b.HasOne("Data.Models.Data.ProviderData.StartedProcedure", "StartedProcedure")
                        .WithMany("ProcedureExternalExperts")
                        .HasForeignKey("IdStartedProcedure")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Expert");

                    b.Navigation("ProcedureDocument");

                    b.Navigation("ProfessionalDirection");

                    b.Navigation("StartedProcedure");
                });

            modelBuilder.Entity("Data.Models.Data.ProviderData.Provider", b =>
                {
                    b.HasOne("Data.Models.Data.Common.Location", "Location")
                        .WithMany()
                        .HasForeignKey("IdLocation");

                    b.HasOne("Data.Models.Data.Common.Location", "LocationCorrespondence")
                        .WithMany()
                        .HasForeignKey("IdLocationCorrespondence");

                    b.Navigation("Location");

                    b.Navigation("LocationCorrespondence");
                });

            modelBuilder.Entity("Data.Models.Data.ProviderData.ProviderPerson", b =>
                {
                    b.HasOne("Data.Models.Data.Common.Person", "Person")
                        .WithMany()
                        .HasForeignKey("IdPerson")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Data.ProviderData.Provider", "Provider")
                        .WithMany()
                        .HasForeignKey("IdProvider")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("Data.Models.Data.ProviderData.StartedProcedureProgress", b =>
                {
                    b.HasOne("Data.Models.Data.ProviderData.StartedProcedure", "StartedProcedure")
                        .WithMany("StartedProcedureProgresses")
                        .HasForeignKey("IdStartedProcedure")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StartedProcedure");
                });

            modelBuilder.Entity("Data.Models.Data.Rating.CandidateProviderIndicator", b =>
                {
                    b.HasOne("Data.Models.Data.Candidate.CandidateProvider", "CandidateProvider")
                        .WithMany()
                        .HasForeignKey("IdCandidate_Provider")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Data.Rating.Indicator", "Indicator")
                        .WithMany()
                        .HasForeignKey("IdIndicator");

                    b.Navigation("CandidateProvider");

                    b.Navigation("Indicator");
                });

            modelBuilder.Entity("Data.Models.Data.Request.DocumentSerialNumber", b =>
                {
                    b.HasOne("Data.Models.Data.Candidate.CandidateProvider", "CandidateProvider")
                        .WithMany()
                        .HasForeignKey("IdCandidateProvider")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Data.Request.RequestDocumentManagement", "RequestDocumentManagement")
                        .WithMany("DocumentSerialNumbers")
                        .HasForeignKey("IdRequestDocumentManagement")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Data.Request.RequestReport", "RequestReport")
                        .WithMany("DocumentSerialNumbers")
                        .HasForeignKey("IdRequestReport");

                    b.HasOne("Data.Models.Data.Request.TypeOfRequestedDocument", "TypeOfRequestedDocument")
                        .WithMany("DocumentSerialNumbers")
                        .HasForeignKey("IdTypeOfRequestedDocument")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CandidateProvider");

                    b.Navigation("RequestDocumentManagement");

                    b.Navigation("RequestReport");

                    b.Navigation("TypeOfRequestedDocument");
                });

            modelBuilder.Entity("Data.Models.Data.Request.DocumentSeries", b =>
                {
                    b.HasOne("Data.Models.Data.Request.TypeOfRequestedDocument", "TypeOfRequestedDocument")
                        .WithMany("DocumentSeries")
                        .HasForeignKey("IdTypeOfRequestedDocument")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TypeOfRequestedDocument");
                });

            modelBuilder.Entity("Data.Models.Data.Request.ProviderDocumentOffer", b =>
                {
                    b.HasOne("Data.Models.Data.Candidate.CandidateProvider", "CandidateProvider")
                        .WithMany("ProviderDocumentOffers")
                        .HasForeignKey("IdCandidateProvider")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Data.Request.TypeOfRequestedDocument", "TypeOfRequestedDocument")
                        .WithMany("ProviderDocumentOffers")
                        .HasForeignKey("IdTypeOfRequestedDocument")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CandidateProvider");

                    b.Navigation("TypeOfRequestedDocument");
                });

            modelBuilder.Entity("Data.Models.Data.Request.ProviderRequestDocument", b =>
                {
                    b.HasOne("Data.Models.Data.Candidate.CandidateProvider", "CandidateProvider")
                        .WithMany()
                        .HasForeignKey("IdCandidateProvider")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Data.Common.Location", "LocationCorrespondence")
                        .WithMany()
                        .HasForeignKey("IdLocationCorrespondence");

                    b.HasOne("Data.Models.Data.Request.NAPOORequestDoc", "NAPOORequestDoc")
                        .WithMany("ProviderRequestDocuments")
                        .HasForeignKey("IdNAPOORequestDoc");

                    b.Navigation("CandidateProvider");

                    b.Navigation("LocationCorrespondence");

                    b.Navigation("NAPOORequestDoc");
                });

            modelBuilder.Entity("Data.Models.Data.Request.ReportUploadedDoc", b =>
                {
                    b.HasOne("Data.Models.Data.Candidate.CandidateProvider", "CandidateProvider")
                        .WithMany()
                        .HasForeignKey("IdCandidateProvider")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Data.Request.RequestReport", "RequestReport")
                        .WithMany("ReportUploadedDocs")
                        .HasForeignKey("IdRequestReport")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CandidateProvider");

                    b.Navigation("RequestReport");
                });

            modelBuilder.Entity("Data.Models.Data.Request.RequestDocumentManagement", b =>
                {
                    b.HasOne("Data.Models.Data.Candidate.CandidateProvider", "CandidateProvider")
                        .WithMany()
                        .HasForeignKey("IdCandidateProvider")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Data.Candidate.CandidateProvider", "CandidateProviderPartner")
                        .WithMany()
                        .HasForeignKey("IdCandidateProviderPartner");

                    b.HasOne("Data.Models.Data.Request.ProviderRequestDocument", "ProviderRequestDocument")
                        .WithMany("RequestDocumentManagements")
                        .HasForeignKey("IdProviderRequestDocument");

                    b.HasOne("Data.Models.Data.Request.RequestReport", "RequestReport")
                        .WithMany()
                        .HasForeignKey("IdRequestReport");

                    b.HasOne("Data.Models.Data.Request.TypeOfRequestedDocument", "TypeOfRequestedDocument")
                        .WithMany("RequestDocumentManagements")
                        .HasForeignKey("IdTypeOfRequestedDocument")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CandidateProvider");

                    b.Navigation("CandidateProviderPartner");

                    b.Navigation("ProviderRequestDocument");

                    b.Navigation("RequestReport");

                    b.Navigation("TypeOfRequestedDocument");
                });

            modelBuilder.Entity("Data.Models.Data.Request.RequestDocumentManagementUploadedFile", b =>
                {
                    b.HasOne("Data.Models.Data.Request.RequestDocumentManagement", "RequestDocumentManagement")
                        .WithMany("RequestDocumentManagementUploadedFiles")
                        .HasForeignKey("IdRequestDocumentManagement")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequestDocumentManagement");
                });

            modelBuilder.Entity("Data.Models.Data.Request.RequestDocumentStatus", b =>
                {
                    b.HasOne("Data.Models.Data.Candidate.CandidateProvider", "CandidateProvider")
                        .WithMany()
                        .HasForeignKey("IdCandidateProvider")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Data.Request.ProviderRequestDocument", "ProviderRequestDocument")
                        .WithMany("RequestDocumentStatuses")
                        .HasForeignKey("IdProviderRequestDocument")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CandidateProvider");

                    b.Navigation("ProviderRequestDocument");
                });

            modelBuilder.Entity("Data.Models.Data.Request.RequestDocumentType", b =>
                {
                    b.HasOne("Data.Models.Data.Candidate.CandidateProvider", "CandidateProvider")
                        .WithMany()
                        .HasForeignKey("IdCandidateProvider")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Data.Request.ProviderRequestDocument", "ProviderRequestDocument")
                        .WithMany("RequestDocumentTypes")
                        .HasForeignKey("IdProviderRequestDocument")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Data.Request.RequestDocumentManagement", "RequestDocumentManagement")
                        .WithMany("RequestDocumentTypes")
                        .HasForeignKey("IdRequestDocumentManagement");

                    b.HasOne("Data.Models.Data.Request.TypeOfRequestedDocument", "TypeOfRequestedDocument")
                        .WithMany("RequestDocumentTypes")
                        .HasForeignKey("IdTypeOfRequestedDocument")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CandidateProvider");

                    b.Navigation("ProviderRequestDocument");

                    b.Navigation("RequestDocumentManagement");

                    b.Navigation("TypeOfRequestedDocument");
                });

            modelBuilder.Entity("Data.Models.Data.Request.RequestReport", b =>
                {
                    b.HasOne("Data.Models.Data.Candidate.CandidateProvider", "CandidateProvider")
                        .WithMany("RequestReports")
                        .HasForeignKey("IdCandidateProvider")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CandidateProvider");
                });

            modelBuilder.Entity("Data.Models.Data.SPPOO.FrameworkProgramFormEducation", b =>
                {
                    b.HasOne("Data.Models.Data.SPPOO.FrameworkProgram", "FrameworkProgram")
                        .WithMany("FrameworkProgramFormEducations")
                        .HasForeignKey("IdFrameworkProgram")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FrameworkProgram");
                });

            modelBuilder.Entity("Data.Models.Data.SPPOO.Profession", b =>
                {
                    b.HasOne("Data.Models.Data.SPPOO.ProfessionalDirection", "ProfessionalDirection")
                        .WithMany("Professions")
                        .HasForeignKey("IdProfessionalDirection")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProfessionalDirection");
                });

            modelBuilder.Entity("Data.Models.Data.SPPOO.ProfessionalDirection", b =>
                {
                    b.HasOne("Data.Models.Data.SPPOO.Area", "Area")
                        .WithMany("ProfessionalDirections")
                        .HasForeignKey("IdArea")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");
                });

            modelBuilder.Entity("Data.Models.Data.SPPOO.ProfessionalDirectionOrder", b =>
                {
                    b.HasOne("Data.Models.Data.SPPOO.ProfessionalDirection", "ProfessionalDirection")
                        .WithMany("ProfessionalDirectionOrders")
                        .HasForeignKey("IdProfessionalDirection")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.SPPOOOrder", "SPPOOOrder")
                        .WithMany("ProfessionalDirectionOrders")
                        .HasForeignKey("IdSPPOOOrder")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProfessionalDirection");

                    b.Navigation("SPPOOOrder");
                });

            modelBuilder.Entity("Data.Models.Data.SPPOO.ProfessionOrder", b =>
                {
                    b.HasOne("Data.Models.Data.SPPOO.Profession", "Profession")
                        .WithMany("ProfessionOrders")
                        .HasForeignKey("IdProfession")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.SPPOOOrder", "SPPOOOrder")
                        .WithMany("ProfessionOrders")
                        .HasForeignKey("IdSPPOOOrder")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profession");

                    b.Navigation("SPPOOOrder");
                });

            modelBuilder.Entity("Data.Models.Data.SPPOO.Speciality", b =>
                {
                    b.HasOne("Data.Models.Data.DOC.DOC", "DOC")
                        .WithMany("Specialities")
                        .HasForeignKey("IdDOC");

                    b.HasOne("Data.Models.Data.SPPOO.Profession", "Profession")
                        .WithMany("Specialities")
                        .HasForeignKey("IdProfession")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DOC");

                    b.Navigation("Profession");
                });

            modelBuilder.Entity("Data.Models.Data.SPPOO.SpecialityNKPD", b =>
                {
                    b.HasOne("Data.Models.Data.DOC.NKPD", "NKPD")
                        .WithMany()
                        .HasForeignKey("IdNKPD")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Data.SPPOO.Speciality", "Speciality")
                        .WithMany("SpecialityNKPDs")
                        .HasForeignKey("IdSpeciality")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NKPD");

                    b.Navigation("Speciality");
                });

            modelBuilder.Entity("Data.Models.Data.SPPOO.SpecialityOrder", b =>
                {
                    b.HasOne("Data.Models.SPPOOOrder", "SPPOOOrder")
                        .WithMany("SpecialityOrders")
                        .HasForeignKey("IdSPPOOOrder")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Data.SPPOO.Speciality", "Speciality")
                        .WithMany("SpecialityOrders")
                        .HasForeignKey("IdSpeciality")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SPPOOOrder");

                    b.Navigation("Speciality");
                });

            modelBuilder.Entity("Data.Models.Data.Training.Client", b =>
                {
                    b.HasOne("Data.Models.Data.Candidate.CandidateProvider", "CandidateProvider")
                        .WithMany()
                        .HasForeignKey("IdCandidateProvider")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Data.SPPOO.ProfessionalDirection", "ProfessionalDirection")
                        .WithMany()
                        .HasForeignKey("IdProfessionalDirection");

                    b.Navigation("CandidateProvider");

                    b.Navigation("ProfessionalDirection");
                });

            modelBuilder.Entity("Data.Models.Data.Training.ClientCourse", b =>
                {
                    b.HasOne("Data.Models.Data.Training.Client", "Client")
                        .WithMany()
                        .HasForeignKey("IdClient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Data.Training.Course", "Course")
                        .WithMany("ClientCourses")
                        .HasForeignKey("IdCourse")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Data.SPPOO.ProfessionalDirection", "ProfessionalDirection")
                        .WithMany()
                        .HasForeignKey("IdProfessionalDirection");

                    b.HasOne("Data.Models.Data.SPPOO.Speciality", "Speciality")
                        .WithMany()
                        .HasForeignKey("IdSpeciality");

                    b.Navigation("Client");

                    b.Navigation("Course");

                    b.Navigation("ProfessionalDirection");

                    b.Navigation("Speciality");
                });

            modelBuilder.Entity("Data.Models.Data.Training.ClientCourseDocument", b =>
                {
                    b.HasOne("Data.Models.Data.Training.ClientCourse", "ClientCourse")
                        .WithMany("ClientCourseDocuments")
                        .HasForeignKey("IdClientCourse")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Data.Training.CourseProtocol", "CourseProtocol")
                        .WithMany("ClientCourseDocuments")
                        .HasForeignKey("IdCourseProtocol");

                    b.HasOne("Data.Models.Data.Request.DocumentSerialNumber", "DocumentSerialNumber")
                        .WithMany()
                        .HasForeignKey("IdDocumentSerialNumber");

                    b.HasOne("Data.Models.Data.Training.ClientCourseDocument", "OriginalClientCourseDocument")
                        .WithMany()
                        .HasForeignKey("IdOriginalClientCourseDocument");

                    b.HasOne("Data.Models.Data.Request.TypeOfRequestedDocument", "TypeOfRequestedDocument")
                        .WithMany("ClientCourseDocuments")
                        .HasForeignKey("IdTypeOfRequestedDocument");

                    b.Navigation("ClientCourse");

                    b.Navigation("CourseProtocol");

                    b.Navigation("DocumentSerialNumber");

                    b.Navigation("OriginalClientCourseDocument");

                    b.Navigation("TypeOfRequestedDocument");
                });

            modelBuilder.Entity("Data.Models.Data.Training.ClientCourseDocumentStatus", b =>
                {
                    b.HasOne("Data.Models.Data.Training.ClientCourseDocument", "ClientCourseDocument")
                        .WithMany("ClientCourseDocumentStatuses")
                        .HasForeignKey("IdClientCourseDocument")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientCourseDocument");
                });

            modelBuilder.Entity("Data.Models.Data.Training.ClientCourseStatus", b =>
                {
                    b.HasOne("Data.Models.Data.Training.ClientCourse", "ClientCourse")
                        .WithMany("ClientCourseStatuses")
                        .HasForeignKey("IdClientCourse")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientCourse");
                });

            modelBuilder.Entity("Data.Models.Data.Training.ClientRequiredDocument", b =>
                {
                    b.HasOne("Data.Models.Data.Training.ClientCourse", "ClientCourse")
                        .WithMany("ClientRequiredDocuments")
                        .HasForeignKey("IdClientCourse");

                    b.HasOne("Data.Models.Data.Training.Course", "Course")
                        .WithMany("ClientRequiredDocuments")
                        .HasForeignKey("IdCourse")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientCourse");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Data.Models.Data.Training.Consulting", b =>
                {
                    b.HasOne("Data.Models.Data.Training.ConsultingClient", "ConsultingClient")
                        .WithMany("Consultings")
                        .HasForeignKey("IdConsultingClient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConsultingClient");
                });

            modelBuilder.Entity("Data.Models.Data.Training.ConsultingClient", b =>
                {
                    b.HasOne("Data.Models.Data.Candidate.CandidateProvider", "CandidateProvider")
                        .WithMany()
                        .HasForeignKey("IdCandidateProvider")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Data.Training.Client", "Client")
                        .WithMany("ConsultingClients")
                        .HasForeignKey("IdClient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CandidateProvider");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Data.Models.Data.Training.ConsultingClientRequiredDocument", b =>
                {
                    b.HasOne("Data.Models.Data.Training.ConsultingClient", "ConsultingClient")
                        .WithMany("ConsultingClientRequiredDocuments")
                        .HasForeignKey("IdConsultingClient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConsultingClient");
                });

            modelBuilder.Entity("Data.Models.Data.Training.ConsultingDocumentUploadedFile", b =>
                {
                    b.HasOne("Data.Models.Data.Training.ConsultingClient", "ConsultingClient")
                        .WithMany("ConsultingDocumentUploadedFiles")
                        .HasForeignKey("IdConsultingClient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConsultingClient");
                });

            modelBuilder.Entity("Data.Models.Data.Training.ConsultingPremises", b =>
                {
                    b.HasOne("Data.Models.Data.Training.ConsultingClient", "ConsultingClient")
                        .WithMany("ConsultingPremises")
                        .HasForeignKey("IdConsultingClient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Data.Candidate.CandidateProviderPremises", "CandidateProviderPremises")
                        .WithMany()
                        .HasForeignKey("IdPremises")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CandidateProviderPremises");

                    b.Navigation("ConsultingClient");
                });

            modelBuilder.Entity("Data.Models.Data.Training.ConsultingTrainer", b =>
                {
                    b.HasOne("Data.Models.Data.Training.ConsultingClient", "ConsultingClient")
                        .WithMany("ConsultingTrainers")
                        .HasForeignKey("IdConsultingClient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Data.Candidate.CandidateProviderTrainer", "CandidateProviderTrainer")
                        .WithMany()
                        .HasForeignKey("IdTrainer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CandidateProviderTrainer");

                    b.Navigation("ConsultingClient");
                });

            modelBuilder.Entity("Data.Models.Data.Training.Course", b =>
                {
                    b.HasOne("Data.Models.Data.Candidate.CandidateProvider", "CandidateProvider")
                        .WithMany("Courses")
                        .HasForeignKey("IdCandidateProvider");

                    b.HasOne("Data.Models.Data.Candidate.CandidateProviderPremises", "CandidateProviderPremises")
                        .WithMany()
                        .HasForeignKey("IdCandidateProviderPremises");

                    b.HasOne("Data.Models.Data.Common.Location", "Location")
                        .WithMany()
                        .HasForeignKey("IdLocation");

                    b.HasOne("Data.Models.Data.Training.Program", "Program")
                        .WithMany("Courses")
                        .HasForeignKey("IdProgram");

                    b.Navigation("CandidateProvider");

                    b.Navigation("CandidateProviderPremises");

                    b.Navigation("Location");

                    b.Navigation("Program");
                });

            modelBuilder.Entity("Data.Models.Data.Training.CourseChecking", b =>
                {
                    b.HasOne("Data.Models.Data.Training.Course", "Course")
                        .WithMany()
                        .HasForeignKey("IdCourse")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Data.Control.FollowUpControl", "FollowUpControl")
                        .WithMany()
                        .HasForeignKey("IdFollowUpControl");

                    b.Navigation("Course");

                    b.Navigation("FollowUpControl");
                });

            modelBuilder.Entity("Data.Models.Data.Training.CourseCommissionMember", b =>
                {
                    b.HasOne("Data.Models.Data.Training.Course", "Course")
                        .WithMany("CourseCommissionMembers")
                        .HasForeignKey("IdCourse")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Data.Models.Data.Training.CourseDocumentUploadedFile", b =>
                {
                    b.HasOne("Data.Models.Data.Training.ClientCourseDocument", "ClientCourseDocument")
                        .WithMany("CourseDocumentUploadedFiles")
                        .HasForeignKey("IdClientCourseDocument")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientCourseDocument");
                });

            modelBuilder.Entity("Data.Models.Data.Training.CourseOrder", b =>
                {
                    b.HasOne("Data.Models.Data.Training.Course", "Course")
                        .WithMany("CourseOrders")
                        .HasForeignKey("IdCourse")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Data.Models.Data.Training.CourseProtocol", b =>
                {
                    b.HasOne("Data.Models.Data.Candidate.CandidateProvider", "CandidateProvider")
                        .WithMany()
                        .HasForeignKey("IdCandidateProvider")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Data.Training.Course", "Course")
                        .WithMany("CourseProtocols")
                        .HasForeignKey("IdCourse")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Data.Training.CourseCommissionMember", "CourseCommissionMember")
                        .WithMany("CourseProtocols")
                        .HasForeignKey("IdCourseCommissionMember");

                    b.Navigation("CandidateProvider");

                    b.Navigation("Course");

                    b.Navigation("CourseCommissionMember");
                });

            modelBuilder.Entity("Data.Models.Data.Training.CourseProtocolGrade", b =>
                {
                    b.HasOne("Data.Models.Data.Training.ClientCourse", "ClientCourse")
                        .WithMany("CourseProtocolGrades")
                        .HasForeignKey("IdClientCourse")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Data.Training.CourseProtocol", "CourseProtocol")
                        .WithMany("CourseProtocolGrades")
                        .HasForeignKey("IdCourseProtocol")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientCourse");

                    b.Navigation("CourseProtocol");
                });

            modelBuilder.Entity("Data.Models.Data.Training.CourseSchedule", b =>
                {
                    b.HasOne("Data.Models.Data.Candidate.CandidateProviderPremises", "CandidateProviderPremises")
                        .WithMany()
                        .HasForeignKey("IdCandidateProviderPremises");

                    b.HasOne("Data.Models.Data.Candidate.CandidateProviderTrainer", "CandidateProviderTrainer")
                        .WithMany()
                        .HasForeignKey("IdCandidateProviderTrainer");

                    b.HasOne("Data.Models.Data.Training.TrainingCurriculum", "TrainingCurriculum")
                        .WithMany("CourseSchedules")
                        .HasForeignKey("IdTrainingCurriculum")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CandidateProviderPremises");

                    b.Navigation("CandidateProviderTrainer");

                    b.Navigation("TrainingCurriculum");
                });

            modelBuilder.Entity("Data.Models.Data.Training.CourseSubject", b =>
                {
                    b.HasOne("Data.Models.Data.Training.Course", "Course")
                        .WithMany("CourseSubjects")
                        .HasForeignKey("IdCourse")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Data.Models.Data.Training.CourseSubjectGrade", b =>
                {
                    b.HasOne("Data.Models.Data.Training.ClientCourse", "ClientCourse")
                        .WithMany("CourseSubjectGrades")
                        .HasForeignKey("IdClientCourse")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Data.Training.CourseSubject", "CourseSubject")
                        .WithMany("CourseSubjectGrades")
                        .HasForeignKey("IdCourseSubject");

                    b.Navigation("ClientCourse");

                    b.Navigation("CourseSubject");
                });

            modelBuilder.Entity("Data.Models.Data.Training.PremisesCourse", b =>
                {
                    b.HasOne("Data.Models.Data.Training.Course", "Course")
                        .WithMany()
                        .HasForeignKey("IdCourse")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Data.Candidate.CandidateProviderPremises", "CandidateProviderPremises")
                        .WithMany()
                        .HasForeignKey("IdPremises")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CandidateProviderPremises");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Data.Models.Data.Training.Program", b =>
                {
                    b.HasOne("Data.Models.Data.Candidate.CandidateProvider", "CandidateProvider")
                        .WithMany("Programs")
                        .HasForeignKey("IdCandidateProvider")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Data.SPPOO.FrameworkProgram", "FrameworkProgram")
                        .WithMany()
                        .HasForeignKey("IdFrameworkProgram");

                    b.HasOne("Data.Models.Data.SPPOO.Speciality", "Speciality")
                        .WithMany()
                        .HasForeignKey("IdSpeciality")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CandidateProvider");

                    b.Navigation("FrameworkProgram");

                    b.Navigation("Speciality");
                });

            modelBuilder.Entity("Data.Models.Data.Training.TrainerCourse", b =>
                {
                    b.HasOne("Data.Models.Data.Training.Course", "Course")
                        .WithMany()
                        .HasForeignKey("IdCourse")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Data.Candidate.CandidateProviderTrainer", "CandidateProviderTrainer")
                        .WithMany()
                        .HasForeignKey("IdTrainer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CandidateProviderTrainer");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Data.Models.Data.Training.TrainingCurriculum", b =>
                {
                    b.HasOne("Data.Models.Data.Candidate.CandidateCurriculum", "CandidateCurriculum")
                        .WithMany()
                        .HasForeignKey("IdCandidateCurriculum");

                    b.HasOne("Data.Models.Data.Candidate.CandidateProviderSpeciality", "CandidateProviderSpeciality")
                        .WithMany()
                        .HasForeignKey("IdCandidateProviderSpeciality")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Data.Training.Course", "Course")
                        .WithMany()
                        .HasForeignKey("IdCourse");

                    b.HasOne("Data.Models.Data.Training.Program", "Program")
                        .WithMany("TrainingCurriculums")
                        .HasForeignKey("IdProgram")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CandidateCurriculum");

                    b.Navigation("CandidateProviderSpeciality");

                    b.Navigation("Course");

                    b.Navigation("Program");
                });

            modelBuilder.Entity("Data.Models.Data.Training.TrainingCurriculumERU", b =>
                {
                    b.HasOne("Data.Models.Data.DOC.ERU", "ERU")
                        .WithMany()
                        .HasForeignKey("IdERU")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Data.Training.TrainingCurriculum", "TrainingCurriculum")
                        .WithMany("TrainingCurriculumERUs")
                        .HasForeignKey("IdTrainingCurriculum")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ERU");

                    b.Navigation("TrainingCurriculum");
                });

            modelBuilder.Entity("Data.Models.Data.Training.ValidationClient", b =>
                {
                    b.HasOne("Data.Models.Data.Candidate.CandidateProvider", "CandidateProvider")
                        .WithMany("ValidationClients")
                        .HasForeignKey("IdCandidateProvider")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Data.Training.Client", "Client")
                        .WithMany()
                        .HasForeignKey("IdClient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Data.SPPOO.FrameworkProgram", "FrameworkProgram")
                        .WithMany()
                        .HasForeignKey("IdFrameworkProgram");

                    b.HasOne("Data.Models.Data.SPPOO.Speciality", "Speciality")
                        .WithMany()
                        .HasForeignKey("IdSpeciality");

                    b.Navigation("CandidateProvider");

                    b.Navigation("Client");

                    b.Navigation("FrameworkProgram");

                    b.Navigation("Speciality");
                });

            modelBuilder.Entity("Data.Models.Data.Training.ValidationClientDocument", b =>
                {
                    b.HasOne("Data.Models.Data.Request.DocumentSerialNumber", "DocumentSerialNumber")
                        .WithMany()
                        .HasForeignKey("IdDocumentSerialNumber");

                    b.HasOne("Data.Models.Data.Training.ValidationClientDocument", "OriginalValidationClientDocument")
                        .WithMany()
                        .HasForeignKey("IdOriginalValidationClientDocument");

                    b.HasOne("Data.Models.Data.Request.TypeOfRequestedDocument", "TypeOfRequestedDocument")
                        .WithMany()
                        .HasForeignKey("IdTypeOfRequestedDocument");

                    b.HasOne("Data.Models.Data.Training.ValidationClient", "ValidationClient")
                        .WithMany("ValidationClientDocuments")
                        .HasForeignKey("IdValidationClient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Data.Training.ValidationProtocol", "ValidationProtocol")
                        .WithMany("ValidationClientDocuments")
                        .HasForeignKey("IdValidationProtocol");

                    b.Navigation("DocumentSerialNumber");

                    b.Navigation("OriginalValidationClientDocument");

                    b.Navigation("TypeOfRequestedDocument");

                    b.Navigation("ValidationClient");

                    b.Navigation("ValidationProtocol");
                });

            modelBuilder.Entity("Data.Models.Data.Training.ValidationClientDocumentStatus", b =>
                {
                    b.HasOne("Data.Models.Data.Training.ValidationClientDocument", "ValidationClientDocument")
                        .WithMany("ValidationClientDocumentStatuses")
                        .HasForeignKey("IdValidationClientDocument")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ValidationClientDocument");
                });

            modelBuilder.Entity("Data.Models.Data.Training.ValidationClientRequiredDocument", b =>
                {
                    b.HasOne("Data.Models.Data.Training.ValidationClient", "ValidationClient")
                        .WithMany("ValidationClientRequiredDocuments")
                        .HasForeignKey("IdValidationClient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ValidationClient");
                });

            modelBuilder.Entity("Data.Models.Data.Training.ValidationCommissionMember", b =>
                {
                    b.HasOne("Data.Models.Data.Training.ValidationClient", "ValidationClient")
                        .WithMany("ValidationCommissionMembers")
                        .HasForeignKey("IdValidationClient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ValidationClient");
                });

            modelBuilder.Entity("Data.Models.Data.Training.ValidationCompetency", b =>
                {
                    b.HasOne("Data.Models.Data.Training.ValidationClient", "ValidationClient")
                        .WithMany("ValidationCompetencies")
                        .HasForeignKey("IdValidationClient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ValidationClient");
                });

            modelBuilder.Entity("Data.Models.Data.Training.ValidationCurriculum", b =>
                {
                    b.HasOne("Data.Models.Data.Candidate.CandidateProviderSpeciality", "CandidateProviderSpeciality")
                        .WithMany()
                        .HasForeignKey("IdCandidateProviderSpeciality")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Data.Training.ValidationClient", "ValidationClient")
                        .WithMany("ValidationCurriculums")
                        .HasForeignKey("IdValidationClient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CandidateProviderSpeciality");

                    b.Navigation("ValidationClient");
                });

            modelBuilder.Entity("Data.Models.Data.Training.ValidationCurriculumERU", b =>
                {
                    b.HasOne("Data.Models.Data.DOC.ERU", "ERU")
                        .WithMany()
                        .HasForeignKey("IdERU")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Data.Training.ValidationCurriculum", "ValidationCurriculum")
                        .WithMany("ValidationCurriculumERUs")
                        .HasForeignKey("IdValidationCurriculum")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ERU");

                    b.Navigation("ValidationCurriculum");
                });

            modelBuilder.Entity("Data.Models.Data.Training.ValidationDocumentUploadedFile", b =>
                {
                    b.HasOne("Data.Models.Data.Training.ValidationClientDocument", "ValidationClientDocument")
                        .WithMany("ValidationDocumentUploadedFiles")
                        .HasForeignKey("IdValidationClientDocument")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ValidationClientDocument");
                });

            modelBuilder.Entity("Data.Models.Data.Training.ValidationOrder", b =>
                {
                    b.HasOne("Data.Models.Data.Training.ValidationClient", "ValidationClient")
                        .WithMany()
                        .HasForeignKey("IdValidationClient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ValidationClient");
                });

            modelBuilder.Entity("Data.Models.Data.Training.ValidationPremises", b =>
                {
                    b.HasOne("Data.Models.Data.Candidate.CandidateProviderPremises", "CandidateProviderPremises")
                        .WithMany()
                        .HasForeignKey("IdPremises")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Data.Training.ValidationClient", "ValidationClient")
                        .WithMany("ValidationPremises")
                        .HasForeignKey("IdValidationClient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CandidateProviderPremises");

                    b.Navigation("ValidationClient");
                });

            modelBuilder.Entity("Data.Models.Data.Training.ValidationProtocol", b =>
                {
                    b.HasOne("Data.Models.Data.Candidate.CandidateProvider", "CandidateProvider")
                        .WithMany()
                        .HasForeignKey("IdCandidateProvider")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Data.Training.ValidationClient", "ValidationClient")
                        .WithMany("ValidationProtocols")
                        .HasForeignKey("IdValidationClient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Data.Training.ValidationCommissionMember", "ValidationCommissionMember")
                        .WithMany("ValidationProtocols")
                        .HasForeignKey("IdValidationCommissionMember");

                    b.Navigation("CandidateProvider");

                    b.Navigation("ValidationClient");

                    b.Navigation("ValidationCommissionMember");
                });

            modelBuilder.Entity("Data.Models.Data.Training.ValidationProtocolGrade", b =>
                {
                    b.HasOne("Data.Models.Data.Training.ValidationClient", "ValidationClient")
                        .WithMany("ValidationProtocolGrades")
                        .HasForeignKey("IdValidationClient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Data.Training.ValidationProtocol", "ValidationProtocol")
                        .WithMany("ValidationProtocolGrades")
                        .HasForeignKey("IdValidationProtocol")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ValidationClient");

                    b.Navigation("ValidationProtocol");
                });

            modelBuilder.Entity("Data.Models.Data.Training.ValidationTrainer", b =>
                {
                    b.HasOne("Data.Models.Data.Candidate.CandidateProviderTrainer", "CandidateProviderTrainer")
                        .WithMany()
                        .HasForeignKey("IdTrainer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Data.Training.ValidationClient", "ValidationClient")
                        .WithMany()
                        .HasForeignKey("IdValidationClient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CandidateProviderTrainer");

                    b.Navigation("ValidationClient");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Data.Models.Data.Role.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Data.Models.Data.ProviderData.ApplicationUser", null)
                        .WithMany("Claims")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("Data.Models.Data.ProviderData.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Data.Models.Data.ProviderData.ApplicationUser", null)
                        .WithMany("Logins")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("Data.Models.Data.ProviderData.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Data.Models.Data.ProviderData.ApplicationUser", null)
                        .WithMany("Roles")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("Data.Models.Data.Role.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Data.ProviderData.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Data.Models.Data.ProviderData.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Models.Data.Archive.AnnualInfo", b =>
                {
                    b.Navigation("AnnualInfoStatuses");
                });

            modelBuilder.Entity("Data.Models.Data.Archive.ArchCandidateProvider", b =>
                {
                    b.Navigation("CandidateProviderPremises");

                    b.Navigation("CandidateProviderSpecialities");

                    b.Navigation("CandidateProviderTrainers");
                });

            modelBuilder.Entity("Data.Models.Data.Archive.ArchCandidateProviderPremises", b =>
                {
                    b.Navigation("CandidateProviderPremisesSpecialities");
                });

            modelBuilder.Entity("Data.Models.Data.Archive.ArchCandidateProviderSpeciality", b =>
                {
                    b.Navigation("CandidateCurriculums");
                });

            modelBuilder.Entity("Data.Models.Data.Archive.ArchCandidateProviderTrainer", b =>
                {
                    b.Navigation("CandidateProviderTrainerQualifications");
                });

            modelBuilder.Entity("Data.Models.Data.Archive.SelfAssessmentReport", b =>
                {
                    b.Navigation("SelfAssessmentReportStatuses");
                });

            modelBuilder.Entity("Data.Models.Data.Assessment.Answer", b =>
                {
                    b.Navigation("UserAnswers");
                });

            modelBuilder.Entity("Data.Models.Data.Assessment.Question", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("UserAnswerOpens");

                    b.Navigation("UserAnswers");
                });

            modelBuilder.Entity("Data.Models.Data.Assessment.Survey", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("SurveyResults");
                });

            modelBuilder.Entity("Data.Models.Data.Assessment.SurveyResult", b =>
                {
                    b.Navigation("UserAnswerOpens");
                });

            modelBuilder.Entity("Data.Models.Data.Assessment.UserAnswerOpen", b =>
                {
                    b.Navigation("UserAnswers");
                });

            modelBuilder.Entity("Data.Models.Data.Candidate.CandidateCurriculum", b =>
                {
                    b.Navigation("CandidateCurriculumERUs");
                });

            modelBuilder.Entity("Data.Models.Data.Candidate.CandidateCurriculumModification", b =>
                {
                    b.Navigation("CandidateCurriculums");
                });

            modelBuilder.Entity("Data.Models.Data.Candidate.CandidateProvider", b =>
                {
                    b.Navigation("AnnualInfos");

                    b.Navigation("CandidateProviderConsultings");

                    b.Navigation("CandidateProviderDocuments");

                    b.Navigation("CandidateProviderPeople");

                    b.Navigation("CandidateProviderPremises");

                    b.Navigation("CandidateProviderSpecialities");

                    b.Navigation("CandidateProviderStatuses");

                    b.Navigation("CandidateProviderTrainers");

                    b.Navigation("Courses");

                    b.Navigation("Programs");

                    b.Navigation("ProviderDocumentOffers");

                    b.Navigation("RequestReports");

                    b.Navigation("ValidationClients");
                });

            modelBuilder.Entity("Data.Models.Data.Candidate.CandidateProviderPremises", b =>
                {
                    b.Navigation("CandidateProviderPremisesCheckings");

                    b.Navigation("CandidateProviderPremisesDocuments");

                    b.Navigation("CandidateProviderPremisesRooms");

                    b.Navigation("CandidateProviderPremisesSpecialities");
                });

            modelBuilder.Entity("Data.Models.Data.Candidate.CandidateProviderSpeciality", b =>
                {
                    b.Navigation("CandidateCurriculumModifications");

                    b.Navigation("CandidateCurriculums");
                });

            modelBuilder.Entity("Data.Models.Data.Candidate.CandidateProviderTrainer", b =>
                {
                    b.Navigation("CandidateProviderTrainerCheckings");

                    b.Navigation("CandidateProviderTrainerDocuments");

                    b.Navigation("CandidateProviderTrainerProfiles");

                    b.Navigation("CandidateProviderTrainerQualifications");

                    b.Navigation("CandidateProviderTrainerSpecialities");
                });

            modelBuilder.Entity("Data.Models.Data.Common.District", b =>
                {
                    b.Navigation("Municipalities");
                });

            modelBuilder.Entity("Data.Models.Data.Common.KeyType", b =>
                {
                    b.Navigation("KeyValues");
                });

            modelBuilder.Entity("Data.Models.Data.Common.MenuNode", b =>
                {
                    b.Navigation("MenuNodeRoles");
                });

            modelBuilder.Entity("Data.Models.Data.Common.Municipality", b =>
                {
                    b.Navigation("Locations");

                    b.Navigation("Regions");
                });

            modelBuilder.Entity("Data.Models.Data.Common.Person", b =>
                {
                    b.Navigation("CandidateProviderPersons");
                });

            modelBuilder.Entity("Data.Models.Data.Control.FollowUpControl", b =>
                {
                    b.Navigation("FollowUpControlDocuments");

                    b.Navigation("FollowUpControlExperts");

                    b.Navigation("FollowUpControlUploadedFiles");
                });

            modelBuilder.Entity("Data.Models.Data.DOC.DOC", b =>
                {
                    b.Navigation("ERUs");

                    b.Navigation("Specialities");

                    b.Navigation("docNkpds");
                });

            modelBuilder.Entity("Data.Models.Data.DOC.ERU", b =>
                {
                    b.Navigation("ERUSpecialities");
                });

            modelBuilder.Entity("Data.Models.Data.ExternalExpertCommission.Expert", b =>
                {
                    b.Navigation("ExpertDOCs");

                    b.Navigation("ExpertDocuments");

                    b.Navigation("ExpertExpertCommissions");

                    b.Navigation("ExpertNapoos");

                    b.Navigation("ExpertProfessionalDirections");

                    b.Navigation("FollowUpControlExperts");

                    b.Navigation("ProcedureDocuments");

                    b.Navigation("ProcedureExternalExperts");
                });

            modelBuilder.Entity("Data.Models.Data.ProviderData.ApplicationUser", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Logins");

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("Data.Models.Data.ProviderData.StartedProcedure", b =>
                {
                    b.Navigation("CandidateProviders");

                    b.Navigation("NegativeIssues");

                    b.Navigation("ProcedureDocuments");

                    b.Navigation("ProcedureExpertCommissions");

                    b.Navigation("ProcedureExternalExperts");

                    b.Navigation("StartedProcedureProgresses");
                });

            modelBuilder.Entity("Data.Models.Data.Request.NAPOORequestDoc", b =>
                {
                    b.Navigation("ProviderRequestDocuments");
                });

            modelBuilder.Entity("Data.Models.Data.Request.ProviderRequestDocument", b =>
                {
                    b.Navigation("RequestDocumentManagements");

                    b.Navigation("RequestDocumentStatuses");

                    b.Navigation("RequestDocumentTypes");
                });

            modelBuilder.Entity("Data.Models.Data.Request.RequestDocumentManagement", b =>
                {
                    b.Navigation("DocumentSerialNumbers");

                    b.Navigation("RequestDocumentManagementUploadedFiles");

                    b.Navigation("RequestDocumentTypes");
                });

            modelBuilder.Entity("Data.Models.Data.Request.RequestReport", b =>
                {
                    b.Navigation("DocumentSerialNumbers");

                    b.Navigation("ReportUploadedDocs");
                });

            modelBuilder.Entity("Data.Models.Data.Request.TypeOfRequestedDocument", b =>
                {
                    b.Navigation("ClientCourseDocuments");

                    b.Navigation("DocumentSerialNumbers");

                    b.Navigation("DocumentSeries");

                    b.Navigation("ProviderDocumentOffers");

                    b.Navigation("RequestDocumentManagements");

                    b.Navigation("RequestDocumentTypes");
                });

            modelBuilder.Entity("Data.Models.Data.SPPOO.Area", b =>
                {
                    b.Navigation("ProfessionalDirections");
                });

            modelBuilder.Entity("Data.Models.Data.SPPOO.FrameworkProgram", b =>
                {
                    b.Navigation("FrameworkProgramFormEducations");
                });

            modelBuilder.Entity("Data.Models.Data.SPPOO.Profession", b =>
                {
                    b.Navigation("DOCs");

                    b.Navigation("ProfessionOrders");

                    b.Navigation("Specialities");
                });

            modelBuilder.Entity("Data.Models.Data.SPPOO.ProfessionalDirection", b =>
                {
                    b.Navigation("ProfessionalDirectionOrders");

                    b.Navigation("Professions");
                });

            modelBuilder.Entity("Data.Models.Data.SPPOO.Speciality", b =>
                {
                    b.Navigation("CandidateProviderPremisesSpecialities");

                    b.Navigation("CandidateProviderTrainerSpecialities");

                    b.Navigation("ERUSpecialities");

                    b.Navigation("SpecialityNKPDs");

                    b.Navigation("SpecialityOrders");
                });

            modelBuilder.Entity("Data.Models.Data.Training.Client", b =>
                {
                    b.Navigation("ConsultingClients");
                });

            modelBuilder.Entity("Data.Models.Data.Training.ClientCourse", b =>
                {
                    b.Navigation("ClientCourseDocuments");

                    b.Navigation("ClientCourseStatuses");

                    b.Navigation("ClientRequiredDocuments");

                    b.Navigation("CourseProtocolGrades");

                    b.Navigation("CourseSubjectGrades");
                });

            modelBuilder.Entity("Data.Models.Data.Training.ClientCourseDocument", b =>
                {
                    b.Navigation("ClientCourseDocumentStatuses");

                    b.Navigation("CourseDocumentUploadedFiles");
                });

            modelBuilder.Entity("Data.Models.Data.Training.ConsultingClient", b =>
                {
                    b.Navigation("ConsultingClientRequiredDocuments");

                    b.Navigation("ConsultingDocumentUploadedFiles");

                    b.Navigation("ConsultingPremises");

                    b.Navigation("ConsultingTrainers");

                    b.Navigation("Consultings");
                });

            modelBuilder.Entity("Data.Models.Data.Training.Course", b =>
                {
                    b.Navigation("ClientCourses");

                    b.Navigation("ClientRequiredDocuments");

                    b.Navigation("CourseCommissionMembers");

                    b.Navigation("CourseOrders");

                    b.Navigation("CourseProtocols");

                    b.Navigation("CourseSubjects");
                });

            modelBuilder.Entity("Data.Models.Data.Training.CourseCommissionMember", b =>
                {
                    b.Navigation("CourseProtocols");
                });

            modelBuilder.Entity("Data.Models.Data.Training.CourseProtocol", b =>
                {
                    b.Navigation("ClientCourseDocuments");

                    b.Navigation("CourseProtocolGrades");
                });

            modelBuilder.Entity("Data.Models.Data.Training.CourseSubject", b =>
                {
                    b.Navigation("CourseSubjectGrades");
                });

            modelBuilder.Entity("Data.Models.Data.Training.Program", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("TrainingCurriculums");
                });

            modelBuilder.Entity("Data.Models.Data.Training.TrainingCurriculum", b =>
                {
                    b.Navigation("CourseSchedules");

                    b.Navigation("TrainingCurriculumERUs");
                });

            modelBuilder.Entity("Data.Models.Data.Training.ValidationClient", b =>
                {
                    b.Navigation("ValidationClientDocuments");

                    b.Navigation("ValidationClientRequiredDocuments");

                    b.Navigation("ValidationCommissionMembers");

                    b.Navigation("ValidationCompetencies");

                    b.Navigation("ValidationCurriculums");

                    b.Navigation("ValidationPremises");

                    b.Navigation("ValidationProtocolGrades");

                    b.Navigation("ValidationProtocols");
                });

            modelBuilder.Entity("Data.Models.Data.Training.ValidationClientDocument", b =>
                {
                    b.Navigation("ValidationClientDocumentStatuses");

                    b.Navigation("ValidationDocumentUploadedFiles");
                });

            modelBuilder.Entity("Data.Models.Data.Training.ValidationCommissionMember", b =>
                {
                    b.Navigation("ValidationProtocols");
                });

            modelBuilder.Entity("Data.Models.Data.Training.ValidationCurriculum", b =>
                {
                    b.Navigation("ValidationCurriculumERUs");
                });

            modelBuilder.Entity("Data.Models.Data.Training.ValidationProtocol", b =>
                {
                    b.Navigation("ValidationClientDocuments");

                    b.Navigation("ValidationProtocolGrades");
                });

            modelBuilder.Entity("Data.Models.SPPOOOrder", b =>
                {
                    b.Navigation("ProfessionOrders");

                    b.Navigation("ProfessionalDirectionOrders");

                    b.Navigation("SpecialityOrders");
                });
#pragma warning restore 612, 618
        }
    }
}
