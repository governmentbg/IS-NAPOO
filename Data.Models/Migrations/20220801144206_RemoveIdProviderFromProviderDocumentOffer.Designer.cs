// <auto-generated />
using System;
using Data.Models.DB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data.Models.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220801144206_RemoveIdProviderFromProviderDocumentOffer")]
    partial class RemoveIdProviderFromProviderDocumentOffer
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Data.Models.Data.Candidate.CandidateCurriculum", b =>
                {
                    b.Property<int>("IdCandidateCurriculum")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCandidateCurriculum"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCandidateProviderSpeciality")
                        .HasColumnType("int");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int>("IdProfessionalTraining")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("Practice")
                        .HasColumnType("float");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double?>("Theory")
                        .HasColumnType("float");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.HasKey("IdCandidateCurriculum");

                    b.HasIndex("IdCandidateProviderSpeciality");

                    b.ToTable("Candidate_Curriculum");
                });

            modelBuilder.Entity("Data.Models.Data.Candidate.CandidateCurriculumERU", b =>
                {
                    b.Property<int>("IdCandidateCurriculumERU")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCandidateCurriculumERU"), 1L, 1);

                    b.Property<int>("IdCandidateCurriculum")
                        .HasColumnType("int");

                    b.Property<int>("IdERU")
                        .HasColumnType("int");

                    b.HasKey("IdCandidateCurriculumERU");

                    b.HasIndex("IdCandidateCurriculum");

                    b.HasIndex("IdERU");

                    b.ToTable("Candidate_CurriculumERU");
                });

            modelBuilder.Entity("Data.Models.Data.Candidate.CandidateProvider", b =>
                {
                    b.Property<int>("IdCandidate_Provider")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCandidate_Provider"), 1L, 1);

                    b.Property<bool>("AccessibilityInfo")
                        .HasColumnType("bit");

                    b.Property<string>("AdditionalInfo")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<DateTime?>("ApplicationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ApplicationNumber")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("AttorneyName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateConfirmEMail")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateConfirmRequestNAPOO")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateRequest")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DueDateRequest")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IdApplicationFiling")
                        .HasColumnType("int")
                        .HasComment("Начин на подаване на заявление и документ за платена държавна такса");

                    b.Property<int?>("IdApplicationStatus")
                        .HasColumnType("int");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int?>("IdLocation")
                        .HasColumnType("int");

                    b.Property<int?>("IdLocationCorrespondence")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int>("IdProviderOwnership")
                        .HasColumnType("int");

                    b.Property<int>("IdProviderRegistration")
                        .HasColumnType("int");

                    b.Property<int>("IdProviderStatus")
                        .HasColumnType("int");

                    b.Property<int?>("IdReceiveLicense")
                        .HasColumnType("int")
                        .HasComment("Начин на получаване на административен акт и лицензия");

                    b.Property<int?>("IdStartedProcedure")
                        .HasColumnType("int");

                    b.Property<int?>("IdTypeApplication")
                        .HasColumnType("int");

                    b.Property<int>("IdTypeLicense")
                        .HasColumnType("int");

                    b.Property<string>("Indent")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ManagerName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("OnlineTrainingInfo")
                        .HasColumnType("bit");

                    b.Property<string>("PersonNameCorrespondence")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PoviderBulstat")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ProviderAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ProviderAddressCorrespondence")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ProviderEmail")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ProviderEmailCorrespondence")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ProviderFax")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ProviderFaxCorrespondence")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ProviderName")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("ProviderOwner")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ProviderPhone")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ProviderPhoneCorrespondence")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ProviderWeb")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Token")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("UploadedFileName")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("ZipCodeCorrespondence")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.HasKey("IdCandidate_Provider");

                    b.HasIndex("IdLocation");

                    b.HasIndex("IdLocationCorrespondence");

                    b.HasIndex("IdStartedProcedure");

                    b.ToTable("Candidate_Provider");
                });

            modelBuilder.Entity("Data.Models.Data.Candidate.CandidateProviderDocument", b =>
                {
                    b.Property<int>("IdCandidateProviderDocument")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCandidateProviderDocument"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DocumentTitle")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasComment("Описание на документа");

                    b.Property<int>("IdCandidateProvider")
                        .HasColumnType("int")
                        .HasComment("Връзка с CPO,CIPO - Обучаваща институция");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdDocumentType")
                        .HasColumnType("int")
                        .HasComment("Вид на документа");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UploadedFileName")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasComment("UploadedFileName");

                    b.HasKey("IdCandidateProviderDocument");

                    b.HasIndex("IdCandidateProvider");

                    b.ToTable("Candidate_ProviderDocument");
                });

            modelBuilder.Entity("Data.Models.Data.Candidate.CandidateProviderPerson", b =>
                {
                    b.Property<int>("IdCandidateProviderPerson")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCandidateProviderPerson"), 1L, 1);

                    b.Property<int>("IdCandidate_Provider")
                        .HasColumnType("int");

                    b.Property<int>("IdPerson")
                        .HasColumnType("int");

                    b.HasKey("IdCandidateProviderPerson");

                    b.HasIndex("IdCandidate_Provider");

                    b.HasIndex("IdPerson");

                    b.ToTable("Candidate_ProviderPerson");
                });

            modelBuilder.Entity("Data.Models.Data.Candidate.CandidateProviderPremises", b =>
                {
                    b.Property<int>("IdCandidateProviderPremises")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCandidateProviderPremises"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCandidate_Provider")
                        .HasColumnType("int")
                        .HasComment("CPO,CIPO - Кандидат Обучаваща институция");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int?>("IdLocation")
                        .HasColumnType("int")
                        .HasComment("Населено място");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int>("IdOwnership")
                        .HasColumnType("int")
                        .HasComment("Форма на собственост");

                    b.Property<int>("IdStatus")
                        .HasColumnType("int")
                        .HasComment("Статус");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Phone")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Телефон");

                    b.Property<string>("PremisesName")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasComment("Наименование на материално-техническата база");

                    b.Property<string>("PremisesNote")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("ProviderAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Адрес");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)")
                        .HasComment("Пощенски код");

                    b.HasKey("IdCandidateProviderPremises");

                    b.HasIndex("IdCandidate_Provider");

                    b.HasIndex("IdLocation");

                    b.ToTable("Candidate_ProviderPremises");
                });

            modelBuilder.Entity("Data.Models.Data.Candidate.CandidateProviderPremisesDocument", b =>
                {
                    b.Property<int>("IdCandidateProviderPremisesDocument")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCandidateProviderPremisesDocument"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DocumentTitle")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasComment("Описание на документа");

                    b.Property<int>("IdCandidateProviderPremises")
                        .HasColumnType("int")
                        .HasComment("Метериална техническа база");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdDocumentType")
                        .HasColumnType("int")
                        .HasComment("Вид на документа");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UploadedFileName")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.HasKey("IdCandidateProviderPremisesDocument");

                    b.HasIndex("IdCandidateProviderPremises");

                    b.ToTable("Candidate_ProviderPremisesDocument");
                });

            modelBuilder.Entity("Data.Models.Data.Candidate.CandidateProviderPremisesRoom", b =>
                {
                    b.Property<int>("IdCandidateProviderPremisesRoom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCandidateProviderPremisesRoom"), 1L, 1);

                    b.Property<int?>("Area")
                        .HasColumnType("int")
                        .HasComment("Приблизителна площ (кв. м.");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Equipment")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int>("IdCandidateProviderPremises")
                        .HasColumnType("int")
                        .HasComment("Метериална техническа база");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int>("IdPremisesType")
                        .HasColumnType("int")
                        .HasComment("Вид на помещението");

                    b.Property<int>("IdUsage")
                        .HasColumnType("int")
                        .HasComment("Вид на провежданото обучение");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PremisesRoomName")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasComment("Наименование на помещението");

                    b.Property<int?>("Workplace")
                        .HasColumnType("int")
                        .HasComment("Брой работни места");

                    b.HasKey("IdCandidateProviderPremisesRoom");

                    b.HasIndex("IdCandidateProviderPremises");

                    b.ToTable("Candidate_ProviderPremisesRoom");
                });

            modelBuilder.Entity("Data.Models.Data.Candidate.CandidateProviderPremisesSpeciality", b =>
                {
                    b.Property<int>("IdCandidateProviderPremisesSpeciality")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCandidateProviderPremisesSpeciality"), 1L, 1);

                    b.Property<int>("IdCandidateProviderPremises")
                        .HasColumnType("int")
                        .HasComment("Метериална техническа база");

                    b.Property<int>("IdSpeciality")
                        .HasColumnType("int")
                        .HasComment("Връзка с  Специалност");

                    b.Property<int>("IdUsage")
                        .HasColumnType("int")
                        .HasComment("Вид на провежданото обучение");

                    b.HasKey("IdCandidateProviderPremisesSpeciality");

                    b.HasIndex("IdCandidateProviderPremises");

                    b.HasIndex("IdSpeciality");

                    b.ToTable("Candidate_ProviderPremisesSpeciality");
                });

            modelBuilder.Entity("Data.Models.Data.Candidate.CandidateProviderSpeciality", b =>
                {
                    b.Property<int>("IdCandidateProviderSpeciality")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCandidateProviderSpeciality"), 1L, 1);

                    b.Property<int>("IdCandidate_Provider")
                        .HasColumnType("int");

                    b.Property<int?>("IdFormEducation")
                        .HasColumnType("int")
                        .HasComment("Форма на обучение");

                    b.Property<int?>("IdFrameworkProgram")
                        .HasColumnType("int")
                        .HasComment("Рамкова програма");

                    b.Property<int>("IdSpeciality")
                        .HasColumnType("int");

                    b.HasKey("IdCandidateProviderSpeciality");

                    b.HasIndex("IdCandidate_Provider");

                    b.HasIndex("IdFrameworkProgram");

                    b.HasIndex("IdSpeciality");

                    b.ToTable("Candidate_ProviderSpeciality");
                });

            modelBuilder.Entity("Data.Models.Data.Candidate.CandidateProviderStatus", b =>
                {
                    b.Property<int>("IdCandidateProviderStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCandidateProviderStatus"), 1L, 1);

                    b.Property<int>("IdCandidate_Provider")
                        .HasColumnType("int");

                    b.Property<int>("IdStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("StatusDate")
                        .HasColumnType("datetime2");

                    b.HasKey("IdCandidateProviderStatus");

                    b.HasIndex("IdCandidate_Provider");

                    b.ToTable("Candidate_ProviderStatus");
                });

            modelBuilder.Entity("Data.Models.Data.Candidate.CandidateProviderTrainer", b =>
                {
                    b.Property<int>("IdCandidateProviderTrainer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCandidateProviderTrainer"), 1L, 1);

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ContractDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EducationAcademicNotes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("EducationCertificateNotes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("EducationSpecialityNotes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FamilyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("IdCandidate_Provider")
                        .HasColumnType("int");

                    b.Property<int?>("IdContractType")
                        .HasColumnType("int");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdEducation")
                        .HasColumnType("int");

                    b.Property<int?>("IdIndentType")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int?>("IdNationality")
                        .HasColumnType("int");

                    b.Property<int?>("IdSex")
                        .HasColumnType("int");

                    b.Property<int?>("IdStatus")
                        .HasColumnType("int");

                    b.Property<string>("Indent")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("IsAndragog")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecondName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IdCandidateProviderTrainer");

                    b.HasIndex("IdCandidate_Provider");

                    b.ToTable("Candidate_ProviderTrainer");
                });

            modelBuilder.Entity("Data.Models.Data.Candidate.CandidateProviderTrainerDocument", b =>
                {
                    b.Property<int>("IdCandidateProviderTrainerDocument")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCandidateProviderTrainerDocument"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DocumentTitle")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<int>("IdCandidateProviderTrainer")
                        .HasColumnType("int");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdDocumentType")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UploadedFileName")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.HasKey("IdCandidateProviderTrainerDocument");

                    b.HasIndex("IdCandidateProviderTrainer");

                    b.ToTable("Candidate_ProviderTrainerDocument");
                });

            modelBuilder.Entity("Data.Models.Data.Candidate.CandidateProviderTrainerProfile", b =>
                {
                    b.Property<int>("IdCandidateProviderTrainerProfile")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCandidateProviderTrainerProfile"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCandidateProviderTrainer")
                        .HasColumnType("int");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int>("IdProfessionalDirection")
                        .HasColumnType("int");

                    b.Property<bool>("IsPractice")
                        .HasColumnType("bit");

                    b.Property<bool>("IsProfessionalDirectionQualified")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTheory")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.HasKey("IdCandidateProviderTrainerProfile");

                    b.HasIndex("IdCandidateProviderTrainer");

                    b.HasIndex("IdProfessionalDirection");

                    b.ToTable("Candidate_ProviderTrainerProfile");
                });

            modelBuilder.Entity("Data.Models.Data.Candidate.CandidateProviderTrainerQualification", b =>
                {
                    b.Property<int>("IdCandidateProviderTrainerQualification")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCandidateProviderTrainerQualification"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCandidateProviderTrainer")
                        .HasColumnType("int");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int?>("IdProfession")
                        .HasColumnType("int");

                    b.Property<int>("IdQualificationType")
                        .HasColumnType("int");

                    b.Property<int>("IdTrainingQualificationType")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("QualificationDuration")
                        .HasColumnType("int");

                    b.Property<string>("QualificationName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("TrainingFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("TrainingTo")
                        .HasColumnType("datetime2");

                    b.HasKey("IdCandidateProviderTrainerQualification");

                    b.HasIndex("IdCandidateProviderTrainer");

                    b.HasIndex("IdProfession");

                    b.ToTable("Candidate_ProviderTrainerQualification");
                });

            modelBuilder.Entity("Data.Models.Data.Candidate.CandidateProviderTrainerSpeciality", b =>
                {
                    b.Property<int>("IdCandidateProviderTrainerSpeciality")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCandidateProviderTrainerSpeciality"), 1L, 1);

                    b.Property<int>("IdCandidateProviderTrainer")
                        .HasColumnType("int")
                        .HasComment("Връзка с Преподавател");

                    b.Property<int>("IdSpeciality")
                        .HasColumnType("int")
                        .HasComment("Връзка с  Специалност");

                    b.Property<int>("IdUsage")
                        .HasColumnType("int")
                        .HasComment("Вид на провежданото обучение");

                    b.HasKey("IdCandidateProviderTrainerSpeciality");

                    b.HasIndex("IdCandidateProviderTrainer");

                    b.HasIndex("IdSpeciality");

                    b.ToTable("Candidate_ProviderTrainerSpeciality");
                });

            modelBuilder.Entity("Data.Models.Data.Common.AllowIP", b =>
                {
                    b.Property<int>("idAllowIP")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idAllowIP"), 1L, 1);

                    b.Property<string>("Commnet")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("IP")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsAllow")
                        .HasColumnType("bit");

                    b.HasKey("idAllowIP");

                    b.ToTable("AllowIP");
                });

            modelBuilder.Entity("Data.Models.Data.Common.District", b =>
                {
                    b.Property<int>("idDistrict")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idDistrict"), 1L, 1);

                    b.Property<string>("DistrictCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("DistrictName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("int_obl_id_old")
                        .HasColumnType("int");

                    b.HasKey("idDistrict");

                    b.ToTable("District");
                });

            modelBuilder.Entity("Data.Models.Data.Common.KeyType", b =>
                {
                    b.Property<int>("IdKeyType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdKeyType"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("bit");

                    b.Property<string>("KeyTypeIntCode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("KeyTypeName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.HasKey("IdKeyType");

                    b.ToTable("KeyType");
                });

            modelBuilder.Entity("Data.Models.Data.Common.KeyValue", b =>
                {
                    b.Property<int>("IdKeyValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdKeyValue"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DefaultValue1")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("DefaultValue2")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("DescriptionEN")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("FormattedText")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("FormattedTextEN")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdKeyType")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<string>("KeyValueIntCode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("NameEN")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("IdKeyValue");

                    b.HasIndex("IdKeyType");

                    b.ToTable("KeyValue");
                });

            modelBuilder.Entity("Data.Models.Data.Common.Location", b =>
                {
                    b.Property<int>("idLocation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idLocation"), 1L, 1);

                    b.Property<string>("Cat")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Height")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("LocationCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PhoneCode")
                        .HasColumnType("int");

                    b.Property<int>("PostCode")
                        .HasColumnType("int");

                    b.Property<int>("idMunicipality")
                        .HasColumnType("int");

                    b.Property<int>("int_ekatte_id_old")
                        .HasColumnType("int");

                    b.Property<string>("kati")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("idLocation");

                    b.HasIndex("idMunicipality");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("Data.Models.Data.Common.MenuNode", b =>
                {
                    b.Property<int>("IdMenuNode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdMenuNode"), 1L, 1);

                    b.Property<string>("CssClass")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CssClassIcon")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("IdParentNode")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("NodeOrder")
                        .HasColumnType("int");

                    b.Property<string>("QueryParams")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("Target")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.HasKey("IdMenuNode");

                    b.ToTable("MenuNode");
                });

            modelBuilder.Entity("Data.Models.Data.Common.MenuNodeRole", b =>
                {
                    b.Property<int>("IdMenuNodeRole")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdMenuNodeRole"), 1L, 1);

                    b.Property<string>("IdApplicationRole")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Връзка с Роля");

                    b.Property<int>("IdMenuNode")
                        .HasColumnType("int")
                        .HasComment("Връзка с елемент от менюто");

                    b.HasKey("IdMenuNodeRole");

                    b.HasIndex("IdApplicationRole");

                    b.HasIndex("IdMenuNode");

                    b.ToTable("MenuNodeRole");
                });

            modelBuilder.Entity("Data.Models.Data.Common.Municipality", b =>
                {
                    b.Property<int>("idMunicipality")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idMunicipality"), 1L, 1);

                    b.Property<string>("MunicipalityCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("MunicipalityName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("idDistrict")
                        .HasColumnType("int");

                    b.Property<int>("int_municipality_id_old")
                        .HasColumnType("int");

                    b.HasKey("idMunicipality");

                    b.HasIndex("idDistrict");

                    b.ToTable("Municipality");
                });

            modelBuilder.Entity("Data.Models.Data.Common.Notification", b =>
                {
                    b.Property<int>("IdNotification")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdNotification"), 1L, 1);

                    b.Property<string>("About")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int?>("IdPersonFrom")
                        .HasColumnType("int");

                    b.Property<int?>("IdPersonTo")
                        .HasColumnType("int");

                    b.Property<int>("IdStatusNotification")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NotificationText")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SendDate")
                        .HasColumnType("datetime2");

                    b.HasKey("IdNotification");

                    b.HasIndex("IdPersonFrom");

                    b.HasIndex("IdPersonTo");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("Data.Models.Data.Common.Person", b =>
                {
                    b.Property<int>("IdPerson")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPerson"), 1L, 1);

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FamilyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int?>("IdIndentType")
                        .HasColumnType("int");

                    b.Property<int?>("IdLocation")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int?>("IdSex")
                        .HasColumnType("int");

                    b.Property<string>("Indent")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PersonalID")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime?>("PersonalIDDateFrom")
                        .HasColumnType("datetime2");

                    b.Property<string>("PersonalIDIssueBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PostCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("SecondName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TaxOffice")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Данъчна служба");

                    b.Property<string>("Title")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("IdPerson");

                    b.HasIndex("IdLocation");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("Data.Models.Data.Common.Policy", b =>
                {
                    b.Property<int>("idPolicy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idPolicy"), 1L, 1);

                    b.Property<string>("PolicyCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Код на Policy");

                    b.Property<string>("PolicyDescription")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Описание на Policy");

                    b.HasKey("idPolicy");

                    b.HasIndex("PolicyCode")
                        .IsUnique();

                    b.ToTable("Policy");
                });

            modelBuilder.Entity("Data.Models.Data.Common.Region", b =>
                {
                    b.Property<int>("idRegion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idRegion"), 1L, 1);

                    b.Property<string>("RegionName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("idMunicipality")
                        .HasColumnType("int");

                    b.Property<int>("int_municipality_details_id_old")
                        .HasColumnType("int");

                    b.HasKey("idRegion");

                    b.HasIndex("idMunicipality");

                    b.ToTable("Region");
                });

            modelBuilder.Entity("Data.Models.Data.Common.Sequence", b =>
                {
                    b.Property<int>("idSequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idSequence"), 1L, 1);

                    b.Property<int?>("IdResource")
                        .HasColumnType("int");

                    b.Property<long>("NextVal")
                        .HasColumnType("bigint");

                    b.Property<string>("Resource")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Year")
                        .HasColumnType("int");

                    b.HasKey("idSequence");

                    b.ToTable("Sequence");
                });

            modelBuilder.Entity("Data.Models.Data.Common.Setting", b =>
                {
                    b.Property<int>("idSetting")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idSetting"), 1L, 1);

                    b.Property<string>("SettingClass")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SettingDescription")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("SettingIntCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SettingName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("SettingValue")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("idSetting");

                    b.ToTable("Setting");
                });

            modelBuilder.Entity("Data.Models.Data.Common.TemplateDocument", b =>
                {
                    b.Property<int>("idTemplateDocument")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idTemplateDocument"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdApplicationType")
                        .HasColumnType("int");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int>("IdModule")
                        .HasColumnType("int");

                    b.Property<int>("IdStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TemplateDescription")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("TemplateName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("TemplatePath")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("UploadedFileName")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.HasKey("idTemplateDocument");

                    b.ToTable("TemplateDocument");
                });

            modelBuilder.Entity("Data.Models.Data.DOC.DOC", b =>
                {
                    b.Property<int>("IdDOC")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdDOC"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescriptionProfession")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2")
                        .HasComment("В сила до");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int>("IdProfession")
                        .HasColumnType("int");

                    b.Property<int>("IdStatus")
                        .HasColumnType("int")
                        .HasComment("Статус");

                    b.Property<bool>("IsDOI")
                        .HasColumnType("bit")
                        .HasComment("Държавни образователни изисквания");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("Regulation")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("RequirementsCandidates")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<string>("RequirementsMaterialBase")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<string>("RequirementsТrainers")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasComment("В сила от");

                    b.Property<string>("UploadedFileName")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.HasKey("IdDOC");

                    b.HasIndex("IdProfession");

                    b.ToTable("DOC_DOC");
                });

            modelBuilder.Entity("Data.Models.Data.DOC.DOC_DOC_NKPD", b =>
                {
                    b.Property<int>("IdDOC_DOC_NKPD")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdDOC_DOC_NKPD"), 1L, 1);

                    b.Property<int>("IdDOC")
                        .HasColumnType("int");

                    b.Property<int>("IdNKPD")
                        .HasColumnType("int");

                    b.HasKey("IdDOC_DOC_NKPD");

                    b.HasIndex("IdDOC");

                    b.HasIndex("IdNKPD");

                    b.ToTable("DOC_DOC_NKPD");
                });

            modelBuilder.Entity("Data.Models.Data.DOC.ERU", b =>
                {
                    b.Property<int>("IdERU")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdERU"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdDOC")
                        .HasColumnType("int");

                    b.Property<int>("IdEKRLevel")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int>("IdNKRLevel")
                        .HasColumnType("int");

                    b.Property<int>("IdProfessionalTraining")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("RUText")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.HasKey("IdERU");

                    b.HasIndex("IdDOC");

                    b.ToTable("DOC_ERU");
                });

            modelBuilder.Entity("Data.Models.Data.DOC.ERUSpeciality", b =>
                {
                    b.Property<int>("IdERUSpeciality")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdERUSpeciality"), 1L, 1);

                    b.Property<int>("IdERU")
                        .HasColumnType("int");

                    b.Property<int>("IdSpeciality")
                        .HasColumnType("int");

                    b.HasKey("IdERUSpeciality");

                    b.HasIndex("IdERU");

                    b.HasIndex("IdSpeciality");

                    b.ToTable("DOC_ERUSpeciality");
                });

            modelBuilder.Entity("Data.Models.Data.DOC.NKPD", b =>
                {
                    b.Property<int>("IdNKPD")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdNKPD"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EducationLevelCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("IdClassCode")
                        .HasColumnType("int");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdGroupCode")
                        .HasColumnType("int");

                    b.Property<int>("IdIndividualGroupCode")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int>("IdSubclassCode")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.HasKey("IdNKPD");

                    b.ToTable("DOC_NKPD");
                });

            modelBuilder.Entity("Data.Models.Data.ExternalExpertCommission.Expert", b =>
                {
                    b.Property<int>("IdExpert")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdExpert"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int?>("IdPerson")
                        .HasColumnType("int");

                    b.Property<bool>("IsCommissionExpert")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDOCExpert")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExternalExpert")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNapooExpert")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.HasKey("IdExpert");

                    b.HasIndex("IdPerson");

                    b.ToTable("ExpComm_Expert");
                });

            modelBuilder.Entity("Data.Models.Data.ExternalExpertCommission.ExpertDocument", b =>
                {
                    b.Property<int>("IdExpertDocument")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdExpertDocument"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdDocumentType")
                        .HasColumnType("int");

                    b.Property<int>("IdExpert")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UploadedFileName")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.HasKey("IdExpertDocument");

                    b.HasIndex("IdExpert");

                    b.ToTable("ExpComm_ExpertDocument");
                });

            modelBuilder.Entity("Data.Models.Data.ExternalExpertCommission.ExpertExpertCommission", b =>
                {
                    b.Property<int>("IdExpertExpertCommission")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdExpertExpertCommission"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdExpert")
                        .HasColumnType("int");

                    b.Property<int>("IdExpertCommission")
                        .HasColumnType("int")
                        .HasComment("Eкспертна комисия - KeyTypeIntCode = ExpertCommission");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int>("IdRole")
                        .HasColumnType("int")
                        .HasComment("Вид експерт");

                    b.Property<int>("IdStatus")
                        .HasColumnType("int")
                        .HasComment("Статус");

                    b.Property<string>("Institution")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasComment("Институция, която представя");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Occupation")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Длъжност ");

                    b.Property<string>("Protokol")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Протокол");

                    b.Property<DateTime>("ProtokolDate")
                        .HasColumnType("datetime2")
                        .HasComment("Дата на Протокол");

                    b.HasKey("IdExpertExpertCommission");

                    b.HasIndex("IdExpert");

                    b.ToTable("ExpComm_ExpertExpertCommission");
                });

            modelBuilder.Entity("Data.Models.Data.ExternalExpertCommission.ExpertProfessionalDirection", b =>
                {
                    b.Property<int>("IdExpertProfessionalDirection")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdExpertProfessionalDirection"), 1L, 1);

                    b.Property<string>("Comment")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateApprovalExternalExpert")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOrderIncludedExpertCommission")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdExpert")
                        .HasColumnType("int");

                    b.Property<int>("IdExpertType")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int>("IdProfessionalDirection")
                        .HasColumnType("int");

                    b.Property<int>("IdStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IdExpertProfessionalDirection");

                    b.HasIndex("IdExpert");

                    b.HasIndex("IdProfessionalDirection");

                    b.ToTable("ExpComm_ExpertProfessionalDirection");
                });

            modelBuilder.Entity("Data.Models.Data.ProviderData.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int?>("IdPerson")
                        .HasColumnType("int");

                    b.Property<int>("IdUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdUser"), 1L, 1);

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("IdPerson");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Data.Models.Data.ProviderData.NegativeIssue", b =>
                {
                    b.Property<int>("IdNegativeIssue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdNegativeIssue"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int>("IdStartedProcedure")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NegativeIssueText")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.HasKey("IdNegativeIssue");

                    b.HasIndex("IdStartedProcedure");

                    b.ToTable("Procedure_NegativeIssue");
                });

            modelBuilder.Entity("Data.Models.Data.ProviderData.ProcedureDocument", b =>
                {
                    b.Property<int>("IdProcedureDocument")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdProcedureDocument"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DS_DATE")
                        .HasColumnType("datetime2");

                    b.Property<string>("DS_ID")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("DS_LINK")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<DateTime?>("DS_OFFICIAL_DATE")
                        .HasColumnType("datetime2");

                    b.Property<string>("DS_OFFICIAL_ID")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("DS_PREP")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("DateAttachment")
                        .HasColumnType("datetime2");

                    b.Property<string>("Extension")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int?>("IdDocumentType")
                        .HasColumnType("int");

                    b.Property<int?>("IdExpert")
                        .HasColumnType("int")
                        .HasComment("Връзка на документа с  Експерт");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int>("IdStartedProcedure")
                        .HasColumnType("int");

                    b.Property<bool>("IsValid")
                        .HasColumnType("bit");

                    b.Property<string>("MimeType")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UIN")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("UploadedFileName")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.HasKey("IdProcedureDocument");

                    b.HasIndex("IdExpert");

                    b.HasIndex("IdStartedProcedure");

                    b.ToTable("Procedure_Document");
                });

            modelBuilder.Entity("Data.Models.Data.ProviderData.ProcedureExpertCommission", b =>
                {
                    b.Property<int>("IdProcedureExpertCommission")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdProcedureExpertCommission"), 1L, 1);

                    b.Property<int>("IdExpertCommission")
                        .HasColumnType("int");

                    b.Property<int>("IdStartedProcedure")
                        .HasColumnType("int");

                    b.HasKey("IdProcedureExpertCommission");

                    b.HasIndex("IdStartedProcedure");

                    b.ToTable("Procedure_ExpertCommission");
                });

            modelBuilder.Entity("Data.Models.Data.ProviderData.ProcedureExternalExpert", b =>
                {
                    b.Property<int>("IdProcedureExternalExpert")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdProcedureExternalExpert"), 1L, 1);

                    b.Property<int>("IdExpert")
                        .HasColumnType("int");

                    b.Property<int?>("IdProfessionalDirection")
                        .HasColumnType("int");

                    b.Property<int>("IdStartedProcedure")
                        .HasColumnType("int");

                    b.HasKey("IdProcedureExternalExpert");

                    b.HasIndex("IdExpert");

                    b.HasIndex("IdProfessionalDirection");

                    b.HasIndex("IdStartedProcedure");

                    b.ToTable("Procedure_ExternalExpert");
                });

            modelBuilder.Entity("Data.Models.Data.ProviderData.ProcedurePrice", b =>
                {
                    b.Property<int>("IdProcedurePrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdProcedurePrice"), 1L, 1);

                    b.Property<int?>("CountProfessionsFrom")
                        .HasColumnType("int");

                    b.Property<int?>("CountProfessionsTo")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpirationDateFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpirationDateTo")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IdApplicationStatus")
                        .HasColumnType("int");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int>("IdTypeApplication")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("IdProcedurePrice");

                    b.ToTable("Procedure_ProcedurePrice");
                });

            modelBuilder.Entity("Data.Models.Data.ProviderData.Provider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IdLocation")
                        .HasColumnType("int");

                    b.Property<int?>("IdLocationCorrespondence")
                        .HasColumnType("int")
                        .HasComment("Населено място за кореспондениця на ЦПО,ЦИПО");

                    b.Property<int>("IdProviderOwnership")
                        .HasColumnType("int");

                    b.Property<int>("IdProviderRegistration")
                        .HasColumnType("int");

                    b.Property<int>("IdProviderStatus")
                        .HasColumnType("int");

                    b.Property<int>("LicenceNumber")
                        .HasColumnType("int");

                    b.Property<int>("LicenceStatusId")
                        .HasColumnType("int");

                    b.Property<string>("PersonNameCorrespondence")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Лице за контакт/кореспондениця");

                    b.Property<string>("PoviderBulstat")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ProviderAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ProviderAddressCorrespondence")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Адрес за кореспонденция   на ЦПО,ЦИПО");

                    b.Property<string>("ProviderEmail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ProviderEmailCorrespondence")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("E-mail за кореспонденция с ЦПО,ЦИПО");

                    b.Property<string>("ProviderFax")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ProviderFaxCorrespondence")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Факс за кореспонденция с ЦПО,ЦИПО");

                    b.Property<string>("ProviderName")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasComment("Име на ЦПО,ЦИПО");

                    b.Property<string>("ProviderOwner")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ProviderPhone")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ProviderPhoneCorrespondence")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ProviderWeb")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("ZipCodeCorrespondence")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)")
                        .HasComment("Пощенски код за кореспонденция   на ЦПО,ЦИПО");

                    b.HasKey("Id");

                    b.HasIndex("IdLocation");

                    b.HasIndex("IdLocationCorrespondence");

                    b.ToTable("Provider");
                });

            modelBuilder.Entity("Data.Models.Data.ProviderData.ProviderPerson", b =>
                {
                    b.Property<int>("IdProviderPerson")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdProviderPerson"), 1L, 1);

                    b.Property<int>("IdPerson")
                        .HasColumnType("int");

                    b.Property<int>("IdProvider")
                        .HasColumnType("int");

                    b.HasKey("IdProviderPerson");

                    b.HasIndex("IdPerson");

                    b.HasIndex("IdProvider");

                    b.ToTable("ProviderPerson");
                });

            modelBuilder.Entity("Data.Models.Data.ProviderData.StartedProcedure", b =>
                {
                    b.Property<int>("IdStartedProcedure")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdStartedProcedure"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpertReportDeadline")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int>("IdProvider")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LicenseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LicenseNumber")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("MeetingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MeetingHour")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("NapooReportDeadline")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("TS")
                        .HasColumnType("datetime2");

                    b.HasKey("IdStartedProcedure");

                    b.HasIndex("IdProvider");

                    b.ToTable("Procedure_StartedProcedure");
                });

            modelBuilder.Entity("Data.Models.Data.ProviderData.StartedProcedureProgress", b =>
                {
                    b.Property<int>("IdStartedProcedureProgress")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdStartedProcedureProgress"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int>("IdStartedProcedure")
                        .HasColumnType("int");

                    b.Property<int?>("IdStep")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StepDate")
                        .HasColumnType("datetime2");

                    b.HasKey("IdStartedProcedureProgress");

                    b.HasIndex("IdStartedProcedure");

                    b.ToTable("Procedure_StartedProcedureProgress");
                });

            modelBuilder.Entity("Data.Models.Data.Request.DocumentSerialNumber", b =>
                {
                    b.Property<int>("IdDocumentSerialNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdDocumentSerialNumber"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DocumentDate")
                        .HasColumnType("datetime2")
                        .HasComment("Дата на Получаване/Предаване");

                    b.Property<int>("IdCandidateProvider")
                        .HasColumnType("int")
                        .HasComment("Връзка с  CPO - Обучаваща институция");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdDocumentOperation")
                        .HasColumnType("int")
                        .HasComment("Вид операция");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int>("IdRequestDocumentManagement")
                        .HasColumnType("int")
                        .HasComment("Връзка със получени/предадени документи");

                    b.Property<int>("IdTypeOfRequestedDocument")
                        .HasColumnType("int")
                        .HasComment("Връзка с  Тип документ към печатница на МОН");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReceiveDocumentYear")
                        .HasColumnType("int")
                        .HasComment("Календарна година");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Сериен номер на документ");

                    b.HasKey("IdDocumentSerialNumber");

                    b.HasIndex("IdCandidateProvider");

                    b.HasIndex("IdRequestDocumentManagement");

                    b.HasIndex("IdTypeOfRequestedDocument");

                    b.ToTable("Request_DocumentSerialNumber");
                });

            modelBuilder.Entity("Data.Models.Data.Request.DocumentSeries", b =>
                {
                    b.Property<int>("IdDocumentSeries")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdDocumentSeries"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int>("IdTypeOfRequestedDocument")
                        .HasColumnType("int")
                        .HasComment("Връзка с  Тип документ към печатница на МОН");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SeriesName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("IdDocumentSeries");

                    b.HasIndex("IdTypeOfRequestedDocument");

                    b.ToTable("Request_DocumentSeries");
                });

            modelBuilder.Entity("Data.Models.Data.Request.NAPOORequestDoc", b =>
                {
                    b.Property<int>("IdNAPOORequestDoc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdNAPOORequestDoc"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<bool>("IsSent")
                        .HasColumnType("bit")
                        .HasComment("Заявката е изпратена към печатницата");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("NAPOORequestNumber")
                        .HasColumnType("bigint")
                        .HasComment("Ноемер на заявка");

                    b.Property<DateTime?>("RequestDate")
                        .HasColumnType("datetime2")
                        .HasComment("Дата на заявка");

                    b.Property<int?>("RequestYear")
                        .HasColumnType("int")
                        .HasComment("Година на заявка");

                    b.Property<string>("UploadedFileName")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasComment("Прикачен файл");

                    b.HasKey("IdNAPOORequestDoc");

                    b.ToTable("Request_NAPOORequestDoc");
                });

            modelBuilder.Entity("Data.Models.Data.Request.ProviderDocumentOffer", b =>
                {
                    b.Property<int>("IdProviderDocumentOffer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdProviderDocumentOffer"), 1L, 1);

                    b.Property<int>("CountOffered")
                        .HasColumnType("int")
                        .HasComment("Брой предлагани/търсени документи");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCandidateProvider")
                        .HasColumnType("int")
                        .HasComment("Връзка с  CPO - Обучаваща институция");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int>("IdOfferType")
                        .HasColumnType("int")
                        .HasComment("Вид на оферта");

                    b.Property<int>("IdTypeOfRequestedDocument")
                        .HasColumnType("int")
                        .HasComment("Връзка с Тип документ");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("OfferEndDate")
                        .HasColumnType("datetime2")
                        .HasComment("Крайна дата на офертата");

                    b.Property<DateTime>("OfferStartDate")
                        .HasColumnType("datetime2")
                        .HasComment("Начална дата на офертата");

                    b.HasKey("IdProviderDocumentOffer");

                    b.HasIndex("IdCandidateProvider");

                    b.HasIndex("IdTypeOfRequestedDocument");

                    b.ToTable("Request_ProviderDocumentOffer");
                });

            modelBuilder.Entity("Data.Models.Data.Request.ProviderRequestDocument", b =>
                {
                    b.Property<int>("IdProviderRequestDocument")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdProviderRequestDocument"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Адрес");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CurrentYear")
                        .HasColumnType("int")
                        .HasComment("Година на заявка");

                    b.Property<int>("IdCandidateProvider")
                        .HasColumnType("int");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdLocationCorrespondence")
                        .HasColumnType("int")
                        .HasComment("Населено място за кореспондениця на ЦПО,ЦИПО");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int?>("IdNAPOORequestDoc")
                        .HasColumnType("int");

                    b.Property<bool>("IsSent")
                        .HasColumnType("bit")
                        .HasComment("Заявката е изпратена към печатницата");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Имена на заявител");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Длъжност на заявител");

                    b.Property<DateTime?>("RequestDate")
                        .HasColumnType("datetime2")
                        .HasComment("Дата на заявка");

                    b.Property<long?>("RequestNumber")
                        .HasColumnType("bigint")
                        .HasComment("Ноемер на заявка");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Телефон");

                    b.Property<string>("UploadedFileName")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasComment("Прикачен файл");

                    b.HasKey("IdProviderRequestDocument");

                    b.HasIndex("IdCandidateProvider");

                    b.HasIndex("IdLocationCorrespondence");

                    b.HasIndex("IdNAPOORequestDoc");

                    b.ToTable("Request_ProviderRequestDocument");
                });

            modelBuilder.Entity("Data.Models.Data.Request.ReportUploadedDoc", b =>
                {
                    b.Property<int>("IdReportUploadedDoc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdReportUploadedDoc"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasComment("Описание");

                    b.Property<int>("IdCandidateProvider")
                        .HasColumnType("int")
                        .HasComment("Връзка с CPO,CIPO - Обучаваща институция");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int>("IdRequestReport")
                        .HasColumnType("int")
                        .HasComment("Връзка с CPO,CIPO - Обучаваща институция");

                    b.Property<int>("IdTypeReportUploadedDocument")
                        .HasColumnType("int")
                        .HasComment("Тип документ");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UploadedFileName")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasComment("Прикачен файл");

                    b.HasKey("IdReportUploadedDoc");

                    b.HasIndex("IdCandidateProvider");

                    b.HasIndex("IdRequestReport");

                    b.ToTable("Request_ReportUploadedDoc");
                });

            modelBuilder.Entity("Data.Models.Data.Request.RequestDocumentManagement", b =>
                {
                    b.Property<int>("IdRequestDocumentManagement")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdRequestDocumentManagement"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DocumentCount")
                        .HasColumnType("int")
                        .HasComment("Брой документи - Получени/Предадени");

                    b.Property<DateTime>("DocumentDate")
                        .HasColumnType("datetime2")
                        .HasComment("Дата на Получаване/Предаване");

                    b.Property<int>("IdCandidateProvider")
                        .HasColumnType("int")
                        .HasComment("Връзка с  CPO - Обучаваща институция");

                    b.Property<int?>("IdCandidateProviderPartner")
                        .HasColumnType("int")
                        .HasComment("Връзка с  CPO - Обучаваща институция");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdDocumentOperation")
                        .HasColumnType("int")
                        .HasComment("Вид операция");

                    b.Property<int?>("IdDocumentRequestReceiveType")
                        .HasColumnType("int")
                        .HasComment("Начин на получаване на заявката за документи");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int?>("IdProviderRequestDocument")
                        .HasColumnType("int")
                        .HasComment("Връзка със заявка за документация, подадена от ЦПО");

                    b.Property<int?>("IdRequestReport")
                        .HasColumnType("int")
                        .HasComment("Отчет на документи с фабрична номерация по наредба 8");

                    b.Property<int>("IdTypeOfRequestedDocument")
                        .HasColumnType("int")
                        .HasComment("Връзка с  Тип документ към печатница на МОН");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReceiveDocumentYear")
                        .HasColumnType("int")
                        .HasComment("Календарна година");

                    b.HasKey("IdRequestDocumentManagement");

                    b.HasIndex("IdCandidateProvider");

                    b.HasIndex("IdCandidateProviderPartner");

                    b.HasIndex("IdProviderRequestDocument");

                    b.HasIndex("IdRequestReport");

                    b.HasIndex("IdTypeOfRequestedDocument");

                    b.ToTable("Request_RequestDocumentManagement");
                });

            modelBuilder.Entity("Data.Models.Data.Request.RequestDocumentStatus", b =>
                {
                    b.Property<int>("IdRequestDocumentStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdRequestDocumentStatus"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCandidateProvider")
                        .HasColumnType("int")
                        .HasComment("Връзка с  CPO,CIPO - Обучаваща институция");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int>("IdProviderRequestDocument")
                        .HasColumnType("int")
                        .HasComment("Връзка със заявка подадена от ЦПО/ЦИПО");

                    b.Property<int>("IdStatus")
                        .HasColumnType("int")
                        .HasComment("Статус");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.HasKey("IdRequestDocumentStatus");

                    b.HasIndex("IdCandidateProvider");

                    b.HasIndex("IdProviderRequestDocument");

                    b.ToTable("Request_RequestDocumentStatus");
                });

            modelBuilder.Entity("Data.Models.Data.Request.RequestDocumentType", b =>
                {
                    b.Property<int>("IdRequestDocumentType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdRequestDocumentType"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DocumentCount")
                        .HasColumnType("int")
                        .HasComment("Брой документи");

                    b.Property<int>("IdCandidateProvider")
                        .HasColumnType("int")
                        .HasComment("Връзка с  CPO,CIPO - Обучаваща институция");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int>("IdProviderRequestDocument")
                        .HasColumnType("int")
                        .HasComment("Връзка със заявка подадена от ЦПО/ЦИПО");

                    b.Property<int?>("IdRequestDocumentManagement")
                        .HasColumnType("int")
                        .HasComment("Връзка с получен документ");

                    b.Property<int>("IdTypeOfRequestedDocument")
                        .HasColumnType("int")
                        .HasComment("Връзка с Тип документ");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.HasKey("IdRequestDocumentType");

                    b.HasIndex("IdCandidateProvider");

                    b.HasIndex("IdProviderRequestDocument");

                    b.HasIndex("IdRequestDocumentManagement");

                    b.HasIndex("IdTypeOfRequestedDocument");

                    b.ToTable("Request_RequestDocumentType");
                });

            modelBuilder.Entity("Data.Models.Data.Request.RequestReport", b =>
                {
                    b.Property<int>("IdRequestReport")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdRequestReport"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DestructionDate")
                        .HasColumnType("datetime2")
                        .HasComment("Дата на унищожаване");

                    b.Property<int>("IdCandidateProvider")
                        .HasColumnType("int")
                        .HasComment("Връзка с CPO,CIPO - Обучаваща институция");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int>("IdStatus")
                        .HasColumnType("int")
                        .HasComment("Статус на одобрение на отчета");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("IdRequestReport");

                    b.HasIndex("IdCandidateProvider");

                    b.ToTable("Request_Report");
                });

            modelBuilder.Entity("Data.Models.Data.Request.TypeOfRequestedDocument", b =>
                {
                    b.Property<int>("IdTypeOfRequestedDocument")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTypeOfRequestedDocument"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrentPeriod")
                        .HasColumnType("int")
                        .HasComment("Текущ период");

                    b.Property<string>("DocTypeName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Наименование на документ");

                    b.Property<string>("DocTypeOfficialNumber")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Официален номер на документ");

                    b.Property<bool>("HasSerialNumber")
                        .HasColumnType("bit")
                        .HasComment("Има серийни номера");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<bool>("IsDestroyable")
                        .HasColumnType("bit")
                        .HasComment("IsDestroyable");

                    b.Property<bool>("IsValid")
                        .HasColumnType("bit")
                        .HasComment("Докуента е валиден");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Order")
                        .HasColumnType("int")
                        .HasComment("Номер по ред");

                    b.Property<float>("Price")
                        .HasColumnType("real")
                        .HasComment("Единична цена");

                    b.HasKey("IdTypeOfRequestedDocument");

                    b.ToTable("Request_TypeOfRequestedDocument");
                });

            modelBuilder.Entity("Data.Models.Data.Role.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Data.Models.Data.SPPOO.Area", b =>
                {
                    b.Property<int>("IdArea")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdArea"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int>("IdStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("NameEN")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("IdArea");

                    b.ToTable("SPPOO_Area");
                });

            modelBuilder.Entity("Data.Models.Data.SPPOO.FrameworkProgram", b =>
                {
                    b.Property<int>("IdFrameworkProgram")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdFrameworkProgram"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int?>("IdFrameworkProgramConnection")
                        .HasColumnType("int");

                    b.Property<int>("IdMinimumLevelEducation")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int>("IdQualificationLevel")
                        .HasColumnType("int");

                    b.Property<int>("IdTrainingPeriod")
                        .HasColumnType("int");

                    b.Property<int>("IdTypeFrameworkProgram")
                        .HasColumnType("int");

                    b.Property<int>("IdVQS")
                        .HasColumnType("int");

                    b.Property<string>("MinimumLevelQualification")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<double>("Practice")
                        .HasColumnType("float");

                    b.Property<double>("SectionB")
                        .HasColumnType("float");

                    b.Property<double>("SectionА")
                        .HasColumnType("float");

                    b.Property<double>("SectionА1")
                        .HasColumnType("float");

                    b.Property<double>("Theory")
                        .HasColumnType("float");

                    b.HasKey("IdFrameworkProgram");

                    b.ToTable("SPPOO_FrameworkProgram");
                });

            modelBuilder.Entity("Data.Models.Data.SPPOO.FrameworkProgramFormEducation", b =>
                {
                    b.Property<int>("IdFrameworkProgramFormEducation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdFrameworkProgramFormEducation"), 1L, 1);

                    b.Property<int>("IdFormEducation")
                        .HasColumnType("int");

                    b.Property<int>("IdFrameworkProgram")
                        .HasColumnType("int");

                    b.HasKey("IdFrameworkProgramFormEducation");

                    b.HasIndex("IdFrameworkProgram");

                    b.ToTable("SPPOO_FrameworkProgramFormEducation");
                });

            modelBuilder.Entity("Data.Models.Data.SPPOO.Profession", b =>
                {
                    b.Property<int>("IdProfession")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdProfession"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int>("IdProfessionalDirection")
                        .HasColumnType("int");

                    b.Property<int>("IdStatus")
                        .HasColumnType("int");

                    b.Property<bool>("IsPresupposeLegalCapacity")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("NameEN")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("IdProfession");

                    b.HasIndex("IdProfessionalDirection");

                    b.ToTable("SPPOO_Profession");
                });

            modelBuilder.Entity("Data.Models.Data.SPPOO.ProfessionalDirection", b =>
                {
                    b.Property<int>("IdProfessionalDirection")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdProfessionalDirection"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdArea")
                        .HasColumnType("int");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdExpertCommission")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int>("IdStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("NameEN")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("IdProfessionalDirection");

                    b.HasIndex("IdArea");

                    b.ToTable("SPPOO_ProfessionalDirection");
                });

            modelBuilder.Entity("Data.Models.Data.SPPOO.ProfessionalDirectionOrder", b =>
                {
                    b.Property<int>("IdProfessionalDirectionOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdProfessionalDirectionOrder"), 1L, 1);

                    b.Property<int>("IdProfessionalDirection")
                        .HasColumnType("int");

                    b.Property<int>("IdSPPOOOrder")
                        .HasColumnType("int");

                    b.Property<int>("IdTypeChange")
                        .HasColumnType("int");

                    b.HasKey("IdProfessionalDirectionOrder");

                    b.HasIndex("IdProfessionalDirection");

                    b.HasIndex("IdSPPOOOrder");

                    b.ToTable("SPPOO_ProfessionalDirectionOrder");
                });

            modelBuilder.Entity("Data.Models.Data.SPPOO.ProfessionOrder", b =>
                {
                    b.Property<int>("IdProfessionOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdProfessionOrder"), 1L, 1);

                    b.Property<int>("IdProfession")
                        .HasColumnType("int");

                    b.Property<int>("IdSPPOOOrder")
                        .HasColumnType("int");

                    b.Property<int>("IdTypeChange")
                        .HasColumnType("int");

                    b.HasKey("IdProfessionOrder");

                    b.HasIndex("IdProfession");

                    b.HasIndex("IdSPPOOOrder");

                    b.ToTable("SPPOO_ProfessionOrder");
                });

            modelBuilder.Entity("Data.Models.Data.SPPOO.Speciality", b =>
                {
                    b.Property<int>("IdSpeciality")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdSpeciality"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int?>("IdDOC")
                        .HasColumnType("int");

                    b.Property<int>("IdEKRLevel")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<int>("IdNKRLevel")
                        .HasColumnType("int");

                    b.Property<int>("IdProfession")
                        .HasColumnType("int");

                    b.Property<int>("IdStatus")
                        .HasColumnType("int");

                    b.Property<int>("IdVQS")
                        .HasColumnType("int");

                    b.Property<bool>("IsAdultEducation")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDistanceLearning")
                        .HasColumnType("bit");

                    b.Property<bool>("IsShortageSpecialistsLaborMarket")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStateProtectedSpecialties")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTrainingPartProfession")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTrainingStudents")
                        .HasColumnType("bit");

                    b.Property<string>("LinkMON")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("LinkNIP")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("NameEN")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("IdSpeciality");

                    b.HasIndex("IdDOC");

                    b.HasIndex("IdProfession");

                    b.ToTable("SPPOO_Speciality");
                });

            modelBuilder.Entity("Data.Models.Data.SPPOO.SpecialityNKPD", b =>
                {
                    b.Property<int>("IdSpecialityNKPD")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdSpecialityNKPD"), 1L, 1);

                    b.Property<int>("IdNKPD")
                        .HasColumnType("int");

                    b.Property<int>("IdSpeciality")
                        .HasColumnType("int");

                    b.HasKey("IdSpecialityNKPD");

                    b.HasIndex("IdNKPD");

                    b.HasIndex("IdSpeciality");

                    b.ToTable("SPPOO_SpecialityNKPD");
                });

            modelBuilder.Entity("Data.Models.Data.SPPOO.SpecialityOrder", b =>
                {
                    b.Property<int>("IdSpecialityOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdSpecialityOrder"), 1L, 1);

                    b.Property<int>("IdSPPOOOrder")
                        .HasColumnType("int");

                    b.Property<int>("IdSpeciality")
                        .HasColumnType("int");

                    b.Property<int>("IdTypeChange")
                        .HasColumnType("int");

                    b.HasKey("IdSpecialityOrder");

                    b.HasIndex("IdSPPOOOrder");

                    b.HasIndex("IdSpeciality");

                    b.ToTable("SPPOO_SpecialityOrder");
                });

            modelBuilder.Entity("Data.Models.SPPOOOrder", b =>
                {
                    b.Property<int>("IdOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdOrder"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCreateUser")
                        .HasColumnType("int");

                    b.Property<int>("IdModifyUser")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UploadedFileName")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.HasKey("IdOrder");

                    b.ToTable("SPPOO_Order");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Data.Models.Data.Candidate.CandidateCurriculum", b =>
                {
                    b.HasOne("Data.Models.Data.Candidate.CandidateProviderSpeciality", "CandidateProviderSpeciality")
                        .WithMany("CandidateCurriculums")
                        .HasForeignKey("IdCandidateProviderSpeciality")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CandidateProviderSpeciality");
                });

            modelBuilder.Entity("Data.Models.Data.Candidate.CandidateCurriculumERU", b =>
                {
                    b.HasOne("Data.Models.Data.Candidate.CandidateCurriculum", "CandidateCurriculum")
                        .WithMany("CandidateCurriculumERUs")
                        .HasForeignKey("IdCandidateCurriculum")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Data.DOC.ERU", "ERU")
                        .WithMany()
                        .HasForeignKey("IdERU")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CandidateCurriculum");

                    b.Navigation("ERU");
                });

            modelBuilder.Entity("Data.Models.Data.Candidate.CandidateProvider", b =>
                {
                    b.HasOne("Data.Models.Data.Common.Location", "Location")
                        .WithMany()
                        .HasForeignKey("IdLocation");

                    b.HasOne("Data.Models.Data.Common.Location", "LocationCorrespondence")
                        .WithMany()
                        .HasForeignKey("IdLocationCorrespondence");

                    b.HasOne("Data.Models.Data.ProviderData.StartedProcedure", "StartedProcedure")
                        .WithMany("CandidateProviders")
                        .HasForeignKey("IdStartedProcedure");

                    b.Navigation("Location");

                    b.Navigation("LocationCorrespondence");

                    b.Navigation("StartedProcedure");
                });

            modelBuilder.Entity("Data.Models.Data.Candidate.CandidateProviderDocument", b =>
                {
                    b.HasOne("Data.Models.Data.Candidate.CandidateProvider", "CandidateProvider")
                        .WithMany("CandidateProviderDocuments")
                        .HasForeignKey("IdCandidateProvider")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CandidateProvider");
                });

            modelBuilder.Entity("Data.Models.Data.Candidate.CandidateProviderPerson", b =>
                {
                    b.HasOne("Data.Models.Data.Candidate.CandidateProvider", "CandidateProvider")
                        .WithMany()
                        .HasForeignKey("IdCandidate_Provider")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Data.Common.Person", "Person")
                        .WithMany("CandidateProviderPersons")
                        .HasForeignKey("IdPerson")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CandidateProvider");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Data.Models.Data.Candidate.CandidateProviderPremises", b =>
                {
                    b.HasOne("Data.Models.Data.Candidate.CandidateProvider", "CandidateProvider")
                        .WithMany("CandidateProviderPremises")
                        .HasForeignKey("IdCandidate_Provider")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Data.Common.Location", "Location")
                        .WithMany()
                        .HasForeignKey("IdLocation");

                    b.Navigation("CandidateProvider");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Data.Models.Data.Candidate.CandidateProviderPremisesDocument", b =>
                {
                    b.HasOne("Data.Models.Data.Candidate.CandidateProviderPremises", "CandidateProviderPremises")
                        .WithMany("CandidateProviderPremisesDocuments")
                        .HasForeignKey("IdCandidateProviderPremises")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CandidateProviderPremises");
                });

            modelBuilder.Entity("Data.Models.Data.Candidate.CandidateProviderPremisesRoom", b =>
                {
                    b.HasOne("Data.Models.Data.Candidate.CandidateProviderPremises", "CandidateProviderPremises")
                        .WithMany("CandidateProviderPremisesRooms")
                        .HasForeignKey("IdCandidateProviderPremises")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CandidateProviderPremises");
                });

            modelBuilder.Entity("Data.Models.Data.Candidate.CandidateProviderPremisesSpeciality", b =>
                {
                    b.HasOne("Data.Models.Data.Candidate.CandidateProviderPremises", "CandidateProviderPremises")
                        .WithMany("CandidateProviderPremisesSpecialities")
                        .HasForeignKey("IdCandidateProviderPremises")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Data.SPPOO.Speciality", "Speciality")
                        .WithMany("CandidateProviderPremisesSpecialities")
                        .HasForeignKey("IdSpeciality")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CandidateProviderPremises");

                    b.Navigation("Speciality");
                });

            modelBuilder.Entity("Data.Models.Data.Candidate.CandidateProviderSpeciality", b =>
                {
                    b.HasOne("Data.Models.Data.Candidate.CandidateProvider", "CandidateProvider")
                        .WithMany("CandidateProviderSpecialities")
                        .HasForeignKey("IdCandidate_Provider")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Data.SPPOO.FrameworkProgram", "FrameworkProgram")
                        .WithMany()
                        .HasForeignKey("IdFrameworkProgram");

                    b.HasOne("Data.Models.Data.SPPOO.Speciality", "Speciality")
                        .WithMany()
                        .HasForeignKey("IdSpeciality")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CandidateProvider");

                    b.Navigation("FrameworkProgram");

                    b.Navigation("Speciality");
                });

            modelBuilder.Entity("Data.Models.Data.Candidate.CandidateProviderStatus", b =>
                {
                    b.HasOne("Data.Models.Data.Candidate.CandidateProvider", "CandidateProvider")
                        .WithMany("CandidateProviderStatuses")
                        .HasForeignKey("IdCandidate_Provider")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CandidateProvider");
                });

            modelBuilder.Entity("Data.Models.Data.Candidate.CandidateProviderTrainer", b =>
                {
                    b.HasOne("Data.Models.Data.Candidate.CandidateProvider", "CandidateProvider")
                        .WithMany("CandidateProviderTrainers")
                        .HasForeignKey("IdCandidate_Provider")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CandidateProvider");
                });

            modelBuilder.Entity("Data.Models.Data.Candidate.CandidateProviderTrainerDocument", b =>
                {
                    b.HasOne("Data.Models.Data.Candidate.CandidateProviderTrainer", "CandidateProviderTrainer")
                        .WithMany("CandidateProviderTrainerDocuments")
                        .HasForeignKey("IdCandidateProviderTrainer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CandidateProviderTrainer");
                });

            modelBuilder.Entity("Data.Models.Data.Candidate.CandidateProviderTrainerProfile", b =>
                {
                    b.HasOne("Data.Models.Data.Candidate.CandidateProviderTrainer", "CandidateProviderTrainer")
                        .WithMany("CandidateProviderTrainerProfiles")
                        .HasForeignKey("IdCandidateProviderTrainer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Data.SPPOO.ProfessionalDirection", "ProfessionalDirection")
                        .WithMany()
                        .HasForeignKey("IdProfessionalDirection")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CandidateProviderTrainer");

                    b.Navigation("ProfessionalDirection");
                });

            modelBuilder.Entity("Data.Models.Data.Candidate.CandidateProviderTrainerQualification", b =>
                {
                    b.HasOne("Data.Models.Data.Candidate.CandidateProviderTrainer", "CandidateProviderTrainer")
                        .WithMany("CandidateProviderTrainerQualifications")
                        .HasForeignKey("IdCandidateProviderTrainer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Data.SPPOO.Profession", "Profession")
                        .WithMany()
                        .HasForeignKey("IdProfession");

                    b.Navigation("CandidateProviderTrainer");

                    b.Navigation("Profession");
                });

            modelBuilder.Entity("Data.Models.Data.Candidate.CandidateProviderTrainerSpeciality", b =>
                {
                    b.HasOne("Data.Models.Data.Candidate.CandidateProviderTrainer", "CandidateProviderTrainer")
                        .WithMany("CandidateProviderTrainerSpecialities")
                        .HasForeignKey("IdCandidateProviderTrainer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Data.SPPOO.Speciality", "Speciality")
                        .WithMany("CandidateProviderTrainerSpecialities")
                        .HasForeignKey("IdSpeciality")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CandidateProviderTrainer");

                    b.Navigation("Speciality");
                });

            modelBuilder.Entity("Data.Models.Data.Common.KeyValue", b =>
                {
                    b.HasOne("Data.Models.Data.Common.KeyType", "KeyType")
                        .WithMany("KeyValues")
                        .HasForeignKey("IdKeyType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KeyType");
                });

            modelBuilder.Entity("Data.Models.Data.Common.Location", b =>
                {
                    b.HasOne("Data.Models.Data.Common.Municipality", "Municipality")
                        .WithMany("Locations")
                        .HasForeignKey("idMunicipality")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Municipality");
                });

            modelBuilder.Entity("Data.Models.Data.Common.MenuNodeRole", b =>
                {
                    b.HasOne("Data.Models.Data.Role.ApplicationRole", "ApplicationRole")
                        .WithMany()
                        .HasForeignKey("IdApplicationRole")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Data.Common.MenuNode", "MenuNode")
                        .WithMany("MenuNodeRoles")
                        .HasForeignKey("IdMenuNode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationRole");

                    b.Navigation("MenuNode");
                });

            modelBuilder.Entity("Data.Models.Data.Common.Municipality", b =>
                {
                    b.HasOne("Data.Models.Data.Common.District", "District")
                        .WithMany("Municipalities")
                        .HasForeignKey("idDistrict")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");
                });

            modelBuilder.Entity("Data.Models.Data.Common.Notification", b =>
                {
                    b.HasOne("Data.Models.Data.Common.Person", "PersonFrom")
                        .WithMany()
                        .HasForeignKey("IdPersonFrom");

                    b.HasOne("Data.Models.Data.Common.Person", "PersonTo")
                        .WithMany()
                        .HasForeignKey("IdPersonTo");

                    b.Navigation("PersonFrom");

                    b.Navigation("PersonTo");
                });

            modelBuilder.Entity("Data.Models.Data.Common.Person", b =>
                {
                    b.HasOne("Data.Models.Data.Common.Location", "Location")
                        .WithMany()
                        .HasForeignKey("IdLocation");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Data.Models.Data.Common.Region", b =>
                {
                    b.HasOne("Data.Models.Data.Common.Municipality", "Municipality")
                        .WithMany("Regions")
                        .HasForeignKey("idMunicipality")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Municipality");
                });

            modelBuilder.Entity("Data.Models.Data.DOC.DOC", b =>
                {
                    b.HasOne("Data.Models.Data.SPPOO.Profession", "Profession")
                        .WithMany("DOCs")
                        .HasForeignKey("IdProfession")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profession");
                });

            modelBuilder.Entity("Data.Models.Data.DOC.DOC_DOC_NKPD", b =>
                {
                    b.HasOne("Data.Models.Data.DOC.DOC", "DOC")
                        .WithMany("docNkpds")
                        .HasForeignKey("IdDOC")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Data.DOC.NKPD", "NKPD")
                        .WithMany()
                        .HasForeignKey("IdNKPD")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DOC");

                    b.Navigation("NKPD");
                });

            modelBuilder.Entity("Data.Models.Data.DOC.ERU", b =>
                {
                    b.HasOne("Data.Models.Data.DOC.DOC", "DOC")
                        .WithMany("ERUs")
                        .HasForeignKey("IdDOC")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DOC");
                });

            modelBuilder.Entity("Data.Models.Data.DOC.ERUSpeciality", b =>
                {
                    b.HasOne("Data.Models.Data.DOC.ERU", "ERU")
                        .WithMany("ERUSpecialities")
                        .HasForeignKey("IdERU")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Data.SPPOO.Speciality", "Speciality")
                        .WithMany("ERUSpecialities")
                        .HasForeignKey("IdSpeciality")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ERU");

                    b.Navigation("Speciality");
                });

            modelBuilder.Entity("Data.Models.Data.ExternalExpertCommission.Expert", b =>
                {
                    b.HasOne("Data.Models.Data.Common.Person", "Person")
                        .WithMany()
                        .HasForeignKey("IdPerson");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Data.Models.Data.ExternalExpertCommission.ExpertDocument", b =>
                {
                    b.HasOne("Data.Models.Data.ExternalExpertCommission.Expert", "Expert")
                        .WithMany("ExpertDocuments")
                        .HasForeignKey("IdExpert")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Expert");
                });

            modelBuilder.Entity("Data.Models.Data.ExternalExpertCommission.ExpertExpertCommission", b =>
                {
                    b.HasOne("Data.Models.Data.ExternalExpertCommission.Expert", "Expert")
                        .WithMany("ExpertExpertCommissions")
                        .HasForeignKey("IdExpert")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Expert");
                });

            modelBuilder.Entity("Data.Models.Data.ExternalExpertCommission.ExpertProfessionalDirection", b =>
                {
                    b.HasOne("Data.Models.Data.ExternalExpertCommission.Expert", "Expert")
                        .WithMany("ExpertProfessionalDirections")
                        .HasForeignKey("IdExpert")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Data.SPPOO.ProfessionalDirection", "ProfessionalDirection")
                        .WithMany()
                        .HasForeignKey("IdProfessionalDirection")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Expert");

                    b.Navigation("ProfessionalDirection");
                });

            modelBuilder.Entity("Data.Models.Data.ProviderData.ApplicationUser", b =>
                {
                    b.HasOne("Data.Models.Data.Common.Person", "Person")
                        .WithMany()
                        .HasForeignKey("IdPerson");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Data.Models.Data.ProviderData.NegativeIssue", b =>
                {
                    b.HasOne("Data.Models.Data.ProviderData.StartedProcedure", "StartedProcedure")
                        .WithMany("NegativeIssues")
                        .HasForeignKey("IdStartedProcedure")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StartedProcedure");
                });

            modelBuilder.Entity("Data.Models.Data.ProviderData.ProcedureDocument", b =>
                {
                    b.HasOne("Data.Models.Data.ExternalExpertCommission.Expert", "Expert")
                        .WithMany()
                        .HasForeignKey("IdExpert");

                    b.HasOne("Data.Models.Data.ProviderData.StartedProcedure", "StartedProcedure")
                        .WithMany("ProcedureDocuments")
                        .HasForeignKey("IdStartedProcedure")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Expert");

                    b.Navigation("StartedProcedure");
                });

            modelBuilder.Entity("Data.Models.Data.ProviderData.ProcedureExpertCommission", b =>
                {
                    b.HasOne("Data.Models.Data.ProviderData.StartedProcedure", "StartedProcedure")
                        .WithMany("ProcedureExpertCommissions")
                        .HasForeignKey("IdStartedProcedure")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StartedProcedure");
                });

            modelBuilder.Entity("Data.Models.Data.ProviderData.ProcedureExternalExpert", b =>
                {
                    b.HasOne("Data.Models.Data.ExternalExpertCommission.Expert", "Expert")
                        .WithMany()
                        .HasForeignKey("IdExpert")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Data.SPPOO.ProfessionalDirection", "ProfessionalDirection")
                        .WithMany()
                        .HasForeignKey("IdProfessionalDirection");

                    b.HasOne("Data.Models.Data.ProviderData.StartedProcedure", "StartedProcedure")
                        .WithMany("ProcedureExternalExperts")
                        .HasForeignKey("IdStartedProcedure")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Expert");

                    b.Navigation("ProfessionalDirection");

                    b.Navigation("StartedProcedure");
                });

            modelBuilder.Entity("Data.Models.Data.ProviderData.Provider", b =>
                {
                    b.HasOne("Data.Models.Data.Common.Location", "Location")
                        .WithMany()
                        .HasForeignKey("IdLocation");

                    b.HasOne("Data.Models.Data.Common.Location", "LocationCorrespondence")
                        .WithMany()
                        .HasForeignKey("IdLocationCorrespondence");

                    b.Navigation("Location");

                    b.Navigation("LocationCorrespondence");
                });

            modelBuilder.Entity("Data.Models.Data.ProviderData.ProviderPerson", b =>
                {
                    b.HasOne("Data.Models.Data.Common.Person", "Person")
                        .WithMany()
                        .HasForeignKey("IdPerson")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Data.ProviderData.Provider", "Provider")
                        .WithMany()
                        .HasForeignKey("IdProvider")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("Data.Models.Data.ProviderData.StartedProcedure", b =>
                {
                    b.HasOne("Data.Models.Data.ProviderData.Provider", "Provider")
                        .WithMany()
                        .HasForeignKey("IdProvider")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("Data.Models.Data.ProviderData.StartedProcedureProgress", b =>
                {
                    b.HasOne("Data.Models.Data.ProviderData.StartedProcedure", "StartedProcedure")
                        .WithMany("StartedProcedureProgresses")
                        .HasForeignKey("IdStartedProcedure")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StartedProcedure");
                });

            modelBuilder.Entity("Data.Models.Data.Request.DocumentSerialNumber", b =>
                {
                    b.HasOne("Data.Models.Data.Candidate.CandidateProvider", "CandidateProvider")
                        .WithMany()
                        .HasForeignKey("IdCandidateProvider")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Data.Request.RequestDocumentManagement", "RequestDocumentManagement")
                        .WithMany("DocumentSerialNumbers")
                        .HasForeignKey("IdRequestDocumentManagement")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Data.Request.TypeOfRequestedDocument", "TypeOfRequestedDocument")
                        .WithMany("DocumentSerialNumbers")
                        .HasForeignKey("IdTypeOfRequestedDocument")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CandidateProvider");

                    b.Navigation("RequestDocumentManagement");

                    b.Navigation("TypeOfRequestedDocument");
                });

            modelBuilder.Entity("Data.Models.Data.Request.DocumentSeries", b =>
                {
                    b.HasOne("Data.Models.Data.Request.TypeOfRequestedDocument", "TypeOfRequestedDocument")
                        .WithMany("DocumentSeries")
                        .HasForeignKey("IdTypeOfRequestedDocument")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TypeOfRequestedDocument");
                });

            modelBuilder.Entity("Data.Models.Data.Request.ProviderDocumentOffer", b =>
                {
                    b.HasOne("Data.Models.Data.Candidate.CandidateProvider", "CandidateProvider")
                        .WithMany("ProviderDocumentOffers")
                        .HasForeignKey("IdCandidateProvider")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Data.Request.TypeOfRequestedDocument", "TypeOfRequestedDocument")
                        .WithMany("ProviderDocumentOffers")
                        .HasForeignKey("IdTypeOfRequestedDocument")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CandidateProvider");

                    b.Navigation("TypeOfRequestedDocument");
                });

            modelBuilder.Entity("Data.Models.Data.Request.ProviderRequestDocument", b =>
                {
                    b.HasOne("Data.Models.Data.Candidate.CandidateProvider", "CandidateProvider")
                        .WithMany()
                        .HasForeignKey("IdCandidateProvider")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Data.Common.Location", "LocationCorrespondence")
                        .WithMany()
                        .HasForeignKey("IdLocationCorrespondence")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Data.Request.NAPOORequestDoc", "NAPOORequestDoc")
                        .WithMany("ProviderRequestDocuments")
                        .HasForeignKey("IdNAPOORequestDoc");

                    b.Navigation("CandidateProvider");

                    b.Navigation("LocationCorrespondence");

                    b.Navigation("NAPOORequestDoc");
                });

            modelBuilder.Entity("Data.Models.Data.Request.ReportUploadedDoc", b =>
                {
                    b.HasOne("Data.Models.Data.Candidate.CandidateProvider", "CandidateProvider")
                        .WithMany()
                        .HasForeignKey("IdCandidateProvider")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Data.Request.RequestReport", "RequestReport")
                        .WithMany("ReportUploadedDocs")
                        .HasForeignKey("IdRequestReport")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CandidateProvider");

                    b.Navigation("RequestReport");
                });

            modelBuilder.Entity("Data.Models.Data.Request.RequestDocumentManagement", b =>
                {
                    b.HasOne("Data.Models.Data.Candidate.CandidateProvider", "CandidateProvider")
                        .WithMany()
                        .HasForeignKey("IdCandidateProvider")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Data.Candidate.CandidateProvider", "CandidateProviderPartner")
                        .WithMany()
                        .HasForeignKey("IdCandidateProviderPartner");

                    b.HasOne("Data.Models.Data.Request.ProviderRequestDocument", "ProviderRequestDocument")
                        .WithMany("RequestDocumentManagements")
                        .HasForeignKey("IdProviderRequestDocument");

                    b.HasOne("Data.Models.Data.Request.RequestReport", "RequestReport")
                        .WithMany()
                        .HasForeignKey("IdRequestReport");

                    b.HasOne("Data.Models.Data.Request.TypeOfRequestedDocument", "TypeOfRequestedDocument")
                        .WithMany("RequestDocumentManagements")
                        .HasForeignKey("IdTypeOfRequestedDocument")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CandidateProvider");

                    b.Navigation("CandidateProviderPartner");

                    b.Navigation("ProviderRequestDocument");

                    b.Navigation("RequestReport");

                    b.Navigation("TypeOfRequestedDocument");
                });

            modelBuilder.Entity("Data.Models.Data.Request.RequestDocumentStatus", b =>
                {
                    b.HasOne("Data.Models.Data.Candidate.CandidateProvider", "CandidateProvider")
                        .WithMany()
                        .HasForeignKey("IdCandidateProvider")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Data.Request.ProviderRequestDocument", "ProviderRequestDocument")
                        .WithMany("RequestDocumentStatuses")
                        .HasForeignKey("IdProviderRequestDocument")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CandidateProvider");

                    b.Navigation("ProviderRequestDocument");
                });

            modelBuilder.Entity("Data.Models.Data.Request.RequestDocumentType", b =>
                {
                    b.HasOne("Data.Models.Data.Candidate.CandidateProvider", "CandidateProvider")
                        .WithMany()
                        .HasForeignKey("IdCandidateProvider")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Data.Request.ProviderRequestDocument", "ProviderRequestDocument")
                        .WithMany("RequestDocumentTypes")
                        .HasForeignKey("IdProviderRequestDocument")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Data.Request.RequestDocumentManagement", "RequestDocumentManagement")
                        .WithMany("RequestDocumentTypes")
                        .HasForeignKey("IdRequestDocumentManagement");

                    b.HasOne("Data.Models.Data.Request.TypeOfRequestedDocument", "TypeOfRequestedDocument")
                        .WithMany("RequestDocumentTypes")
                        .HasForeignKey("IdTypeOfRequestedDocument")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CandidateProvider");

                    b.Navigation("ProviderRequestDocument");

                    b.Navigation("RequestDocumentManagement");

                    b.Navigation("TypeOfRequestedDocument");
                });

            modelBuilder.Entity("Data.Models.Data.Request.RequestReport", b =>
                {
                    b.HasOne("Data.Models.Data.Candidate.CandidateProvider", "CandidateProvider")
                        .WithMany("RequestReports")
                        .HasForeignKey("IdCandidateProvider")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CandidateProvider");
                });

            modelBuilder.Entity("Data.Models.Data.SPPOO.FrameworkProgramFormEducation", b =>
                {
                    b.HasOne("Data.Models.Data.SPPOO.FrameworkProgram", "FrameworkProgram")
                        .WithMany("FrameworkProgramFormEducations")
                        .HasForeignKey("IdFrameworkProgram")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FrameworkProgram");
                });

            modelBuilder.Entity("Data.Models.Data.SPPOO.Profession", b =>
                {
                    b.HasOne("Data.Models.Data.SPPOO.ProfessionalDirection", "ProfessionalDirection")
                        .WithMany("Professions")
                        .HasForeignKey("IdProfessionalDirection")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProfessionalDirection");
                });

            modelBuilder.Entity("Data.Models.Data.SPPOO.ProfessionalDirection", b =>
                {
                    b.HasOne("Data.Models.Data.SPPOO.Area", "Area")
                        .WithMany("ProfessionalDirections")
                        .HasForeignKey("IdArea")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");
                });

            modelBuilder.Entity("Data.Models.Data.SPPOO.ProfessionalDirectionOrder", b =>
                {
                    b.HasOne("Data.Models.Data.SPPOO.ProfessionalDirection", "ProfessionalDirection")
                        .WithMany("ProfessionalDirectionOrders")
                        .HasForeignKey("IdProfessionalDirection")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.SPPOOOrder", "SPPOOOrder")
                        .WithMany("ProfessionalDirectionOrders")
                        .HasForeignKey("IdSPPOOOrder")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProfessionalDirection");

                    b.Navigation("SPPOOOrder");
                });

            modelBuilder.Entity("Data.Models.Data.SPPOO.ProfessionOrder", b =>
                {
                    b.HasOne("Data.Models.Data.SPPOO.Profession", "Profession")
                        .WithMany("ProfessionOrders")
                        .HasForeignKey("IdProfession")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.SPPOOOrder", "SPPOOOrder")
                        .WithMany("ProfessionOrders")
                        .HasForeignKey("IdSPPOOOrder")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profession");

                    b.Navigation("SPPOOOrder");
                });

            modelBuilder.Entity("Data.Models.Data.SPPOO.Speciality", b =>
                {
                    b.HasOne("Data.Models.Data.DOC.DOC", "DOC")
                        .WithMany("Specialities")
                        .HasForeignKey("IdDOC");

                    b.HasOne("Data.Models.Data.SPPOO.Profession", "Profession")
                        .WithMany("Specialities")
                        .HasForeignKey("IdProfession")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DOC");

                    b.Navigation("Profession");
                });

            modelBuilder.Entity("Data.Models.Data.SPPOO.SpecialityNKPD", b =>
                {
                    b.HasOne("Data.Models.Data.DOC.NKPD", "NKPD")
                        .WithMany()
                        .HasForeignKey("IdNKPD")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Data.SPPOO.Speciality", "Speciality")
                        .WithMany("SpecialityNKPDs")
                        .HasForeignKey("IdSpeciality")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NKPD");

                    b.Navigation("Speciality");
                });

            modelBuilder.Entity("Data.Models.Data.SPPOO.SpecialityOrder", b =>
                {
                    b.HasOne("Data.Models.SPPOOOrder", "SPPOOOrder")
                        .WithMany("SpecialityOrders")
                        .HasForeignKey("IdSPPOOOrder")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Data.SPPOO.Speciality", "Speciality")
                        .WithMany("SpecialityOrders")
                        .HasForeignKey("IdSpeciality")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SPPOOOrder");

                    b.Navigation("Speciality");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Data.Models.Data.Role.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Data.Models.Data.ProviderData.ApplicationUser", null)
                        .WithMany("Claims")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("Data.Models.Data.ProviderData.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Data.Models.Data.ProviderData.ApplicationUser", null)
                        .WithMany("Logins")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("Data.Models.Data.ProviderData.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Data.Models.Data.ProviderData.ApplicationUser", null)
                        .WithMany("Roles")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("Data.Models.Data.Role.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Data.ProviderData.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Data.Models.Data.ProviderData.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Models.Data.Candidate.CandidateCurriculum", b =>
                {
                    b.Navigation("CandidateCurriculumERUs");
                });

            modelBuilder.Entity("Data.Models.Data.Candidate.CandidateProvider", b =>
                {
                    b.Navigation("CandidateProviderDocuments");

                    b.Navigation("CandidateProviderPremises");

                    b.Navigation("CandidateProviderSpecialities");

                    b.Navigation("CandidateProviderStatuses");

                    b.Navigation("CandidateProviderTrainers");

                    b.Navigation("ProviderDocumentOffers");

                    b.Navigation("RequestReports");
                });

            modelBuilder.Entity("Data.Models.Data.Candidate.CandidateProviderPremises", b =>
                {
                    b.Navigation("CandidateProviderPremisesDocuments");

                    b.Navigation("CandidateProviderPremisesRooms");

                    b.Navigation("CandidateProviderPremisesSpecialities");
                });

            modelBuilder.Entity("Data.Models.Data.Candidate.CandidateProviderSpeciality", b =>
                {
                    b.Navigation("CandidateCurriculums");
                });

            modelBuilder.Entity("Data.Models.Data.Candidate.CandidateProviderTrainer", b =>
                {
                    b.Navigation("CandidateProviderTrainerDocuments");

                    b.Navigation("CandidateProviderTrainerProfiles");

                    b.Navigation("CandidateProviderTrainerQualifications");

                    b.Navigation("CandidateProviderTrainerSpecialities");
                });

            modelBuilder.Entity("Data.Models.Data.Common.District", b =>
                {
                    b.Navigation("Municipalities");
                });

            modelBuilder.Entity("Data.Models.Data.Common.KeyType", b =>
                {
                    b.Navigation("KeyValues");
                });

            modelBuilder.Entity("Data.Models.Data.Common.MenuNode", b =>
                {
                    b.Navigation("MenuNodeRoles");
                });

            modelBuilder.Entity("Data.Models.Data.Common.Municipality", b =>
                {
                    b.Navigation("Locations");

                    b.Navigation("Regions");
                });

            modelBuilder.Entity("Data.Models.Data.Common.Person", b =>
                {
                    b.Navigation("CandidateProviderPersons");
                });

            modelBuilder.Entity("Data.Models.Data.DOC.DOC", b =>
                {
                    b.Navigation("ERUs");

                    b.Navigation("Specialities");

                    b.Navigation("docNkpds");
                });

            modelBuilder.Entity("Data.Models.Data.DOC.ERU", b =>
                {
                    b.Navigation("ERUSpecialities");
                });

            modelBuilder.Entity("Data.Models.Data.ExternalExpertCommission.Expert", b =>
                {
                    b.Navigation("ExpertDocuments");

                    b.Navigation("ExpertExpertCommissions");

                    b.Navigation("ExpertProfessionalDirections");
                });

            modelBuilder.Entity("Data.Models.Data.ProviderData.ApplicationUser", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Logins");

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("Data.Models.Data.ProviderData.StartedProcedure", b =>
                {
                    b.Navigation("CandidateProviders");

                    b.Navigation("NegativeIssues");

                    b.Navigation("ProcedureDocuments");

                    b.Navigation("ProcedureExpertCommissions");

                    b.Navigation("ProcedureExternalExperts");

                    b.Navigation("StartedProcedureProgresses");
                });

            modelBuilder.Entity("Data.Models.Data.Request.NAPOORequestDoc", b =>
                {
                    b.Navigation("ProviderRequestDocuments");
                });

            modelBuilder.Entity("Data.Models.Data.Request.ProviderRequestDocument", b =>
                {
                    b.Navigation("RequestDocumentManagements");

                    b.Navigation("RequestDocumentStatuses");

                    b.Navigation("RequestDocumentTypes");
                });

            modelBuilder.Entity("Data.Models.Data.Request.RequestDocumentManagement", b =>
                {
                    b.Navigation("DocumentSerialNumbers");

                    b.Navigation("RequestDocumentTypes");
                });

            modelBuilder.Entity("Data.Models.Data.Request.RequestReport", b =>
                {
                    b.Navigation("ReportUploadedDocs");
                });

            modelBuilder.Entity("Data.Models.Data.Request.TypeOfRequestedDocument", b =>
                {
                    b.Navigation("DocumentSerialNumbers");

                    b.Navigation("DocumentSeries");

                    b.Navigation("ProviderDocumentOffers");

                    b.Navigation("RequestDocumentManagements");

                    b.Navigation("RequestDocumentTypes");
                });

            modelBuilder.Entity("Data.Models.Data.SPPOO.Area", b =>
                {
                    b.Navigation("ProfessionalDirections");
                });

            modelBuilder.Entity("Data.Models.Data.SPPOO.FrameworkProgram", b =>
                {
                    b.Navigation("FrameworkProgramFormEducations");
                });

            modelBuilder.Entity("Data.Models.Data.SPPOO.Profession", b =>
                {
                    b.Navigation("DOCs");

                    b.Navigation("ProfessionOrders");

                    b.Navigation("Specialities");
                });

            modelBuilder.Entity("Data.Models.Data.SPPOO.ProfessionalDirection", b =>
                {
                    b.Navigation("ProfessionalDirectionOrders");

                    b.Navigation("Professions");
                });

            modelBuilder.Entity("Data.Models.Data.SPPOO.Speciality", b =>
                {
                    b.Navigation("CandidateProviderPremisesSpecialities");

                    b.Navigation("CandidateProviderTrainerSpecialities");

                    b.Navigation("ERUSpecialities");

                    b.Navigation("SpecialityNKPDs");

                    b.Navigation("SpecialityOrders");
                });

            modelBuilder.Entity("Data.Models.SPPOOOrder", b =>
                {
                    b.Navigation("ProfessionOrders");

                    b.Navigation("ProfessionalDirectionOrders");

                    b.Navigation("SpecialityOrders");
                });
#pragma warning restore 612, 618
        }
    }
}
